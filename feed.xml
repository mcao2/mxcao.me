<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-06-23T05:56:40+00:00</updated><id>/feed.xml</id><title type="html">mxin</title><subtitle>mxin</subtitle><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><entry><title type="html">How to setup PTR record in Oracle Cloud Infrastructure (OCI)</title><link href="/2023/06/22/how-to-setup-ptr-record-in-oci/" rel="alternate" type="text/html" title="How to setup PTR record in Oracle Cloud Infrastructure (OCI)" /><published>2023-06-22T00:00:00+00:00</published><updated>2023-06-22T00:00:00+00:00</updated><id>/2023/06/22/how-to-setup-ptr-record-in-oci</id><content type="html" xml:base="/2023/06/22/how-to-setup-ptr-record-in-oci/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;One of my VPS machines use &lt;a href=&quot;https://www.cloudron.io/&quot;&gt;Cloudron&lt;/a&gt; to easily self-host apps. And I always receive a notification from my Cloudron instance saying:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PTR DNS record (PTR) did not match.
    Hostname: &amp;lt;IP&amp;gt;
    Expected: &amp;lt;My Domain Name&amp;gt;
    Actual: null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;PTR: A Pointer record reverse maps an IP address to a hostname. This behavior is the opposite of an A Record, which forward maps a hostname to an IP address. PTR records are commonly found in reverse DNS zones. For more information about PTR records, see RFC 1035.&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I looked it up and it takes me to &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/DNS/Tasks/reversedns.htm&quot;&gt;OCI’s Reverse DNS&lt;/a&gt;. As it says, reverse DNS maps an IP to a hostname.&lt;/p&gt;

&lt;p&gt;Even though my DNS records are managed by Cloudflare, the IP belongs to OCI. PTR records are primarily used for reverse DNS lookup, and their management is typically handled by the owner of the IP address range, which, in this case, is OCI.&lt;/p&gt;

&lt;h2 id=&quot;how-to&quot;&gt;How-to&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create an A (IPv4) or AAAA (IPv6) forward record that points your FQDN to the IP.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a service ticket for OCI and include the IP and FQDN that you want in the PTR. Note that you need to explicitly mention that you have finished step 1 in the ticket.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;

&lt;p&gt;After OCI team added the PTR record, we can verify by executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig -x &amp;lt;IP&amp;gt;&lt;/code&gt; and check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANSWER SECTION&lt;/code&gt; contains the PTR record.&lt;/p&gt;

&lt;p&gt;E.g. if your IP is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.3.4&lt;/code&gt; and the mapped FQDN is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example.com&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig -x 1.2.3.4&lt;/code&gt; would return the following in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANSWER SECTION&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4.3.2.1.in-addr.arpa. 3600 IN	PTR	example.com.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://docs.oracle.com/en-us/iaas/Content/DNS/Reference/supporteddnsresource.htm#types__dlentry_ptr &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://docs.oracle.com/en-us/iaas/Content/Network/Concepts/reverse_dns.htm &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><category term="VPS" /><category term="PTR" /><category term="DNS" /><category term="Email" /><category term="Cloudron" /><summary type="html">Introduction One of my VPS machines use Cloudron to easily self-host apps. And I always receive a notification from my Cloudron instance saying: PTR DNS record (PTR) did not match. Hostname: &amp;lt;IP&amp;gt; Expected: &amp;lt;My Domain Name&amp;gt; Actual: null</summary></entry><entry><title type="html">Debug Resource Deadlock Avoided Error</title><link href="/2023/06/21/Debug-resource-deadlock-avoided/" rel="alternate" type="text/html" title="Debug Resource Deadlock Avoided Error" /><published>2023-06-21T00:00:00+00:00</published><updated>2023-06-21T00:00:00+00:00</updated><id>/2023/06/21/Debug-resource-deadlock-avoided</id><content type="html" xml:base="/2023/06/21/Debug-resource-deadlock-avoided/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When I was debugging a core dump issue discovered in ADS (Autonomous Driving System) testing, I found a very interesting error message in the log file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terminate called after throwing an instance of &lt;span class=&quot;s1&quot;&gt;'boost::interprocess::interprocess_exception'&lt;/span&gt;
  what&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;:  Resource deadlock avoided
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;At first I thought there might be some bugs in my code when using the interprocess filelock in boost library. But after some investigation, I found that this error message is actually from the system.&lt;/p&gt;

&lt;p&gt;The scenario is that we have multiple processes and each process may have multiple threads concurrently accessing our map data. The data is organized into multiple files and each file is protected by a filelock. The filelock is implemented using the interprocess filelock in boost library and each thread can grab a RLock or WLock to access the file. The RLock is shared among threads and the WLock is exclusive to the thread that grabs it.&lt;/p&gt;

&lt;h2 id=&quot;root-cause&quot;&gt;Root cause&lt;/h2&gt;

&lt;p&gt;The root cause of this issue is that the operating system doesn’t have a deadlock detection granularity at the thread level, only at the process level.&lt;/p&gt;

&lt;p&gt;What this means is that if we have 2 processes, each process have 2 threads (name them &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1T1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1T2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2T1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2T2&lt;/code&gt;), then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;at timestamp t1, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1T1&lt;/code&gt; grabs a write lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2T1&lt;/code&gt; grabs a write lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;at timestamp t2, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1T2&lt;/code&gt; attempts to grab a read lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2T2&lt;/code&gt; attempts to grab a read lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although there is no real deadlocks at timestamp t2, the OS &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thinks&lt;/code&gt; there is a deadlock because it sees &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1&lt;/code&gt; is waiting for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2&lt;/code&gt; is waiting for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;

&lt;p&gt;Below I provide a simple C++ program to reproduce this issue. The program has 2 processes, each process has 2 threads. Each thread grabs a lock on a file and sleeps for a while. The first process grabs a write lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D1&lt;/code&gt; and a read lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D2&lt;/code&gt;. The second process grabs a write lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D2&lt;/code&gt; and a read lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that some internal implementation details are omitted for simplicity.&lt;/p&gt;

&lt;p&gt;If we run the program, we can reproduce the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource deadlock avoided&lt;/code&gt; error message.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/wait.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;thread&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;flock.h&quot; // internal filelock implementation
#include &quot;util.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;routine_read_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}.lock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FileLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Readlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SPDLOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read lock on {} acquired&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SPDLOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read lock on {} released&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;routine_write_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}.lock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FileLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Writelock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SPDLOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;write lock on {} acquired&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SPDLOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;write lock on {} released&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SPDLOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=========2 process, each 2 threads=========&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// child process&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routine_write_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routine_read_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// parent process&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routine_write_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routine_read_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;The solution is to retry the lock acquisition a limited number of times when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource deadlock avoided&lt;/code&gt; error message is thrown and random sleep for a while before retrying.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://gist.github.com/harrah/4714661&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><category term="C++" /><category term="Deadlock" /><category term="Debug" /><summary type="html">Introduction When I was debugging a core dump issue discovered in ADS (Autonomous Driving System) testing, I found a very interesting error message in the log file: terminate called after throwing an instance of 'boost::interprocess::interprocess_exception' what(): Resource deadlock avoided</summary></entry><entry><title type="html">Set up network edge router via V2Ray</title><link href="/tools/2022/08/28/setup-vmess-edge/" rel="alternate" type="text/html" title="Set up network edge router via V2Ray" /><published>2022-08-28T00:00:00+00:00</published><updated>2022-08-28T00:00:00+00:00</updated><id>/tools/2022/08/28/setup-vmess-edge</id><content type="html" xml:base="/tools/2022/08/28/setup-vmess-edge/">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Hello! Long time no see! I have been heavily using an iOS app called “Quantumult X” (a.k.a. QX) these days, mainly for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Easy to setup and lots of tutorials/scripts online that you can add and learn&lt;/li&gt;
  &lt;li&gt;You can add VPN servers, add flexible routing rules e.g., SSID-based switching, and subscribe to public servers (not recommended out of privacy/security concerns)&lt;/li&gt;
  &lt;li&gt;You can do MITM rewrites that enable you to have premium features on other apps for free&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall I’m very happy with this app but I do find some limitations:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;The set of protocols supported by QX is limited. According to their &lt;a href=&quot;https://github.com/crossutility/Quantumult-X/blob/d30a160eb093b3be175ea5eeeff0648db50b2a20/sample.conf#L129&quot;&gt;sample.conf&lt;/a&gt;, it only supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shadowsocks&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmess&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trojan&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me I do have some proxy servers using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shadowsocks&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmess&lt;/code&gt;, but I also have other types up and running such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireguard&lt;/code&gt;. So natively there’s no way you can add a wireguard server to this list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server_local&lt;/code&gt; in QX.&lt;/p&gt;

&lt;p&gt;Besides that I have other good-to-have features that I wish I can use within a single app:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iOS only supports 1 VPN up and running and therefore if I connect to QX then my tailscale connection is down. This is okay but it would be great if I can access my services deployed within the tailscale subnet.&lt;/li&gt;
  &lt;li&gt;Even if this single app QX is capable to handle all the protocols, it is still limited to my mobile devices and I wish I can have some sort of routing done on the server side rather than on this app, so that if I switch to another app or a different platform then I can still have the same set of routing rules and servers. This is what I call the “network edge router” which is simply a VPS server that helps me route my traffic to different VPN servers.
    &lt;ul&gt;
      &lt;li&gt;The added benefit of this approach is that the VPS server is much more performant and flexible since it is a Linux machine so it can do much complicated things like multi-hop connections (e.g., device A -&amp;gt; Network Edge Router -&amp;gt; VPN@Server1 -&amp;gt; VPN@Server2), which will greatly improve your anonymity.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post I will share how I set up such a network edge router with the help of V2Ray. Specifically I’m deploying this service to my OCI Ampere machine (arm64). Check out my previous post about setting up an OCI instance if you are interested.&lt;/p&gt;

&lt;p&gt;Before we come to the v2ray server config itself, let’s add a few VPN servers that we will use later.&lt;/p&gt;

&lt;h2 id=&quot;set-up-a-cloudfare-warp-vpn-or-any-wireguard-server&quot;&gt;Set up a Cloudfare Warp+ VPN (or any wireguard server)&lt;/h2&gt;

&lt;p&gt;One thing great about &lt;a href=&quot;https://blog.cloudflare.com/1111-warp-better-vpn/&quot;&gt;Cloudfare Warp+&lt;/a&gt; is that you can convert it to a wireguard server with the help of &lt;a href=&quot;https://github.com/ViRb3/wgcf&quot;&gt;wgcf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The conversion steps are simple and straightforward, just follow their official README and you should be good to go. Below is my steps for my future reference&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/ViRb3/wgcf/releases/download/v2.2.15/wgcf_2.2.15_linux_arm64
&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; wgcf_2.2.15_linux_arm64 wgcf
./wgcf register &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;machine name&amp;gt;'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--accept-tos&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;WGCF_LICENSE_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your license key&amp;gt;&quot;&lt;/span&gt; ./wgcf update
./wgcf generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the above steps you should have a wireguard conf file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wgcf-profile.conf&lt;/code&gt; by default.&lt;/p&gt;

&lt;h3 id=&quot;use-wireguard-as-a-socks5-server&quot;&gt;Use wireguard as a socks5 server&lt;/h3&gt;

&lt;p&gt;We don’t want to directly use the generated wireguard config because it will route all our VPS traffic through Cloudfare. What we want is an application-based proxy. So here I will convert it into a socks5 proxy server by using a docker container. I know this is not the most efficient approach but this is simpler and easy to follow.&lt;/p&gt;

&lt;p&gt;First check out the content of the generated wireguard conf file in the previous step and &lt;strong&gt;remove all the IPv6 contents within this file&lt;/strong&gt; e.g., your wireguard IPv6 address, and the IPv6 CIDR in the AllowedIPs. This step is necesssary because our wireguard-socks5 docker container cannot process such rules.&lt;/p&gt;

&lt;p&gt;Clone &lt;a href=&quot;https://github.com/mcao2/wireguard-socks5&quot;&gt;this repo&lt;/a&gt; and build your own wireguard-socks5 image. Note that you may want to change the network interface &lt;a href=&quot;https://github.com/mcao2/wireguard-socks5/blob/7996c5cb0889467c37de6cfc1ed2e7d9a684f778/sockd.conf#L3&quot;&gt;here&lt;/a&gt; used in the container if you encounter any issues (e.g., change it to eth0). Note that after the change you should rebuild the docker image.&lt;/p&gt;

&lt;p&gt;Below is my steps:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:mcao2/wireguard-socks5.git
podman build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; wireguard-socks5:latest-arm &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# First run an interactive container to check if there's any errors&lt;/span&gt;
podman run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wireguard-socks-proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/net/tun &lt;span class=&quot;nt&quot;&gt;--cap-add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NET_ADMIN &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--publish&lt;/span&gt; 127.0.0.1:1080:1080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt; /my/dir/to/wireguard:/etc/wireguard:z &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  wireguard-socks5:latest-arm
&lt;span class=&quot;c&quot;&gt;# If you encounter network interface name resolution error then change it in https://github.com/mcao2/wireguard-socks5/blob/master/sockd.conf and rebuild the docker&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Now start our proxy server in detach mode&lt;/span&gt;
podman run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wireguard-socks-proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/net/tun &lt;span class=&quot;nt&quot;&gt;--cap-add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NET_ADMIN &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--publish&lt;/span&gt; 127.0.0.1:1080:1080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt; /my/dir/to/wireguard:/etc/wireguard:z &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  wireguard-socks5:latest-arm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By now you should have a socks5 server up and running in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1:1080&lt;/code&gt;, verify this by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl --proxy socks5h://127.0.0.1:1080 ipinfo.io&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;auto-start-container-on-restart&quot;&gt;Auto start container on restart&lt;/h3&gt;

&lt;p&gt;Podman provides command to generate a systemd unit file that you can enable for this purpose. Below is my steps to enable this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;su
setsebool &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; container_manage_cgroup on
&lt;span class=&quot;c&quot;&gt;# `--name` is the container name&lt;/span&gt;
podman generate systemd &lt;span class=&quot;nt&quot;&gt;--files&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wireguard-socks-proxy &lt;span class=&quot;nt&quot;&gt;--new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;container-wireguard-socks-proxy.service /etc/systemd/system/container-wireguard-socks-proxy.service
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;container-wireguard-socks-proxy.service
&lt;span class=&quot;c&quot;&gt;# Stop your existing container first&lt;/span&gt;
podman &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; wireguard-socks-proxy
&lt;span class=&quot;c&quot;&gt;# Start your new container via systemd&lt;/span&gt;
systemctl start container-wireguard-socks-proxy.service
&lt;span class=&quot;c&quot;&gt;# Check its static&lt;/span&gt;
systemctl status container-wireguard-socks-proxy.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;v2ray-rules&quot;&gt;V2Ray rules&lt;/h2&gt;

&lt;p&gt;Now is the fun part! Install the latest V2Ray service following &lt;a href=&quot;https://github.com/v2fly/fhs-install-v2ray&quot;&gt;their guides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Edit the config file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/etc/v2ray/config.json&lt;/code&gt; and add the following contents:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;loglevel&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;warning&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;access&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/v2ray/access.log&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/v2ray/error.log&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;inbounds&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;vmess-in&quot;&lt;/span&gt;,
      // CHANGE ME!
      &lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;: &amp;lt;YOUR_PORT_1&amp;gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;listen&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;vmess&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;clients&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; // An array &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;valid user accounts
          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            // CHANGE ME!
            &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR_UUID_1&amp;gt;&quot;&lt;/span&gt;, // User ID, &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the form of a UUID
            &lt;span class=&quot;s2&quot;&gt;&quot;alterId&quot;&lt;/span&gt;: 64, // Number of alternative IDs, which will be generated &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;a deterministic way
            &lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;: 0 // V2Ray will apply different policies based on user level
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;disableInsecureEncryption&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; // Forbids client &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;using insecure encryption methods
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;telegram-in&quot;&lt;/span&gt;,
      // CHANGE ME!
      &lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;: &amp;lt;YOUR_PORT_2&amp;gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;listen&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;mtproto&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;: 0,
            // CHANGE ME!
            &lt;span class=&quot;s2&quot;&gt;&quot;secret&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR_SECRET_2&amp;gt;&quot;&lt;/span&gt; // User secret. In Telegram, user secret must be 32 characters long, and only contains characters between 0 to 9, and ato f. You may use the following &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;to generate MTProto secret: &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;openssl rand &lt;span class=&quot;nt&quot;&gt;-hex&lt;/span&gt; 16&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;vmess-in-cloudfare&quot;&lt;/span&gt;,
      // CHANGE ME!
      &lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;: &amp;lt;YOUR_PORT_3&amp;gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;listen&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;vmess&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;clients&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            // CHANGE ME!
            &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR_UUID_3&amp;gt;&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;alterId&quot;&lt;/span&gt;: 64,
            &lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;: 0
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;disableInsecureEncryption&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;outbounds&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;default-out&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;freedom&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;telegram-out&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;mtproto&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;tailscale-out&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;freedom&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;cloudfare-out&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;socks&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;servers&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;address&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;: 1080
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;routing&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // Configuration &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;internal Routing strategy
    &lt;span class=&quot;s2&quot;&gt;&quot;domainStrategy&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;AsIs&quot;&lt;/span&gt;, // domain resolution strategy
    &lt;span class=&quot;s2&quot;&gt;&quot;rules&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; // &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;each inbound connection, v2ray tries these rules from top down one by one. If a rule takes effect, the connection will be routed to the &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;outboundTag&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; or &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;balanceTag&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; of the rule
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // Route traffic &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;mtproto&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; protocol
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;inboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;telegram-in&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;outboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;telegram-out&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // Route traffic &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;tailscale
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;ip&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;100.64.0.0/10&quot;&lt;/span&gt; // tailscale subnet
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;outboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;tailscale-out&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // Route vmess-in via default out
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;inboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;vmess-in&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;outboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;default-out&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // Route vmess-in-cloudfare via cloudfare wireguard interface
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;inboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;vmess-in-cloudfare&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;outboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;cloudfare-out&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The config file is self-explanatory and you definitely need to change all the fields marked with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;// CHANGE ME!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this config file I also added a mtproto server for my telegram client to use. You can choose not to add this and
safely remove all associated routing rules.&lt;/p&gt;

&lt;p&gt;That’s it! In your QX config add the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;vmess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;YOUR_VPS_IP&amp;gt;:&amp;lt;YOUR_PORT_1&amp;gt;, &lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;chacha20-poly1305, &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;YOUR_UUID_1&amp;gt;, fast-open&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, udp-relay&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vmess-ampere
&lt;span class=&quot;nv&quot;&gt;vmess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;YOUR_VPS_IP&amp;gt;:&amp;lt;YOUR_PORT_3&amp;gt;, &lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;chacha20-poly1305, &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;YOUR_UUID_3&amp;gt;, fast-open&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, udp-relay&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vmess-ampere-cloudfare
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><category term="Tools" /><category term="VPN" /><category term="V2Ray" /><category term="Network" /><category term="VMess" /><category term="WireGuard" /><category term="Mullvad" /><category term="Quantumult X" /><summary type="html">Motivation Hello! Long time no see! I have been heavily using an iOS app called “Quantumult X” (a.k.a. QX) these days, mainly for the following reasons: Easy to setup and lots of tutorials/scripts online that you can add and learn You can add VPN servers, add flexible routing rules e.g., SSID-based switching, and subscribe to public servers (not recommended out of privacy/security concerns) You can do MITM rewrites that enable you to have premium features on other apps for free Overall I’m very happy with this app but I do find some limitations:</summary></entry><entry><title type="html">Set up IKEv2 VPN on a Mikrotik Router</title><link href="/tools/2021/05/28/setup-mikrotik-ike2/" rel="alternate" type="text/html" title="Set up IKEv2 VPN on a Mikrotik Router" /><published>2021-05-28T00:00:00+00:00</published><updated>2021-05-28T00:00:00+00:00</updated><id>/tools/2021/05/28/setup-mikrotik-ike2</id><content type="html" xml:base="/tools/2021/05/28/setup-mikrotik-ike2/">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I got rid of my AT&amp;amp;T router a few days back and managed to have a Mikrotik router &lt;a href=&quot;https://mikrotik.com/product/hap_ac2&quot;&gt;hAP ac²&lt;/a&gt; as an alternative. One benefit of using a mikrotik router, specifically, its RouterOS, is the customizability to add cool features to my home network. I have very slow traffic when using the AT&amp;amp;T home network when visiting some websites, e.g., weibo, so I want to route them via a VPN running on oracle cloud.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Check out my previous post about setting up an OCI instance if you are interested.&lt;/p&gt;

&lt;h2 id=&quot;set-up-an-ipsec-vpn&quot;&gt;Set up an IPSec VPN&lt;/h2&gt;

&lt;p&gt;I usually use Tailscale for VPNs but seems mikrotik does not have it for now. So I found an IPSec VPN auto setup script to ease the burden. Please checkout &lt;a href=&quot;https://github.com/hwdsl2/setup-ipsec-vpn&quot;&gt;this repo&lt;/a&gt; for a detailed walkthrough.&lt;/p&gt;

&lt;p&gt;For Ubuntu &amp;amp; Debian, the one-liner script is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  wget https://git.io/vpnsetup &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; vpn.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh vpn.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ikev2.sh &lt;span class=&quot;nt&quot;&gt;--auto&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;set-up-an-ikev2-client-on-the-mikrotik-router&quot;&gt;Set up an IKEv2 client on the Mikrotik router&lt;/h2&gt;

&lt;p&gt;You can find some tutorials on setting up a NordVPN on a RouterOS, like &lt;a href=&quot;https://wiki.mikrotik.com/wiki/IKEv2_EAP_between_NordVPN_and_RouterOS&quot;&gt;this one&lt;/a&gt; and most of the steps are similar to what we need to do.&lt;/p&gt;

&lt;h3 id=&quot;step-0-import-your-p12-file&quot;&gt;Step 0: Import your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.p12&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.p12&lt;/code&gt; file acts like the all-in-one cert and is usually encrypted with a passphrase. You can find it in the output of the previous step when you setting up the VPN server.&lt;/p&gt;

&lt;p&gt;Upload your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.p12&lt;/code&gt; file to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Files&lt;/code&gt; of the mikrotik router. You can verify the file is accessible by using the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /file print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you will find something like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# NAME                                       TYPE                                            SIZE CREATION-TIME&lt;/span&gt;
  0 vpnclient.p12                              .p12 file                                       4425 may/27/2021 22:00:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next import this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.p12&lt;/code&gt; file via:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /certificate import file-name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vpnclient.p12 &lt;span class=&quot;nv&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YOUR_PASSPHRASE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember to substitute your passphrase in the above command. And you probably need to run this command twice until you see the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private-keys-imported&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;certificates&lt;/code&gt; tab of the web portal, check the one with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KT&lt;/code&gt; marker, note it down and it will be the one we will use in the next steps.&lt;/p&gt;

&lt;h3 id=&quot;step-1-set-up-the-ikev2-client-&quot;&gt;Step 1: Set up the IKEv2 client &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Create a separate Phase 1 profile and Phase 2 proposal configurations to not interfere with any existing IPsec configuration:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec profile
  add &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn
  /ip ipsec proposal
  add &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn pfs-group&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a new policy group and template to separate this configuration from any other IPsec configuration:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec policy group
  add &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn
  /ip ipsec policy
  add &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;proposal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes &lt;/span&gt;dst-address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0/0 src-address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a new mode config entry with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responder=no&lt;/code&gt; that will request configuration parameters from the server:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec mode-config
  add &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;responder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create peer and identity configurations, remember to substitute yoru server IP and the correct certificate filename in the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec peer
  add &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;123.123.123.123/32 exchange-mode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2 &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn

  /ip ipsec identity
  &lt;span class=&quot;c&quot;&gt;# vpnclient.p12_1 is the one with `KT` marker on it&lt;/span&gt;
  add auth-method&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;digital-signature &lt;span class=&quot;nv&quot;&gt;certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vpnclient.p12_1 generate-policy&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;port-strict mode-config&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;peer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn policy-template-group&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify that the connection is successfully established:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec
  active-peers print
  installed-sa print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see an established connection to your VPN server.&lt;/p&gt;

&lt;h3 id=&quot;step-2-prepare-the-list-of-ips-to-be-sent-over-the-tunnel&quot;&gt;Step 2: Prepare the list of IPs to be sent over the tunnel&lt;/h3&gt;

&lt;p&gt;Grab some existing IP-list and wrangle it to fit RouterOS. The following command will get a list of China IP ranges &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, add them to a list named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNIP&lt;/code&gt;, and prepare them so that they can be easily imported to the mikrotik router.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt |sed &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^/add address=/g'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/$/ list=CNIP/g'&lt;/span&gt;|sed &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;$'1i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/ip firewall address-list'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;$'1i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;remove [/ip firewall address-list find list=CNIP]'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;cnip.rsc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now same trick: upload this file to the router, and import it via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/import cnip.rsc&lt;/code&gt;. Note that this list is huge and it may take a while to ingest it.&lt;/p&gt;

&lt;h3 id=&quot;step-3-tag-traffic-that-match-the-list-in-mangle-firewall&quot;&gt;Step 3: Tag traffic that match the list in &lt;a href=&quot;https://wiki.mikrotik.com/wiki/Manual:IP/Firewall/Mangle&quot;&gt;Mangle Firewall&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Set the connection-mark under your mode config configuration:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec mode-config
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; find &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; connection-mark&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When it is done, a NAT rule is generated with the dynamic address provided by the server:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;admin@MikroTik] /ip firewall mangle&amp;gt; /ip firewall nat print
  Flags: X - disabled, I - invalid, D - dynamic
   0  D &lt;span class=&quot;p&quot;&gt;;;;&lt;/span&gt; ipsec mode-config
        &lt;span class=&quot;nv&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;srcnat &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src-nat to-addresses&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.43.10 connection-mark&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apply connection-mark to traffic matching the created address list:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip firewall mangle
  add &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mark-connection &lt;span class=&quot;nv&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;prerouting dst-address-list&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CNIP new-connection-mark&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;passthrough&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mikrotik_ikev2/mikrotik-after-setup-ike2-mangled-traffic.png&quot; alt=&quot;Marked traffic that match the address list&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://wiki.mikrotik.com/wiki/Manual:IP/IPsec#RouterOS_client_configuration &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.willnet.net/index.php/archives/369/ &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><category term="Tools" /><category term="Cloud" /><category term="Mikrotik" /><category term="Network" /><summary type="html">Motivation I got rid of my AT&amp;amp;T router a few days back and managed to have a Mikrotik router hAP ac² as an alternative. One benefit of using a mikrotik router, specifically, its RouterOS, is the customizability to add cool features to my home network. I have very slow traffic when using the AT&amp;amp;T home network when visiting some websites, e.g., weibo, so I want to route them via a VPN running on oracle cloud.</summary></entry><entry><title type="html">Notes on OCI (Oracle Cloud Infrastructure)</title><link href="/infrastructure/2021/05/23/notes-on-oci-usage/" rel="alternate" type="text/html" title="Notes on OCI (Oracle Cloud Infrastructure)" /><published>2021-05-23T00:00:00+00:00</published><updated>2021-05-23T00:00:00+00:00</updated><id>/infrastructure/2021/05/23/notes-on-oci-usage</id><content type="html" xml:base="/infrastructure/2021/05/23/notes-on-oci-usage/">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Some of my services are too light that I don’t want to run them endlessly on my beefy home server. One reason is that I want better availability and clearly it’s hard (a better word probably is expensive) to achieve that in my current set up. So I decided to go for the Cloud, after all… I was a cloud TA!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I chose OCI because they offer two always-free machines and it seems they are serious about this offer. So I migrated several of my services to OCI instances. This post is a summary of the quirks that I want to note down for future reference.&lt;/p&gt;

&lt;h2 id=&quot;firewall&quot;&gt;Firewall&lt;/h2&gt;

&lt;p&gt;I don’t know why they make it so hard to achieve the same effect as AWS security groups… But anyway, here’s what I need to do to reach my service via the public Internet.&lt;/p&gt;

&lt;h3 id=&quot;set-up-vpc-rules-through-the-portal&quot;&gt;Set up VPC rules through the portal&lt;/h3&gt;

&lt;p&gt;In the instance detail page, click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Attached VNICs&lt;/code&gt; under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resources&lt;/code&gt; tab. Then find the subnet of VLAN that this instance is attached with. You will be directed to the subnet detail page, where you can find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Security Lists&lt;/code&gt;, and that is our target (the equivalent of AWS security group). Then you can add/remove any rules you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/oci/oci-security-list-under-vcn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;set-up-iptable-rules-via-command-line&quot;&gt;Set up iptable rules via command line&lt;/h3&gt;

&lt;p&gt;This iptable thing actually confuses me a lot. I don’t know why they enforce iptable rules together with the security list set up.&lt;/p&gt;

&lt;p&gt;SSH into the instance and run the following commands. These commands are taken from &lt;a href=&quot;https://stackoverflow.com/questions/54794217/opening-port-80-on-oracle-cloud-infrastructure-compute-node&quot;&gt;this SO post&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables-save &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/iptables-rules &lt;span class=&quot;c&quot;&gt;# backup&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; INPUT ACCEPT &lt;span class=&quot;c&quot;&gt;# the following commands effectively disable iptables by allowing all traffic&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; OUTPUT ACCEPT
  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; FORWARD ACCEPT
  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><category term="Infrastructure" /><category term="Cloud" /><category term="Notes" /><summary type="html">Motivation Some of my services are too light that I don’t want to run them endlessly on my beefy home server. One reason is that I want better availability and clearly it’s hard (a better word probably is expensive) to achieve that in my current set up. So I decided to go for the Cloud, after all… I was a cloud TA!</summary></entry><entry><title type="html">MLOps</title><link href="/notes/2020/08/28/mlops/" rel="alternate" type="text/html" title="MLOps" /><published>2020-08-28T00:00:00+00:00</published><updated>2020-08-28T00:00:00+00:00</updated><id>/notes/2020/08/28/mlops</id><content type="html" xml:base="/notes/2020/08/28/mlops/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;MLOps is an ML engineering culture and practice that aims at unifying ML system development (Dev) and ML system operations (Ops).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;MLOps is the natural progression of DevOps in the context of AI… and emphasizes consistent and smooth development of models and their scalability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simple words, MLOps refers to applying DevOps principles to ML systems.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Practicing MLOps means advocating &lt;strong&gt;automation&lt;/strong&gt; and &lt;strong&gt;monitoring&lt;/strong&gt; at all steps (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;integration&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;releasing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deployment&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;infra mngt&lt;/code&gt;, etc.) of ML system construction.&lt;/p&gt;

&lt;p&gt;The goal of MLOps is to build an integrated ML system that can continuously operate in production. As summarized by Google, only a small fraction of a real-world ML system is composed of the actual ML code, and the required surrounding elements are vast and complex, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-1-elements-of-ml.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mlops-concepts&quot;&gt;MLOps concepts&lt;/h2&gt;

&lt;h3 id=&quot;cicdct&quot;&gt;CI/CD/CT&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CI: &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;Continuous Integration&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;CI in ML no longer only about testing and validating code and components, but also testing and validating &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;data schemas&lt;/strong&gt;, and &lt;strong&gt;models&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CD: &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;Continuous Delivery&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;CD in ML no longer only about a single software package or a service, but &lt;strong&gt;a system/pipeline&lt;/strong&gt; that should automatically deploy another service e.g. model prediction service&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CT: Continuous Training
    &lt;ul&gt;
      &lt;li&gt;CT is a new property that is concerned with automatically retraining and serving the models (with new/updated data or data stream)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Consider the typical steps for training and evaluating an ML model to serve as a prediction service.&lt;/p&gt;

&lt;p&gt;After defined the use cases and established the success criteria, the process of delivering an ML model to production involves:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Data extraction: get relevant data from various sources for the ML task.&lt;/li&gt;
  &lt;li&gt;Data analysis: perform EDA to understand the extracted data (e.g. schema, characteristics) and identify the data preparation and feature engineering that are needed.&lt;/li&gt;
  &lt;li&gt;Data preparation/preprocessing: preprocess/clean the extracted data. Typically involves split the data into training/validating/test sets, data transformations, feature engineering. The output are the &lt;em&gt;data splits&lt;/em&gt; in the prepared format.&lt;/li&gt;
  &lt;li&gt;Model training: ML researchers implement algorithms to train various models, perform hyper-parameter tuning, etc. The output is a trained ML model.&lt;/li&gt;
  &lt;li&gt;Model evaluation: evaluate the trained model quality on a holdout test set. The output is a set of metrics that assess the model quality.&lt;/li&gt;
  &lt;li&gt;Model validation: confirm that the model is adequate for deployment. In our case this means confirm that its predictive performance is better than a certain baseline.&lt;/li&gt;
  &lt;li&gt;Model serving: deploy the validated model to a target environment (e.g. as micro services in a k8s cluster, as an embedded model in an edge device, or as part of a batch prediction system) to serve predictions.&lt;/li&gt;
  &lt;li&gt;Model monitoring: monitor the deployed model’s prediction performance and trigger new iteration in the system&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above steps can be completed &lt;strong&gt;manually&lt;/strong&gt; by a single team or splitter across different teams (e.g. algorithm team, operation team, etc.), or it can be done by an &lt;strong&gt;automatic pipeline&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We want to bring automation to the process so that we can benefit from shortened development cycles, increased deployment velocity, and dependable releases, etc.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;level of automation&lt;/strong&gt; of these steps defines the &lt;em&gt;maturity&lt;/em&gt; of the ML process and reflects the &lt;em&gt;velocity&lt;/em&gt; of model iterations (e.g. triggered by new data or new implementations).&lt;/p&gt;

&lt;h2 id=&quot;mlops-automation-levels&quot;&gt;MLOps automation levels&lt;/h2&gt;

&lt;h3 id=&quot;level-0-manual-labor&quot;&gt;Level 0: manual labor&lt;/h3&gt;

&lt;p&gt;The below picture shows the typical workflow of this level.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-2-manual-ml.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Characteristics:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Manual, script-driven, and interactive process&lt;/li&gt;
  &lt;li&gt;Disconnected b/w ML and operations&lt;/li&gt;
  &lt;li&gt;Infrequent release iterations&lt;/li&gt;
  &lt;li&gt;No CI/CD&lt;/li&gt;
  &lt;li&gt;Deployment is a single service (e.g. prediction) rather than the entire ML system&lt;/li&gt;
  &lt;li&gt;No active performance monitoring&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This approach may be sufficient when models are rarely changed/re-trained. But real-world environment is full of dynamics and models that fail to quickly adapt to changes may decrease in value rapidly.&lt;/p&gt;

&lt;h3 id=&quot;level-1-ml-pipeline-automation&quot;&gt;Level 1: ML pipeline automation&lt;/h3&gt;

&lt;p&gt;The goal of this level is to enable &lt;strong&gt;continuous training&lt;/strong&gt; of the model by automating the ML pipeline, and thus achieve &lt;strong&gt;continuous delivery&lt;/strong&gt; of model prediction service for users.&lt;/p&gt;

&lt;p&gt;This level of automation typically involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Automated data validation&lt;/li&gt;
  &lt;li&gt;Automated model validation&lt;/li&gt;
  &lt;li&gt;Pipeline triggers for another iteration&lt;/li&gt;
  &lt;li&gt;Metadata management (explained later)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following figure is a schematic representation of an automated ML pipeline for CT.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-3-ml-automation-ct.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Characteristics:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rapid experiment&lt;/li&gt;
  &lt;li&gt;CT of the model in production with fresh data based on live triggers&lt;/li&gt;
  &lt;li&gt;Experimental-Operational symmetry (as seen in the above diagram)&lt;/li&gt;
  &lt;li&gt;Modularized code for components and pipelines&lt;/li&gt;
  &lt;li&gt;CD of models (and thus predictive services)&lt;/li&gt;
  &lt;li&gt;Deployment is a ML pipeline rather than only a prediction service&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;transition-from-level-0-to-level-1&quot;&gt;Transition from level 0 to level 1&lt;/h4&gt;

&lt;p&gt;To transition to level 1, we need to add new components to the architecture:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Automated data and model validation&lt;/li&gt;
  &lt;li&gt;Optional feature store: a centralized repo where we standardize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;definition&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storage&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access&lt;/code&gt; of features for training and serving. This is the data source for experimentation, CT, and online serving.&lt;/li&gt;
  &lt;li&gt;Metadata management: we record information about each execution of the pipeline in order to help with &lt;strong&gt;data and artifacts lineage&lt;/strong&gt;, &lt;strong&gt;reproducibility&lt;/strong&gt;, &lt;strong&gt;comparisons&lt;/strong&gt;, &lt;strong&gt;debugging&lt;/strong&gt;, &lt;strong&gt;anomaly detection&lt;/strong&gt;, etc. Metadata can include:
    &lt;ul&gt;
      &lt;li&gt;versioning: of pipeline, or of individual components in the pipeline&lt;/li&gt;
      &lt;li&gt;timing: start/end date, duration time, etc.&lt;/li&gt;
      &lt;li&gt;pipeline executor(s)&lt;/li&gt;
      &lt;li&gt;parameter args&lt;/li&gt;
      &lt;li&gt;pointer to artifacts produced by each pipeline step (e.g. location of prepared data, computed statistics, etc.)&lt;/li&gt;
      &lt;li&gt;pointer to previous trained model (this enables model roll-back)&lt;/li&gt;
      &lt;li&gt;model evaluation metrics (can be thought of as part of the produced pipeline artifacts), which enable model comparison and benchmarking&lt;/li&gt;
      &lt;li&gt;etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pipeline triggers: e.g. on-data-availability, on-demand, on-schedule, on-model-perf-degradation, on-data-drift, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach is sufficient if new pipeline implementations are rare deployed and only a few pipelines are managed.&lt;/p&gt;

&lt;p&gt;The pipeline and its components are usually &lt;strong&gt;manually tested and deployed&lt;/strong&gt;. This is not a good solution if you want to deploy new models based on &lt;strong&gt;new ML ideas&lt;/strong&gt; since manual labor still involved to deploy the pipeline itself, or you are managing many ML pipelines in production.&lt;/p&gt;

&lt;p&gt;You need a CI/CD setup to automate the &lt;strong&gt;build/test/deployment of ML pipelines&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;level-2-cicd-pipeline-automation&quot;&gt;Level 2: CI/CD pipeline automation&lt;/h3&gt;

&lt;p&gt;A robust automated CI/CD system allows data scientists rapidly explore new ML ideas around &lt;strong&gt;feature engineering&lt;/strong&gt;, &lt;strong&gt;model architecture&lt;/strong&gt;, &lt;strong&gt;hyper-parameters&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;p&gt;Data scientists can implement new ideas and the &lt;strong&gt;new pipeline&lt;/strong&gt; will be automatically built, tested, and deployed to the target environment.&lt;/p&gt;

&lt;p&gt;We can see the updated diagram with CI/CD added for the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-4-ml-automation-ci-cd.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This level typically involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Source control&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test and build services&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deployment services&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Model registry&lt;/li&gt;
  &lt;li&gt;Feature store&lt;/li&gt;
  &lt;li&gt;Metadata management&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pipeline orchestrator&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Characteristics:&lt;/p&gt;

&lt;p&gt;Stages for CI/CD automation pipeline:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-5-stages.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Manual labors cannot be eliminated for the data analysis and model analysis steps.&lt;/p&gt;

&lt;h4 id=&quot;ci&quot;&gt;CI&lt;/h4&gt;

&lt;p&gt;The pipeline and its components are built, tested, and packaged when new code is committed or pushed to the VCS.&lt;/p&gt;

&lt;p&gt;E.g. unit testing for the feature engineering logic, for different implemented methods; testing that the model training converges; testing that each component in the pipeline produces the expected artifacts, etc.&lt;/p&gt;

&lt;h4 id=&quot;cd&quot;&gt;CD&lt;/h4&gt;

&lt;p&gt;The new pipeline implementation is continuously deployed to the target environment, and in turn delivers new/updated prediction services.&lt;/p&gt;

&lt;p&gt;Rapid and reliable pipeline delivery usually involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;verification of the model compatibility with the target infrastructure before deployment actually happens&lt;/li&gt;
  &lt;li&gt;test the prediction service with expected inputs and make sure you get expected response within the expected time&lt;/li&gt;
  &lt;li&gt;test the service performance e.g. QPS, latency, etc.&lt;/li&gt;
  &lt;li&gt;automated deployment to a test environment&lt;/li&gt;
  &lt;li&gt;semi-automated deployment to a pre-production environment&lt;/li&gt;
  &lt;li&gt;manual deployment to a production environment after several successful runs of the pipeline on the pre-production environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following diagram shows the relationship b/w the CI/CD pipeline and the CT pipeline in a ML system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/architecture-for-mlops-using-tfx-kubeflow-pipelines-and-cloud-build-1-ci-cd-ct-pipelines.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Given new model implementation (e.g. new ML ideas/architecture), a successful CI/CD pipeline deploys a new CT pipeline.&lt;/p&gt;

&lt;p&gt;Given new data, a successful CT pipeline should serve a new model prediction service.&lt;/p&gt;

&lt;h4 id=&quot;example-architecture-for-mlops-using-tfx-kubeflow-pipelines-and-cloud-build&quot;&gt;Example: Architecture for MLOps using TFX, Kubeflow Pipelines, and Cloud Build&lt;/h4&gt;

&lt;p&gt;TFX stands for “TensorFlow Extended” and is an integrated ML platform for developing and deploying production ML systems.&lt;/p&gt;

&lt;p&gt;A TFX pipeline is a sequence of components that implement an ML system (modeling, training, validation, serving inference, deployment management, etc.).&lt;/p&gt;

&lt;p&gt;Key libraries of TFX including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TFT (TensorFlow Transform): data preparation, feature engineering tasks&lt;/li&gt;
  &lt;li&gt;TFDV (TensorFlow Data Validation): data anomaly detection&lt;/li&gt;
  &lt;li&gt;TensorFlow Estimators and Keras: model building and training&lt;/li&gt;
  &lt;li&gt;TFMA (TensorFlow Model Analysis): model evaluation and analysis&lt;/li&gt;
  &lt;li&gt;TFServing (TensorFlow Serving): serve model in the target environment (e.g. as REST and gRPC APIs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following diagram shows the architecture of an integrated ML system built from the various TFX libraries (i.e. &lt;em&gt;the design of a TFX-based integrated ML system&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/architecture-for-mlops-using-tfx-kubeflow-pipelines-and-cloud-build-2-tfx-libraries.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the designed architecture, the next question is &lt;em&gt;how to run each component of the system at scale&lt;/em&gt;. Commercial cloud platforms like GCP can help us run the system at scale in a reliable fashion with managed cloud services (e.g. cloud storage, AI hub, dataflow).&lt;/p&gt;

&lt;p&gt;With the individual components mapped to a managed service in the cloud platform, the next question is &lt;em&gt;how to connect these two pieces together and automate the entire pipeline&lt;/em&gt;. An &lt;strong&gt;orchestrator&lt;/strong&gt; performs such tasks and glues our high-level architecture and the underlying individual components. It’s useful for both dev and production phases as it facilitates automation and reduces manual labors.&lt;/p&gt;

&lt;p&gt;The orchestrator runs the pipeline in sequence and automatically move forward based on the defined conditions (e.g. execute the model serving step after model evaluation finished and the metrics meet predefined thresholds).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubeflow&lt;/strong&gt; is the &lt;em&gt;ML Toolkit for Kubernetes&lt;/em&gt;. &lt;strong&gt;Kubeflow Pipeline&lt;/strong&gt; is a Kubeflow service that lets you compose, orchestrate, and automate ML systems, where each component of the system can run on various infrastructures (e.g. GCP, local, etc.). Sounds familiar? Yes! It is an orchestrator that we want.&lt;/p&gt;

&lt;p&gt;A Kubeflow pipeline involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A set of containerized tasks/components packed as a docker image. These components can execute any data-related and compute-related services, e.g. &lt;strong&gt;Dataproc&lt;/strong&gt; for SparkML jobs, &lt;strong&gt;AutoML&lt;/strong&gt;, etc.&lt;/li&gt;
  &lt;li&gt;A sequence of tasks defined by a Python DSL, i.e. the topology of the workflow&lt;/li&gt;
  &lt;li&gt;A set of pipeline input parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/architecture-for-mlops-using-tfx-kubeflow-pipelines-and-cloud-build-6-ci-cd-kubeflow.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above diagram shows a high-level overview of integrating CI/CD with Kubeflow pipelines in GCP. At the heart of this architecture is Cloud Build, a managed service that executes your builds on GCP. Essentially, the cloud build process performs the required CI/CD for our integrated ML system.&lt;/p&gt;

&lt;p&gt;The build can be triggered manually or through automated build triggers.&lt;/p&gt;

&lt;p&gt;For a comprehensive Cloud Build example that covers most of these steps, see &lt;a href=&quot;https://github.com/ksalama/kubeflow-examples/tree/master/kfp-cloudbuild&quot;&gt;A Simple CI/CD Example with Kubeflow Pipelines and Cloud Build&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/solutions/machine-learning/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning&quot;&gt;MLOps: Continuous delivery and automation pipelines in machine learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.forbes.com/sites/tomtaulli/2020/08/01/mlops-what-you-need-to-know/#3bd1c4241214&quot;&gt;MLOps: What You Need To Know&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/solutions/machine-learning/architecture-for-mlops-using-tfx-kubeflow-pipelines-and-cloud-build&quot;&gt;Architecture for MLOps using TFX, Kubeflow Pipelines, and Cloud Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><category term="Notes" /><category term="Machine Learning" /><summary type="html">Introduction MLOps is an ML engineering culture and practice that aims at unifying ML system development (Dev) and ML system operations (Ops). MLOps is the natural progression of DevOps in the context of AI… and emphasizes consistent and smooth development of models and their scalability. In simple words, MLOps refers to applying DevOps principles to ML systems.</summary></entry><entry><title type="html">Private Docker Registry</title><link href="/infrastructure/2020/08/28/private-docker-registry/" rel="alternate" type="text/html" title="Private Docker Registry" /><published>2020-08-28T00:00:00+00:00</published><updated>2020-08-28T00:00:00+00:00</updated><id>/infrastructure/2020/08/28/private-docker-registry</id><content type="html" xml:base="/infrastructure/2020/08/28/private-docker-registry/">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I have been using docker containers for a while and quite amazed by its simplicity and power. Someday in the previous week when I was migrating/re-deploying my pleroma instance from my SurfaceGo ubuntu machine to my home lab, I found I need more private repos on docker hub. Docker hub by default only provides 1 private repo for normal users, which is clearly not what I want. So I decided to build my own docker registry and deploy it as a service in my home lab machine.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;My set up is:&lt;/p&gt;

&lt;p&gt;Run a front-facing machine with a public IPv4 address, and add a DNS A record (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry.mxcao.me&lt;/code&gt;) to point to this address. The front-facing machine will route all valid traffic to the registry container running in my Rancher cluster.&lt;/p&gt;

&lt;p&gt;Since my home lab do not have a public IPv4 address dedicated for such purpose, I use a DigitalOcean instance to serve the purpose, along with my pleroma service routing (feel free to play around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pleroma.mxcao.me&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To be able to route my traffic to the registry container, I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WireGuard&lt;/code&gt; to connect these two services. Definitely check out my previous post about setting up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WireGuard&lt;/code&gt; if you are interested.&lt;/p&gt;

&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;

&lt;p&gt;Check you have the following items ready:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your own domain so that it can be reached from the public Internet&lt;/li&gt;
  &lt;li&gt;A front-facing machine with
    &lt;ul&gt;
      &lt;li&gt;a public IPv4 address (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.3.4&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;nginx&lt;/li&gt;
      &lt;li&gt;WireGuard&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Docker (or Rancher alike) installed on the home lab to host our registry service&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;h3 id=&quot;set-up-dns-record&quot;&gt;Set up DNS record&lt;/h3&gt;

&lt;p&gt;I want my registry service accessible from anywhere with a memorizable address and therefore I need to set up a A record to point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pleroma.mxcao.me&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.3.4&lt;/code&gt;. You can omit this step if you can accept the inconvenience of accessing your registry via IP addresses.&lt;/p&gt;

&lt;h3 id=&quot;prepare-wireguard-for-the-service&quot;&gt;Prepare WireGuard for the service&lt;/h3&gt;

&lt;p&gt;As mentioned, I decided to use WireGuard to achieve point-to-point communication between my DO machine and the container. This set up involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Generate private/public key-pairs for the registry service container to use&lt;/li&gt;
  &lt;li&gt;Add a peer in the DO WireGuard configuration&lt;/li&gt;
  &lt;li&gt;Set up WireGuard in the registry host (note here we use port forwarding to map registry service’s listening port to the node running it, therefore I can simply set up WireGuard in the node)
    &lt;ul&gt;
      &lt;li&gt;For my particular case, I built and deployed the WireGuard module to RancherOS following &lt;a href=&quot;https://vitobotta.com/2019/07/17/kubernetes-wireguard-vpn-rancheros/&quot;&gt;this great guide&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;I did not follow all steps in this guide, and you should decide if having the WireGuard on the host is enough.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s assume you configured the WireGuard client with IPv4 address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.9.60.5&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;prepare-nginx-for-traffic-routing&quot;&gt;Prepare NGINX for traffic routing&lt;/h3&gt;

&lt;p&gt;I decided to implement basic authentication for my private registry in a reverse proxy that sits in front of the registry. This is simpler than configure the native basic auth registry feature I think, please correct me if I’m wrong.&lt;/p&gt;

&lt;p&gt;I use simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htpasswd&lt;/code&gt; file as an example, but as mentioned in &lt;a href=&quot;https://docs.docker.com/registry/recipes/nginx/&quot;&gt;their documentation&lt;/a&gt;, any other nginx authentication backend should be fairly easy to implement.&lt;/p&gt;

&lt;p&gt;Let’s obtain a certificate for the subdomain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry.mxcao.me&lt;/code&gt; via Let’s Encrypt:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure your nginx service is not running&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setup your SSL cert, using your method of choice or certbot. If using certbot, first install it:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;certbot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Then set it up:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/lib/letsencrypt/
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;certbot certonly &lt;span class=&quot;nt&quot;&gt;--email&lt;/span&gt; &amp;lt;your@emailaddress&amp;gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; registry.mxcao.me &lt;span class=&quot;nt&quot;&gt;--standalone&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If successful, you should have your certificate and chain files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/letsencrypt/live/registry.mxcao.me&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In your nginx configuration folder (it can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conf.d&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sites-available&lt;/code&gt;), add below routing rules.&lt;/p&gt;

&lt;p&gt;Remember to change the docker-registry IP address and the certificate file path to suit your needs.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream docker-registry &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  server 10.9.60.5:5000&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## Set a variable to help us decide if we need to add the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## 'Docker-Distribution-Api-Version' header.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## The registry always sets this header.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## In the case of nginx performing auth, the header is unset&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## since nginx is auth-ing before proxying.&lt;/span&gt;
map &lt;span class=&quot;nv&quot;&gt;$upstream_http_docker_distribution_api_version&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$docker_distribution_api_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'registry/2.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  listen 80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  server_name registry.mxcao.me&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;301 https://&lt;span class=&quot;nv&quot;&gt;$server_name$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  server_name registry.mxcao.me&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  listen 443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# SSL&lt;/span&gt;
  ssl_certificate /etc/letsencrypt/live/registry.mxcao.me/fullchain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_certificate_key /etc/letsencrypt/live/registry.mxcao.me/privkey.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html&lt;/span&gt;
  ssl_protocols TLSv1.1 TLSv1.2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_ciphers &lt;span class=&quot;s1&quot;&gt;'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_prefer_server_ciphers on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_session_cache shared:SSL:10m&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# disable any limits to avoid HTTP 413 for large image uploads&lt;/span&gt;
  client_max_body_size 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)&lt;/span&gt;
  chunked_transfer_encoding on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  location /v2/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Do not allow connections from docker 1.5 and earlier&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# docker pre-1.6.0 did not properly set the user agent on ping, catch &quot;Go *&quot; user agents&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$http_user_agent&lt;/span&gt; ~ &lt;span class=&quot;s2&quot;&gt;&quot;^(docker&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(3|4|5(?!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0-9]-dev))|Go ).*$&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;404&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# To add basic authentication to v2 use auth_basic setting.&lt;/span&gt;
    auth_basic &lt;span class=&quot;s2&quot;&gt;&quot;Registry realm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    auth_basic_user_file /etc/nginx/registry_auth/nginx.htpasswd&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;## If $docker_distribution_api_version is empty, the header is not added.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;## See the map directive above where this variable is defined.&lt;/span&gt;
    add_header &lt;span class=&quot;s1&quot;&gt;'Docker-Distribution-Api-Version'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$docker_distribution_api_version&lt;/span&gt; always&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    proxy_pass http://docker-registry&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# required for docker client's sake&lt;/span&gt;
    proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# pass on real client's IP&lt;/span&gt;
    proxy_set_header X-Real-IP &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_set_header X-Forwarded-Proto &lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_read_timeout 900&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see in the above configuration, we need to put the password file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx.htpasswd&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/nginx/registry_auth&lt;/code&gt;, create this folder if not already exist.&lt;/p&gt;

&lt;p&gt;For some reason, I can’t make it work following the documentation to generate the password file. Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run --rm --entrypoint htpasswd registry:2 -Bbn testuser testpassword &amp;gt; nginx.htpasswd&lt;/code&gt; simply not gonna work for nginx to authenticate properly.&lt;/p&gt;

&lt;p&gt;A work-around is posted &lt;a href=&quot;https://github.com/nginx-proxy/nginx-proxy/issues/643#issuecomment-612912033&quot;&gt;here&lt;/a&gt;, and to summarize you can run the following commands to populate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx.htpasswd&lt;/code&gt; password file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo -n 'testuser:' &amp;gt;&amp;gt; nginx.htpasswd&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This command will prompt you to enter the pwd&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl passwd -apr1 &amp;gt;&amp;gt; nginx.htpasswd&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far so good! Start your nginx service and now we are ready to spawn the actual registry service.&lt;/p&gt;

&lt;h3 id=&quot;set-up-registry-service&quot;&gt;Set up registry service&lt;/h3&gt;

&lt;p&gt;This is my particular set up case and you can easily port to the docker commands to serve the registry.&lt;/p&gt;

&lt;p&gt;In my rancher cluster, I added another workload with the following tweaks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Port mapping from container’s 5000/tcp to host’s 5000/tcp&lt;/li&gt;
  &lt;li&gt;Env variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REGISTRY_STORAGE_DELETE_ENABLED&lt;/code&gt; set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; to enable image deletion&lt;/li&gt;
  &lt;li&gt;Mount a volume from the host to the container’s path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/registry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Done! Now you can test your private registry set up by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker login -u=testuser -p=testpwd registry.mxcao.me&lt;/code&gt; in your own machine. The expected output should be:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WARNING! Using &lt;span class=&quot;nt&quot;&gt;--password&lt;/span&gt; via the CLI is insecure. Use &lt;span class=&quot;nt&quot;&gt;--password-stdin&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Login Succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! And you can now push unlimited number of repos/images to your own, private registry. Enjoy.&lt;/p&gt;</content><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><category term="Infrastructure" /><category term="Docker" /><category term="Privacy" /><summary type="html">Motivation I have been using docker containers for a while and quite amazed by its simplicity and power. Someday in the previous week when I was migrating/re-deploying my pleroma instance from my SurfaceGo ubuntu machine to my home lab, I found I need more private repos on docker hub. Docker hub by default only provides 1 private repo for normal users, which is clearly not what I want. So I decided to build my own docker registry and deploy it as a service in my home lab machine.</summary></entry><entry><title type="html">Use Travis CI for Jekyll site generation</title><link href="/notes/2020/08/19/jekyll-travis/" rel="alternate" type="text/html" title="Use Travis CI for Jekyll site generation" /><published>2020-08-19T00:00:00+00:00</published><updated>2020-08-19T00:00:00+00:00</updated><id>/notes/2020/08/19/jekyll-travis</id><content type="html" xml:base="/notes/2020/08/19/jekyll-travis/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I have been using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; for my homepage site generation for months and I’m happy with it. Usually my workflow for posting a new page involves:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;Create the source file (.md files)&lt;/li&gt;
  &lt;li&gt;Commit the changes&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve -w &lt;/code&gt; to view the post in my local computer&lt;/li&gt;
  &lt;li&gt;If satisfied, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JEKYLL_ENV=production bundle exec jekyll build &lt;/code&gt; to generate the public content&lt;/li&gt;
  &lt;li&gt;Copy the public content to another folder used for publication&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;automation-with-bash-script&quot;&gt;Automation with bash script&lt;/h2&gt;

&lt;p&gt;You can see this is a lot! And posting a trivial page like a short intro or recommendation takes non-trivial time. Later I wrote a bash script that help me handle most of the steps so that I can focus on the content rather than the infra-side things.&lt;/p&gt;

&lt;p&gt;This solution works pretty well and I stick to it for a while. But… It’s just ugly and I finally decided to bring modern CI tools into the play.&lt;/p&gt;

&lt;h2 id=&quot;automation-with-cicd-tools&quot;&gt;Automation with CI/CD tools&lt;/h2&gt;

&lt;p&gt;I have been using Jenkins during my internship and it seems a good starting point. However, I want to try something different (another kind of exploration). I tried Circle CI this morning and it’s pretty cool. What about Travis? It has been installed in my Github account for a long time and I did not use it before. I finally chose Travis because its interface looks much cleaner and cute.&lt;/p&gt;

&lt;p&gt;The integration is pretty simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; config file for Travis-CI to use&lt;/li&gt;
  &lt;li&gt;Configure the repo in the Travis-CI dashboard&lt;/li&gt;
  &lt;li&gt;Set up GitHub tokens for the CI bot to be able to deploy my public content in a separate branch (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;) so that I can simply push the updates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; and let travis to help me update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jekyll has its own &lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/travis-ci/#1-enabling-travis-and-github&quot;&gt;tutorial&lt;/a&gt; about setting up Travis CI with GitHub, which is pretty good. You may find my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file below as a good starting point if you want to do the same thing too:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.7&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NOKOGIRI_USE_SYSTEM_LIBRARIES=true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# speeds up installation of html-proofer&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# branch whitelist&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# test the master branch&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundler&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# caching bundler gem packages will speed up build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JEKYLL_ENV=production bundle exec jekyll build&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec htmlproofer docs --check-html --empty_alt_ignore --http-status-ignore &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;999&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# For now, ignore 999 error from linkedin links&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pages&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;local_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docs&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target-branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gh-pages&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;skip_cleanup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;github_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$GITHUB_TOKEN&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Set in the settings page of the repository, as a secure variable&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;keep_history&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Only deploy when current branch is master&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmlproofer&lt;/code&gt; to check if there’s any broken links. I ignored errors like empty alt attribute and 999 error code from LinkedIn links. You can adjust it for your needs.&lt;/p&gt;

&lt;p&gt;For the GitHub token, you can reference Travis’s documentation on how to &lt;a href=&quot;https://docs.travis-ci.com/user/deployment/pages/#setting-the-github-token&quot;&gt;set up the GitHub token for Travis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you and Enjoy.&lt;/p&gt;</content><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><category term="Notes" /><category term="Jekyll" /><category term="CI/CD" /><summary type="html">Introduction I have been using Jekyll for my homepage site generation for months and I’m happy with it. Usually my workflow for posting a new page involves:</summary></entry><entry><title type="html">Ansible 101</title><link href="/devops/2020/08/18/ansible-101/" rel="alternate" type="text/html" title="Ansible 101" /><published>2020-08-18T00:00:00+00:00</published><updated>2020-08-18T00:00:00+00:00</updated><id>/devops/2020/08/18/ansible-101</id><content type="html" xml:base="/devops/2020/08/18/ansible-101/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post was supposed to discuss Ansible as the next primer series. However, I found Jeff’s posts and YouTube videos much better than what I would achive via a plain post. So definitely checkout &lt;a href=&quot;https://www.jeffgeerling.com/blog/2020/ansible-101-jeff-geerling-youtube-streaming-series&quot;&gt;Ansible 101 by Jeff Geerling&lt;/a&gt;. I also recommend purchase the &lt;a href=&quot;https://leanpub.com/ansible-for-devops&quot;&gt;eBook&lt;/a&gt; for further reading and as a reference manual for common tasks. Thank you.&lt;/p&gt;</content><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><category term="DevOps" /><category term="Infrastructure" /><category term="SysAdmin" /><summary type="html">Introduction This post was supposed to discuss Ansible as the next primer series. However, I found Jeff’s posts and YouTube videos much better than what I would achive via a plain post. So definitely checkout Ansible 101 by Jeff Geerling. I also recommend purchase the eBook for further reading and as a reference manual for common tasks. Thank you.</summary></entry><entry><title type="html">Bazel Primer</title><link href="/primer/2020/08/09/bazel-primer/" rel="alternate" type="text/html" title="Bazel Primer" /><published>2020-08-09T00:00:00+00:00</published><updated>2020-08-09T00:00:00+00:00</updated><id>/primer/2020/08/09/bazel-primer</id><content type="html" xml:base="/primer/2020/08/09/bazel-primer/">&lt;h2 id=&quot;introduction-&quot;&gt;Introduction &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Bazel is an open-source build/test framework similar to Maven, Make, and Gradle.&lt;/p&gt;

&lt;p&gt;It features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Human-readable, high-level build language&lt;/li&gt;
  &lt;li&gt;Fast and reliable via caching&lt;/li&gt;
  &lt;li&gt;Scalable&lt;/li&gt;
  &lt;li&gt;Extensible for other language or framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post is a reading notes about the official documentation on Bazel version 3.4.0. You can skip these intros and jump directly to the sample repo to get started.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;bazel-setup&quot;&gt;Bazel Setup&lt;/h2&gt;

&lt;p&gt;Follow the instructions &lt;a href=&quot;https://docs.bazel.build/versions/3.4.0/install.html&quot;&gt;here&lt;/a&gt; to install the latest release for your system.&lt;/p&gt;

&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;/h2&gt;

&lt;p&gt;In general, Bazel builds software from source code organized in a directory called a &lt;strong&gt;workspace&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Source files in the workspace are organized in a nested hierarchy of &lt;strong&gt;packages&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;package&lt;/strong&gt; is a directory containing a set of related source files + one &lt;strong&gt;BUILD&lt;/strong&gt; file for that package.&lt;/p&gt;

&lt;p&gt;A simple example of a C++ project structure for one package is shown below:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── README.md
├── WORKSPACE
└── main
    ├── BUILD
    └── hello-world.cc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;workspace&quot;&gt;Workspace&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;workspace&lt;/em&gt; is a directory containing your source files and symbolic links to other directories that contain the build output.&lt;/p&gt;

&lt;p&gt;Have a look at the following project structure after bazel built the target:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── README.md
├── WORKSPACE
├── bazel-bin -&amp;gt; /private/var/tmp/_bazel_mxin/a122b7b4d9e8cf33d3804073143b4e06/execroot/__main__/bazel-out/darwin-fastbuild/bin
├── bazel-out -&amp;gt; /private/var/tmp/_bazel_mxin/a122b7b4d9e8cf33d3804073143b4e06/execroot/__main__/bazel-out
├── bazel-stage1 -&amp;gt; /private/var/tmp/_bazel_mxin/a122b7b4d9e8cf33d3804073143b4e06/execroot/__main__
├── bazel-testlogs -&amp;gt; /private/var/tmp/_bazel_mxin/a122b7b4d9e8cf33d3804073143b4e06/execroot/__main__/bazel-out/darwin-fastbuild/testlogs
└── main
    ├── BUILD
    └── hello-world.cc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the new symbolic links created from that build.&lt;/p&gt;

&lt;p&gt;Bazel identify a directory as a &lt;em&gt;workspace root&lt;/em&gt; by searching for a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE.bazel&lt;/code&gt;. It may be empty or may contain references to external dependencies required to build the outputs. If both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE.bazel&lt;/code&gt; exist, Bazel will ignore the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If there’s another subdirectory under the workspace root and it contains a file called &lt;strong&gt;WORKSPACE&lt;/strong&gt;, Bazel simply ignores them. In other words, Bazel does not support nested workspaces.&lt;/p&gt;

&lt;h3 id=&quot;packages&quot;&gt;Packages&lt;/h3&gt;

&lt;p&gt;As mentioned earlier, source files usually organized in nested hierarchy called &lt;strong&gt;packages&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Conceptually, a package is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the primary unit of code organization in a &lt;strong&gt;repository&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;a collection of logically related files&lt;/li&gt;
  &lt;li&gt;a specification of the dependencies among these files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In reality (ps: joking), it is a subdirectory containing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD.bazel&lt;/code&gt; file beneath the workspace root. A package includes all files + all subdirectories beneath the package root, except those themselves contain a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD.bazel&lt;/code&gt;), which become &lt;strong&gt;subpackages&lt;/strong&gt; in this case.&lt;/p&gt;

&lt;p&gt;For example, the below directory tree contains two packages: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt; and its subpackage &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app/test&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/my/app/BUILD
src/my/app/app.cc
src/my/app/data/input.txt
src/my/app/tests/BUILD
src/my/app/tests/test.cc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;repositories&quot;&gt;Repositories&lt;/h3&gt;

&lt;p&gt;In the above introduction of packages, we mentioned &lt;strong&gt;repository&lt;/strong&gt;, so what is it? We know GitHub repos, and it’s a way of organizing source code. Bazel repository is a similar concept.&lt;/p&gt;

&lt;p&gt;Bazel defines &lt;strong&gt;the root of the main repository&lt;/strong&gt; as the directory containing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; file, also called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can have dependent external repositories like googletest and these external repos are defined in the main repo’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; file using workspace rules.&lt;/p&gt;

&lt;p&gt;Note that external repos are repos themselves, which means they have their own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; file as well! However, these &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; files are ignored by Bazel and hence those transitively dependent repos are not added automatically.&lt;/p&gt;

&lt;h3 id=&quot;targets&quot;&gt;Targets&lt;/h3&gt;

&lt;p&gt;Within a package, we define elements as &lt;strong&gt;targets&lt;/strong&gt;. The name of a target is referred as its &lt;strong&gt;label&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Target categories include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;files&lt;/li&gt;
  &lt;li&gt;rules&lt;/li&gt;
  &lt;li&gt;package groups (less nemerous)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;files&quot;&gt;Files&lt;/h4&gt;

&lt;p&gt;We can further divide files as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Source files
    &lt;ul&gt;
      &lt;li&gt;usually written by the efforts of people and checked in to the repo&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Generated files (or Derived files)
    &lt;ul&gt;
      &lt;li&gt;not checked in to the repo but are generated by the build tool from source files according to specific &lt;strong&gt;rules&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;rules&quot;&gt;Rules&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;rule&lt;/strong&gt; specifies the relationship between inputs and outputs and the necessary steps to derive the outputs from the inputs.&lt;/p&gt;

&lt;h5 id=&quot;attributes&quot;&gt;Attributes&lt;/h5&gt;

&lt;p&gt;Each rule has a set of &lt;strong&gt;attributes&lt;/strong&gt; and the applicable attributes for a given rule and the significance/semantics of each attribute are a function of the rule’s &lt;strong&gt;class&lt;/strong&gt;. Each attribute has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, common attribute types are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;integers&lt;/li&gt;
  &lt;li&gt;label&lt;/li&gt;
  &lt;li&gt;list of labels&lt;/li&gt;
  &lt;li&gt;string&lt;/li&gt;
  &lt;li&gt;list of strings&lt;/li&gt;
  &lt;li&gt;output label&lt;/li&gt;
  &lt;li&gt;list of output labels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not all attributes need to be specified in every rule (i.e. some attributes are &lt;em&gt;optional&lt;/em&gt;). Attributes thus form a dictionary from keys (names) to optional, typed values.&lt;/p&gt;

&lt;p&gt;Below we introduce several common attributes.&lt;/p&gt;

&lt;h6 id=&quot;name-attribute&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; attribute&lt;/h6&gt;

&lt;p&gt;Every rule has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; attribute of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; and must be &lt;strong&gt;syntactically valid&lt;/strong&gt; target name as explained below (&lt;strong&gt;labels&lt;/strong&gt; section).&lt;/p&gt;

&lt;p&gt;In some cases, a rule’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; is somewhat arbitrary such as for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genrules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In other cases, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; is significant. For example, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_binary&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_test&lt;/code&gt; rules, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; attribute determines the produced executable’s name by the build.&lt;/p&gt;

&lt;h6 id=&quot;srcs-attribute&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt; attribute&lt;/h6&gt;

&lt;p&gt;This attribute has type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list of labels&lt;/code&gt;, which means its value, if present, is a list of labels with each being the name of a target that is an input to this rule.&lt;/p&gt;

&lt;h6 id=&quot;outs-attribute&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outs&lt;/code&gt; attribute&lt;/h6&gt;

&lt;p&gt;This attribute has type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list of output labels&lt;/code&gt;. It is similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt; attribute but differs in two significant ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;due to the invariant that &lt;strong&gt;the outputs of a rule belong to the same package as the rule itself&lt;/strong&gt; (mentioned earlier), output labels cannot include a package component and must be in one of the “relative” forms (discussed below in the &lt;strong&gt;labels&lt;/strong&gt; section)&lt;/li&gt;
  &lt;li&gt;the relationship implied by an (ordinary) label attribute is &lt;strong&gt;inverse&lt;/strong&gt; to that implied by an output label: a rule &lt;em&gt;depends on&lt;/em&gt; its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt;, whereas a rule &lt;em&gt;is depended on by&lt;/em&gt; its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outs&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;The two types of label attributes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outs&lt;/code&gt;) thus assign direction to the edges b/w targets, giving rise to a &lt;strong&gt;dependency graph&lt;/strong&gt; (DAG over targets, a.k.a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target graph&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build dependency graph&lt;/code&gt;), which is the domain over which the &lt;a href=&quot;https://docs.bazel.build/versions/3.4.0/query.html&quot;&gt;Bazel Query tool&lt;/a&gt; operates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;inputs&quot;&gt;Inputs&lt;/h5&gt;

&lt;p&gt;The &lt;strong&gt;inputs&lt;/strong&gt; may be source files, generated files, or even other rules. Allowing generated files as the inputs means outputs of one rule may be the inputs to another rule, thus allowing &lt;strong&gt;rule chaining&lt;/strong&gt;. Allowing other rules to be the inputs of one rule is more complex and language/rule-dependent.&lt;/p&gt;

&lt;p&gt;For example, a C++ library rule &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; may have another C++ library rule &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; as input. The effect of this dependency is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;’s &lt;em&gt;header files&lt;/em&gt; are available to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; during compilation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;’s &lt;em&gt;symbols&lt;/em&gt; are available to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; during linking, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;’s &lt;em&gt;runtime data&lt;/em&gt; is available to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; during execution.&lt;/p&gt;

&lt;p&gt;Note that a rule’s inputs may come from another package.&lt;/p&gt;

&lt;h5 id=&quot;outputs&quot;&gt;Outputs&lt;/h5&gt;

&lt;p&gt;The &lt;strong&gt;outputs&lt;/strong&gt; are usually generated files and these files are always belong to the &lt;strong&gt;same package&lt;/strong&gt; as the rule itself.&lt;/p&gt;

&lt;h5 id=&quot;class-or-categories&quot;&gt;Class (or Categories)&lt;/h5&gt;

&lt;p&gt;A rule can be of one of many different kinds or classes based on the output type. Such as rules that produce compiled executables and libs, test executables and other supported outputs.&lt;/p&gt;

&lt;h4 id=&quot;package-groups&quot;&gt;Package groups&lt;/h4&gt;

&lt;p&gt;A package group is a set of packages whose purpose is to limit accessibility of certain rules.&lt;/p&gt;

&lt;p&gt;It is defined by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package_group&lt;/code&gt; function and does not generate nor consume files.&lt;/p&gt;

&lt;h3 id=&quot;labels&quot;&gt;Labels&lt;/h3&gt;

&lt;p&gt;As mentioned in the &lt;strong&gt;targets&lt;/strong&gt; intro above, a target’s name is its &lt;strong&gt;label&lt;/strong&gt; and the label uniquely identifies the target.&lt;/p&gt;

&lt;p&gt;A typical label in &lt;strong&gt;canonical form&lt;/strong&gt; looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;@myrepo//my/app/main:app_binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@myrepo&lt;/code&gt; is the repo’s identifier.&lt;/p&gt;

&lt;p&gt;Usually a label refers to a target in the same repo, and hence we can omit the repo identifier and written it as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;//my/app/main:app_binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A label starts with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//&lt;/code&gt; and consists of two parts separated by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;package name
    &lt;ul&gt;
      &lt;li&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app/main&lt;/code&gt; in the above example&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;target name
    &lt;ul&gt;
      &lt;li&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app_binary&lt;/code&gt; in the above example&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A label’s second part (i.e. the target name) can be omitted if the target name is the same as the last component of the package name. Such &lt;strong&gt;short-form labels&lt;/strong&gt; are just an abbreviation and these two forms are equivalent.&lt;/p&gt;

&lt;p&gt;For example, if we have label &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:app&lt;/code&gt;, we can also write it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Quick quiz&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;What are the types of the following representations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;a package named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;a target under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt; package, with its label in short-form and target name is assumed to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:app&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;a target under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt; package, with target name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@myrepo//my/app/main:app_binary&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;a target under repo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myrepo&lt;/code&gt;, package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app/main&lt;/code&gt;, target name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app_binary&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;We can shorten the label identifier even further! Within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file for package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt;, we can omit the package-name part of labels for this package’s targets, similar to relative paths…&lt;/p&gt;

&lt;p&gt;For example, if we have targets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:app_binary&lt;/code&gt;, we can refer to them in the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app/BUILD&lt;/code&gt; as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:app&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:app&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:app_binary&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:app_binary&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app_binary&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t be confused with all these forms of representations! Remember to be consistent with your styles of using labels.&lt;/p&gt;

&lt;p&gt;Usually the colon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; is omitted for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; targets, but retained for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rule&lt;/code&gt; targets. This allows us to reference files by their unadorned name relative to the package directory in the package’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;generate.cc
testdata/input.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to reference targets outside current package in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file, you need to refer to them using their complete label.&lt;/p&gt;

&lt;p&gt;For example, with another package named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/test&lt;/code&gt; and you want to refer a file in the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/test&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file, you need to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:generate.cc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you refer to a target with incorrect label, you may get errors like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crosses a package boundary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Labels starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@//&lt;/code&gt; are &lt;strong&gt;references to the main repo&lt;/strong&gt; and still work even from external repos.&lt;/p&gt;

&lt;p&gt;Therefore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@//a/b/c&lt;/code&gt; is different from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//a/b/c&lt;/code&gt; when referenced from an external repo. The former refers back to the main repo while the latter looks for target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//a/b/c&lt;/code&gt; in the current external repo itself.&lt;/p&gt;

&lt;p&gt;Such nuance difference can be especially important when you write rules in the main repo that refer to targets in the main repo, but these rules &lt;strong&gt;will be used from external repos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I know the label syntax is strict, but Bazel intentionally enforces that to many reasons. The precise details can be found &lt;a href=&quot;https://docs.bazel.build/versions/3.4.0/build-ref.html#lexi&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-build-files&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; files&lt;/h3&gt;

&lt;p&gt;In the above sections, we discussed packages, targets, labels, build dependency graph abstractly. They are building blocks of Bazel and can be found in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file defines a package and is interpreted as a sequential list of statements by using the imperative language called &lt;a href=&quot;https://github.com/bazelbuild/starlark/&quot;&gt;Starlark&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By saying “sequential list”, we emphasize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; does matter, especially for &lt;strong&gt;variables&lt;/strong&gt;. Variables must be defined before they are used.&lt;/p&gt;

&lt;p&gt;In the meantime, the relative order of &lt;strong&gt;rule declarations&lt;/strong&gt; is immaterial and all that matter is &lt;strong&gt;which rules were declared and with what value&lt;/strong&gt; by the time package evaluation completes.&lt;/p&gt;

&lt;p&gt;So, in simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; files that consist only of rule declarations, these declarations can be re-ordered freely without changing the behavior.&lt;/p&gt;

&lt;h4 id=&quot;limitations&quot;&gt;Limitations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;no function definition, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; statements or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statements to encourage a clean separation b/w code and data
    &lt;ul&gt;
      &lt;li&gt;functions should be declared in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bzl&lt;/code&gt; files instead&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*args&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**kwargs&lt;/code&gt; arguments
    &lt;ul&gt;
      &lt;li&gt;have to list all the arguments explicitly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;unable to perform arbitrary I/O
    &lt;ul&gt;
      &lt;li&gt;hence the interpretation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; files is hermetic i.e. dependent only on a known set of inputs, which is essential for ensuring that builds are reproducible&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;should be written using only ASCII characters&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;best-practices&quot;&gt;Best practices&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;use comments liberally to document the role of each build target, whether or not it is intended for public use and to document the role of the package itself
    &lt;ul&gt;
      &lt;li&gt;since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; files need to be updated whenever the dependencies of the underlying code change, and are typically maintained by multiple people on a team&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bazel-extensions&quot;&gt;Bazel extensions&lt;/h4&gt;

&lt;p&gt;Bazel extensions are files ending in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bzl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file limitations, such files can be used to load new rules, functions or constants. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt; statement in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file to import a symbol from an extension.&lt;/p&gt;

&lt;p&gt;E.g. The following code loads the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/bar/file.bzl&lt;/code&gt; and add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some_library&lt;/code&gt; symbol to the environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;load(&quot;//foo/bar:file.bzl&quot;, &quot;some_library&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt; also supports additional arguments to import multiple symbols.&lt;/p&gt;

&lt;p&gt;Limitations of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt; statement:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;arguments must be string literals (i.e. no variables)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt; statements must appear at the top-level (i.e. cannot be in function body)&lt;/li&gt;
  &lt;li&gt;the first argument is a label (discussed above) identifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bzl&lt;/code&gt; file (i.e. a file target). If it is a &lt;strong&gt;relative label&lt;/strong&gt;,
    &lt;ul&gt;
      &lt;li&gt;it is resolved w.r.t the package (not directory) containing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bzl&lt;/code&gt; file.&lt;/li&gt;
      &lt;li&gt;it should use a leading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another typical usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt; is to assign different names (i.e. aliases) to the imported symbols:&lt;/p&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;load(&quot;//foo/bar:file.bzl&quot;, library_alias = &quot;some_library&quot;)

# multiple symbols and a mix of aliases and regular symbol names
load(&quot;:my_rules.bzl&quot;, &quot;some_rule&quot;, nice_alias = &quot;some_other_rule&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bzl&lt;/code&gt; file, symbols starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; are not exported and thus cannot be loaded from another file.&lt;/p&gt;

&lt;h3 id=&quot;build-rules&quot;&gt;Build rules&lt;/h3&gt;

&lt;p&gt;Majority of Bazel build rules come in families and grouped by language. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc_binary&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc_library&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc_test&lt;/code&gt; are the build rules for C++ binaries, libraries, and tests.&lt;/p&gt;

&lt;p&gt;As you can imagine, the naming schema for other languages is similar: with a different prefix that identifying that language. E.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java_*&lt;/code&gt; for Java. The suffix identifies the feature of that rule:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_binary&lt;/code&gt; rules build executables. The executable will be put in the build tool’s binary output tree w.r.t the rule’s label, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my:program&lt;/code&gt; will appear at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(BINDIR)/my/program&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_test&lt;/code&gt; rules are a specialization of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_binary&lt;/code&gt; rule and is used for automated testing.
    &lt;ul&gt;
      &lt;li&gt;tests return 0 on success&lt;/li&gt;
      &lt;li&gt;it can only open files that beneath its runfiles tree at runtime&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_library&lt;/code&gt; rules specify &lt;strong&gt;separately-compiled modules&lt;/strong&gt; in the given programming language. Libraries can depend on other libs, and binaries and tests can depend on libs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h3&gt;

&lt;p&gt;We discussed dependency graph in the above sections, and it models the &lt;em&gt;depends on&lt;/em&gt; relationship among targets.&lt;/p&gt;

&lt;p&gt;A target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; &lt;em&gt;depends on&lt;/em&gt; a target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; is needed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; at build or execution time.&lt;/p&gt;

&lt;p&gt;With the dependency graph defined, we further define a target’s &lt;em&gt;direct dependencies&lt;/em&gt; as those direct neighbors in the dependency graph, i.e. targets reachable by a path of length 1 in the DAG. Similarly, a target’s &lt;em&gt;transitive dependencies&lt;/em&gt; are those targets on which it depends via &lt;strong&gt;a path&lt;/strong&gt; through the graph.&lt;/p&gt;

&lt;p&gt;In the context of builds, there are two types of dependency graphs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the graph of actual dependencies
    &lt;ul&gt;
      &lt;li&gt;a target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; is actually dependent on target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt;if and only if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt; must be present, built and up-to-date in order for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; to be &lt;strong&gt;built&lt;/strong&gt; correctly.
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;built&lt;/strong&gt; could mean generated, processed, compiled, linked, archived, compressed, executed, or any other kinds of tasks that routinely occur during a build.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the graph of declared dependencies
    &lt;ul&gt;
      &lt;li&gt;a target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; has a declared dependency on target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt; if and only if there’s a &lt;strong&gt;dependency edge&lt;/strong&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt; in the package of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to have a correct build, the actual dependency graph (denoted by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Α&lt;/code&gt;) must be a subgraph of the declared dependency graph (denoted by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt;) (i.e. every pair of directly-connected nodes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; must also be directly connected in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt;). We therefore say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; is an &lt;strong&gt;overapproximation&lt;/strong&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What all these mean is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file writers should try to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; as close to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; as possible, and thus every rule must explicitly declare all of its actual direct dependencies to the build system, and no more.&lt;/p&gt;

&lt;h4 id=&quot;types-of-dependencies&quot;&gt;Types of dependencies&lt;/h4&gt;

&lt;p&gt;Most build rules have 3 attributes for specifying different kinds of generic dependencies: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deps&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;. Other attributes also exist for rule-specific kinds of dependencies e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compiler&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resources&lt;/code&gt;, etc.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt; dependencies
    &lt;ul&gt;
      &lt;li&gt;represent files directly consumed by the rule or rules that output source files&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deps&lt;/code&gt; dependencies
    &lt;ul&gt;
      &lt;li&gt;rule pointing to separately-compiled modules providing header files, symbols, libraries, data, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; dependencies
    &lt;ul&gt;
      &lt;li&gt;the build system runs tests in an isolated directory where only files listed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; are available&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;E.g.&lt;/p&gt;

        &lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;# I need a config file from a directory named env:
java_binary(
  name = &quot;setenv&quot;,
  ...
  data = glob([&quot;testdata/**&quot;]),
)

# I need test data from another directory
sh_test(
  name = &quot;regtest&quot;,
  srcs = [&quot;regtest.sh&quot;],
  data = [
    &quot;//data:file1.txt&quot;,
    &quot;//data:file2.txt&quot;,
    ...
  ],
)
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example-project&quot;&gt;Example project&lt;/h2&gt;

&lt;p&gt;I tried to re-build our previous post &lt;a href=&quot;/primer/2020/08/07/value-parameterized-gtest/&quot;&gt;Value-Parameterized GTest&lt;/a&gt; with Bazel, and you can find the source code &lt;a href=&quot;https://github.com/mcao2/value-parameterized-gtest/tree/bazel&quot;&gt;here&lt;/a&gt;. It’s interesting to compare these two branches (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch uses cmake while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bazel&lt;/code&gt; branch uses bazel) and appreciate the elegance when we adopted Bazel.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.bazel.build &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Mengxin Cao</name><email>me at mxcao.me</email></author><category term="Primer" /><category term="Build System" /><category term="C++" /><summary type="html">Introduction 1 Bazel is an open-source build/test framework similar to Maven, Make, and Gradle. It features: Human-readable, high-level build language Fast and reliable via caching Scalable Extensible for other language or framework This post is a reading notes about the official documentation on Bazel version 3.4.0. You can skip these intros and jump directly to the sample repo to get started. https://www.bazel.build &amp;#8617;</summary></entry></feed>