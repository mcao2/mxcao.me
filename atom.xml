<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>mxin</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2023-06-23T05:56:40+00:00</updated>
 <id></id>
 <author>
   <name>Mengxin Cao</name>
   <email>me at mxcao.me</email>
 </author>

 
 <entry>
   <title>How to setup PTR record in Oracle Cloud Infrastructure (OCI)</title>
   <link href="/2023/06/22/how-to-setup-ptr-record-in-oci/"/>
   <updated>2023-06-22T00:00:00+00:00</updated>
   <id>/2023/06/22/how-to-setup-ptr-record-in-oci</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;One of my VPS machines use &lt;a href=&quot;https://www.cloudron.io/&quot;&gt;Cloudron&lt;/a&gt; to easily self-host apps. And I always receive a notification from my Cloudron instance saying:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PTR DNS record (PTR) did not match.
    Hostname: &amp;lt;IP&amp;gt;
    Expected: &amp;lt;My Domain Name&amp;gt;
    Actual: null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;blockquote&gt;
  &lt;p&gt;PTR: A Pointer record reverse maps an IP address to a hostname. This behavior is the opposite of an A Record, which forward maps a hostname to an IP address. PTR records are commonly found in reverse DNS zones. For more information about PTR records, see RFC 1035.&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I looked it up and it takes me to &lt;a href=&quot;https://docs.oracle.com/en-us/iaas/Content/DNS/Tasks/reversedns.htm&quot;&gt;OCI’s Reverse DNS&lt;/a&gt;. As it says, reverse DNS maps an IP to a hostname.&lt;/p&gt;

&lt;p&gt;Even though my DNS records are managed by Cloudflare, the IP belongs to OCI. PTR records are primarily used for reverse DNS lookup, and their management is typically handled by the owner of the IP address range, which, in this case, is OCI.&lt;/p&gt;

&lt;h2 id=&quot;how-to&quot;&gt;How-to&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create an A (IPv4) or AAAA (IPv6) forward record that points your FQDN to the IP.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open a service ticket for OCI and include the IP and FQDN that you want in the PTR. Note that you need to explicitly mention that you have finished step 1 in the ticket.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;

&lt;p&gt;After OCI team added the PTR record, we can verify by executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig -x &amp;lt;IP&amp;gt;&lt;/code&gt; and check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANSWER SECTION&lt;/code&gt; contains the PTR record.&lt;/p&gt;

&lt;p&gt;E.g. if your IP is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.3.4&lt;/code&gt; and the mapped FQDN is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example.com&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig -x 1.2.3.4&lt;/code&gt; would return the following in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ANSWER SECTION&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4.3.2.1.in-addr.arpa. 3600 IN	PTR	example.com.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://docs.oracle.com/en-us/iaas/Content/DNS/Reference/supporteddnsresource.htm#types__dlentry_ptr &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://docs.oracle.com/en-us/iaas/Content/Network/Concepts/reverse_dns.htm &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Debug Resource Deadlock Avoided Error</title>
   <link href="/2023/06/21/Debug-resource-deadlock-avoided/"/>
   <updated>2023-06-21T00:00:00+00:00</updated>
   <id>/2023/06/21/Debug-resource-deadlock-avoided</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When I was debugging a core dump issue discovered in ADS (Autonomous Driving System) testing, I found a very interesting error message in the log file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terminate called after throwing an instance of &lt;span class=&quot;s1&quot;&gt;'boost::interprocess::interprocess_exception'&lt;/span&gt;
  what&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;:  Resource deadlock avoided
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;At first I thought there might be some bugs in my code when using the interprocess filelock in boost library. But after some investigation, I found that this error message is actually from the system.&lt;/p&gt;

&lt;p&gt;The scenario is that we have multiple processes and each process may have multiple threads concurrently accessing our map data. The data is organized into multiple files and each file is protected by a filelock. The filelock is implemented using the interprocess filelock in boost library and each thread can grab a RLock or WLock to access the file. The RLock is shared among threads and the WLock is exclusive to the thread that grabs it.&lt;/p&gt;

&lt;h2 id=&quot;root-cause&quot;&gt;Root cause&lt;/h2&gt;

&lt;p&gt;The root cause of this issue is that the operating system doesn’t have a deadlock detection granularity at the thread level, only at the process level.&lt;/p&gt;

&lt;p&gt;What this means is that if we have 2 processes, each process have 2 threads (name them &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1T1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1T2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2T1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2T2&lt;/code&gt;), then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;at timestamp t1, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1T1&lt;/code&gt; grabs a write lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2T1&lt;/code&gt; grabs a write lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;at timestamp t2, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1T2&lt;/code&gt; attempts to grab a read lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2T2&lt;/code&gt; attempts to grab a read lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although there is no real deadlocks at timestamp t2, the OS &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thinks&lt;/code&gt; there is a deadlock because it sees &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1&lt;/code&gt; is waiting for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P2&lt;/code&gt; is waiting for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;

&lt;p&gt;Below I provide a simple C++ program to reproduce this issue. The program has 2 processes, each process has 2 threads. Each thread grabs a lock on a file and sleeps for a while. The first process grabs a write lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D1&lt;/code&gt; and a read lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D2&lt;/code&gt;. The second process grabs a write lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D2&lt;/code&gt; and a read lock on file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that some internal implementation details are omitted for simplicity.&lt;/p&gt;

&lt;p&gt;If we run the program, we can reproduce the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource deadlock avoided&lt;/code&gt; error message.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/wait.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;thread&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;flock.h&quot; // internal filelock implementation
#include &quot;util.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;routine_read_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}.lock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FileLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Readlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SPDLOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read lock on {} acquired&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SPDLOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;read lock on {} released&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;routine_write_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}.lock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FileLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Writelock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SPDLOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;write lock on {} acquired&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SPDLOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;write lock on {} released&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SPDLOG_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=========2 process, each 2 threads=========&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// child process&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routine_write_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routine_read_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// parent process&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routine_write_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routine_read_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;The solution is to retry the lock acquisition a limited number of times when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource deadlock avoided&lt;/code&gt; error message is thrown and random sleep for a while before retrying.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://gist.github.com/harrah/4714661&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Set up network edge router via V2Ray</title>
   <link href="/tools/2022/08/28/setup-vmess-edge/"/>
   <updated>2022-08-28T00:00:00+00:00</updated>
   <id>/tools/2022/08/28/setup-vmess-edge</id>
   <content type="html">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Hello! Long time no see! I have been heavily using an iOS app called “Quantumult X” (a.k.a. QX) these days, mainly for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Easy to setup and lots of tutorials/scripts online that you can add and learn&lt;/li&gt;
  &lt;li&gt;You can add VPN servers, add flexible routing rules e.g., SSID-based switching, and subscribe to public servers (not recommended out of privacy/security concerns)&lt;/li&gt;
  &lt;li&gt;You can do MITM rewrites that enable you to have premium features on other apps for free&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall I’m very happy with this app but I do find some limitations:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;The set of protocols supported by QX is limited. According to their &lt;a href=&quot;https://github.com/crossutility/Quantumult-X/blob/d30a160eb093b3be175ea5eeeff0648db50b2a20/sample.conf#L129&quot;&gt;sample.conf&lt;/a&gt;, it only supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shadowsocks&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmess&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trojan&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me I do have some proxy servers using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shadowsocks&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmess&lt;/code&gt;, but I also have other types up and running such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireguard&lt;/code&gt;. So natively there’s no way you can add a wireguard server to this list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server_local&lt;/code&gt; in QX.&lt;/p&gt;

&lt;p&gt;Besides that I have other good-to-have features that I wish I can use within a single app:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iOS only supports 1 VPN up and running and therefore if I connect to QX then my tailscale connection is down. This is okay but it would be great if I can access my services deployed within the tailscale subnet.&lt;/li&gt;
  &lt;li&gt;Even if this single app QX is capable to handle all the protocols, it is still limited to my mobile devices and I wish I can have some sort of routing done on the server side rather than on this app, so that if I switch to another app or a different platform then I can still have the same set of routing rules and servers. This is what I call the “network edge router” which is simply a VPS server that helps me route my traffic to different VPN servers.
    &lt;ul&gt;
      &lt;li&gt;The added benefit of this approach is that the VPS server is much more performant and flexible since it is a Linux machine so it can do much complicated things like multi-hop connections (e.g., device A -&amp;gt; Network Edge Router -&amp;gt; VPN@Server1 -&amp;gt; VPN@Server2), which will greatly improve your anonymity.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post I will share how I set up such a network edge router with the help of V2Ray. Specifically I’m deploying this service to my OCI Ampere machine (arm64). Check out my previous post about setting up an OCI instance if you are interested.&lt;/p&gt;

&lt;p&gt;Before we come to the v2ray server config itself, let’s add a few VPN servers that we will use later.&lt;/p&gt;

&lt;h2 id=&quot;set-up-a-cloudfare-warp-vpn-or-any-wireguard-server&quot;&gt;Set up a Cloudfare Warp+ VPN (or any wireguard server)&lt;/h2&gt;

&lt;p&gt;One thing great about &lt;a href=&quot;https://blog.cloudflare.com/1111-warp-better-vpn/&quot;&gt;Cloudfare Warp+&lt;/a&gt; is that you can convert it to a wireguard server with the help of &lt;a href=&quot;https://github.com/ViRb3/wgcf&quot;&gt;wgcf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The conversion steps are simple and straightforward, just follow their official README and you should be good to go. Below is my steps for my future reference&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/ViRb3/wgcf/releases/download/v2.2.15/wgcf_2.2.15_linux_arm64
&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; wgcf_2.2.15_linux_arm64 wgcf
./wgcf register &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;machine name&amp;gt;'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--accept-tos&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;WGCF_LICENSE_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;your license key&amp;gt;&quot;&lt;/span&gt; ./wgcf update
./wgcf generate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the above steps you should have a wireguard conf file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wgcf-profile.conf&lt;/code&gt; by default.&lt;/p&gt;

&lt;h3 id=&quot;use-wireguard-as-a-socks5-server&quot;&gt;Use wireguard as a socks5 server&lt;/h3&gt;

&lt;p&gt;We don’t want to directly use the generated wireguard config because it will route all our VPS traffic through Cloudfare. What we want is an application-based proxy. So here I will convert it into a socks5 proxy server by using a docker container. I know this is not the most efficient approach but this is simpler and easy to follow.&lt;/p&gt;

&lt;p&gt;First check out the content of the generated wireguard conf file in the previous step and &lt;strong&gt;remove all the IPv6 contents within this file&lt;/strong&gt; e.g., your wireguard IPv6 address, and the IPv6 CIDR in the AllowedIPs. This step is necesssary because our wireguard-socks5 docker container cannot process such rules.&lt;/p&gt;

&lt;p&gt;Clone &lt;a href=&quot;https://github.com/mcao2/wireguard-socks5&quot;&gt;this repo&lt;/a&gt; and build your own wireguard-socks5 image. Note that you may want to change the network interface &lt;a href=&quot;https://github.com/mcao2/wireguard-socks5/blob/7996c5cb0889467c37de6cfc1ed2e7d9a684f778/sockd.conf#L3&quot;&gt;here&lt;/a&gt; used in the container if you encounter any issues (e.g., change it to eth0). Note that after the change you should rebuild the docker image.&lt;/p&gt;

&lt;p&gt;Below is my steps:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:mcao2/wireguard-socks5.git
podman build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; wireguard-socks5:latest-arm &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# First run an interactive container to check if there's any errors&lt;/span&gt;
podman run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wireguard-socks-proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/net/tun &lt;span class=&quot;nt&quot;&gt;--cap-add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NET_ADMIN &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--publish&lt;/span&gt; 127.0.0.1:1080:1080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt; /my/dir/to/wireguard:/etc/wireguard:z &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  wireguard-socks5:latest-arm
&lt;span class=&quot;c&quot;&gt;# If you encounter network interface name resolution error then change it in https://github.com/mcao2/wireguard-socks5/blob/master/sockd.conf and rebuild the docker&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Now start our proxy server in detach mode&lt;/span&gt;
podman run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wireguard-socks-proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/net/tun &lt;span class=&quot;nt&quot;&gt;--cap-add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;NET_ADMIN &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--publish&lt;/span&gt; 127.0.0.1:1080:1080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt; /my/dir/to/wireguard:/etc/wireguard:z &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  wireguard-socks5:latest-arm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By now you should have a socks5 server up and running in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1:1080&lt;/code&gt;, verify this by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl --proxy socks5h://127.0.0.1:1080 ipinfo.io&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;auto-start-container-on-restart&quot;&gt;Auto start container on restart&lt;/h3&gt;

&lt;p&gt;Podman provides command to generate a systemd unit file that you can enable for this purpose. Below is my steps to enable this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;su
setsebool &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; container_manage_cgroup on
&lt;span class=&quot;c&quot;&gt;# `--name` is the container name&lt;/span&gt;
podman generate systemd &lt;span class=&quot;nt&quot;&gt;--files&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; wireguard-socks-proxy &lt;span class=&quot;nt&quot;&gt;--new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;container-wireguard-socks-proxy.service /etc/systemd/system/container-wireguard-socks-proxy.service
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;container-wireguard-socks-proxy.service
&lt;span class=&quot;c&quot;&gt;# Stop your existing container first&lt;/span&gt;
podman &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; wireguard-socks-proxy
&lt;span class=&quot;c&quot;&gt;# Start your new container via systemd&lt;/span&gt;
systemctl start container-wireguard-socks-proxy.service
&lt;span class=&quot;c&quot;&gt;# Check its static&lt;/span&gt;
systemctl status container-wireguard-socks-proxy.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;v2ray-rules&quot;&gt;V2Ray rules&lt;/h2&gt;

&lt;p&gt;Now is the fun part! Install the latest V2Ray service following &lt;a href=&quot;https://github.com/v2fly/fhs-install-v2ray&quot;&gt;their guides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Edit the config file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/etc/v2ray/config.json&lt;/code&gt; and add the following contents:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;loglevel&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;warning&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;access&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/v2ray/access.log&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;error&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/v2ray/error.log&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;inbounds&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;vmess-in&quot;&lt;/span&gt;,
      // CHANGE ME!
      &lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;: &amp;lt;YOUR_PORT_1&amp;gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;listen&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;vmess&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;clients&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; // An array &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;valid user accounts
          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            // CHANGE ME!
            &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR_UUID_1&amp;gt;&quot;&lt;/span&gt;, // User ID, &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the form of a UUID
            &lt;span class=&quot;s2&quot;&gt;&quot;alterId&quot;&lt;/span&gt;: 64, // Number of alternative IDs, which will be generated &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;a deterministic way
            &lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;: 0 // V2Ray will apply different policies based on user level
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;disableInsecureEncryption&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; // Forbids client &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;using insecure encryption methods
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;telegram-in&quot;&lt;/span&gt;,
      // CHANGE ME!
      &lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;: &amp;lt;YOUR_PORT_2&amp;gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;listen&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;mtproto&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;: 0,
            // CHANGE ME!
            &lt;span class=&quot;s2&quot;&gt;&quot;secret&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR_SECRET_2&amp;gt;&quot;&lt;/span&gt; // User secret. In Telegram, user secret must be 32 characters long, and only contains characters between 0 to 9, and ato f. You may use the following &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;to generate MTProto secret: &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;openssl rand &lt;span class=&quot;nt&quot;&gt;-hex&lt;/span&gt; 16&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;vmess-in-cloudfare&quot;&lt;/span&gt;,
      // CHANGE ME!
      &lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;: &amp;lt;YOUR_PORT_3&amp;gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;listen&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;vmess&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;clients&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            // CHANGE ME!
            &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR_UUID_3&amp;gt;&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;alterId&quot;&lt;/span&gt;: 64,
            &lt;span class=&quot;s2&quot;&gt;&quot;level&quot;&lt;/span&gt;: 0
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;disableInsecureEncryption&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;outbounds&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;default-out&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;freedom&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;telegram-out&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;mtproto&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;tailscale-out&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;freedom&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;tag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;cloudfare-out&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;protocol&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;socks&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;settings&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;servers&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;address&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;: 1080
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;routing&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // Configuration &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;internal Routing strategy
    &lt;span class=&quot;s2&quot;&gt;&quot;domainStrategy&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;AsIs&quot;&lt;/span&gt;, // domain resolution strategy
    &lt;span class=&quot;s2&quot;&gt;&quot;rules&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; // &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;each inbound connection, v2ray tries these rules from top down one by one. If a rule takes effect, the connection will be routed to the &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;outboundTag&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; or &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;balanceTag&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; of the rule
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // Route traffic &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;mtproto&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; protocol
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;inboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;telegram-in&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;outboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;telegram-out&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // Route traffic &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;tailscale
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;ip&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;100.64.0.0/10&quot;&lt;/span&gt; // tailscale subnet
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;outboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;tailscale-out&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // Route vmess-in via default out
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;inboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;vmess-in&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;outboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;default-out&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; // Route vmess-in-cloudfare via cloudfare wireguard interface
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;inboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;vmess-in-cloudfare&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
        &lt;span class=&quot;s2&quot;&gt;&quot;outboundTag&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;cloudfare-out&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The config file is self-explanatory and you definitely need to change all the fields marked with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;// CHANGE ME!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this config file I also added a mtproto server for my telegram client to use. You can choose not to add this and
safely remove all associated routing rules.&lt;/p&gt;

&lt;p&gt;That’s it! In your QX config add the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;vmess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;YOUR_VPS_IP&amp;gt;:&amp;lt;YOUR_PORT_1&amp;gt;, &lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;chacha20-poly1305, &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;YOUR_UUID_1&amp;gt;, fast-open&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, udp-relay&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vmess-ampere
&lt;span class=&quot;nv&quot;&gt;vmess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;YOUR_VPS_IP&amp;gt;:&amp;lt;YOUR_PORT_3&amp;gt;, &lt;span class=&quot;nv&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;chacha20-poly1305, &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;YOUR_UUID_3&amp;gt;, fast-open&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, udp-relay&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vmess-ampere-cloudfare
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;hr /&gt;
</content>
 </entry>
 
 <entry>
   <title>Set up IKEv2 VPN on a Mikrotik Router</title>
   <link href="/tools/2021/05/28/setup-mikrotik-ike2/"/>
   <updated>2021-05-28T00:00:00+00:00</updated>
   <id>/tools/2021/05/28/setup-mikrotik-ike2</id>
   <content type="html">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I got rid of my AT&amp;amp;T router a few days back and managed to have a Mikrotik router &lt;a href=&quot;https://mikrotik.com/product/hap_ac2&quot;&gt;hAP ac²&lt;/a&gt; as an alternative. One benefit of using a mikrotik router, specifically, its RouterOS, is the customizability to add cool features to my home network. I have very slow traffic when using the AT&amp;amp;T home network when visiting some websites, e.g., weibo, so I want to route them via a VPN running on oracle cloud.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Check out my previous post about setting up an OCI instance if you are interested.&lt;/p&gt;

&lt;h2 id=&quot;set-up-an-ipsec-vpn&quot;&gt;Set up an IPSec VPN&lt;/h2&gt;

&lt;p&gt;I usually use Tailscale for VPNs but seems mikrotik does not have it for now. So I found an IPSec VPN auto setup script to ease the burden. Please checkout &lt;a href=&quot;https://github.com/hwdsl2/setup-ipsec-vpn&quot;&gt;this repo&lt;/a&gt; for a detailed walkthrough.&lt;/p&gt;

&lt;p&gt;For Ubuntu &amp;amp; Debian, the one-liner script is:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  wget https://git.io/vpnsetup &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; vpn.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh vpn.sh &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ikev2.sh &lt;span class=&quot;nt&quot;&gt;--auto&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;set-up-an-ikev2-client-on-the-mikrotik-router&quot;&gt;Set up an IKEv2 client on the Mikrotik router&lt;/h2&gt;

&lt;p&gt;You can find some tutorials on setting up a NordVPN on a RouterOS, like &lt;a href=&quot;https://wiki.mikrotik.com/wiki/IKEv2_EAP_between_NordVPN_and_RouterOS&quot;&gt;this one&lt;/a&gt; and most of the steps are similar to what we need to do.&lt;/p&gt;

&lt;h3 id=&quot;step-0-import-your-p12-file&quot;&gt;Step 0: Import your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.p12&lt;/code&gt; file&lt;/h3&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.p12&lt;/code&gt; file acts like the all-in-one cert and is usually encrypted with a passphrase. You can find it in the output of the previous step when you setting up the VPN server.&lt;/p&gt;

&lt;p&gt;Upload your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.p12&lt;/code&gt; file to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Files&lt;/code&gt; of the mikrotik router. You can verify the file is accessible by using the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /file print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you will find something like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# NAME                                       TYPE                                            SIZE CREATION-TIME&lt;/span&gt;
  0 vpnclient.p12                              .p12 file                                       4425 may/27/2021 22:00:00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next import this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.p12&lt;/code&gt; file via:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /certificate import file-name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vpnclient.p12 &lt;span class=&quot;nv&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;YOUR_PASSPHRASE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember to substitute your passphrase in the above command. And you probably need to run this command twice until you see the number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private-keys-imported&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;certificates&lt;/code&gt; tab of the web portal, check the one with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KT&lt;/code&gt; marker, note it down and it will be the one we will use in the next steps.&lt;/p&gt;

&lt;h3 id=&quot;step-1-set-up-the-ikev2-client-&quot;&gt;Step 1: Set up the IKEv2 client &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Create a separate Phase 1 profile and Phase 2 proposal configurations to not interfere with any existing IPsec configuration:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec profile
  add &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn
  /ip ipsec proposal
  add &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn pfs-group&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;none
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a new policy group and template to separate this configuration from any other IPsec configuration:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec policy group
  add &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn
  /ip ipsec policy
  add &lt;span class=&quot;nv&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;proposal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes &lt;/span&gt;dst-address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0/0 src-address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a new mode config entry with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responder=no&lt;/code&gt; that will request configuration parameters from the server:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec mode-config
  add &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;responder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create peer and identity configurations, remember to substitute yoru server IP and the correct certificate filename in the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec peer
  add &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;123.123.123.123/32 exchange-mode&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2 &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn

  /ip ipsec identity
  &lt;span class=&quot;c&quot;&gt;# vpnclient.p12_1 is the one with `KT` marker on it&lt;/span&gt;
  add auth-method&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;digital-signature &lt;span class=&quot;nv&quot;&gt;certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vpnclient.p12_1 generate-policy&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;port-strict mode-config&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;peer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn policy-template-group&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify that the connection is successfully established:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec
  active-peers print
  installed-sa print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see an established connection to your VPN server.&lt;/p&gt;

&lt;h3 id=&quot;step-2-prepare-the-list-of-ips-to-be-sent-over-the-tunnel&quot;&gt;Step 2: Prepare the list of IPs to be sent over the tunnel&lt;/h3&gt;

&lt;p&gt;Grab some existing IP-list and wrangle it to fit RouterOS. The following command will get a list of China IP ranges &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, add them to a list named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CNIP&lt;/code&gt;, and prepare them so that they can be easily imported to the mikrotik router.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://raw.githubusercontent.com/17mon/china_ip_list/master/china_ip_list.txt |sed &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^/add address=/g'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/$/ list=CNIP/g'&lt;/span&gt;|sed &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;$'1i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/ip firewall address-list'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;$'1i&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;remove [/ip firewall address-list find list=CNIP]'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;cnip.rsc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now same trick: upload this file to the router, and import it via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/import cnip.rsc&lt;/code&gt;. Note that this list is huge and it may take a while to ingest it.&lt;/p&gt;

&lt;h3 id=&quot;step-3-tag-traffic-that-match-the-list-in-mangle-firewall&quot;&gt;Step 3: Tag traffic that match the list in &lt;a href=&quot;https://wiki.mikrotik.com/wiki/Manual:IP/Firewall/Mangle&quot;&gt;Mangle Firewall&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Set the connection-mark under your mode config configuration:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip ipsec mode-config
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; find &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; connection-mark&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When it is done, a NAT rule is generated with the dynamic address provided by the server:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;admin@MikroTik] /ip firewall mangle&amp;gt; /ip firewall nat print
  Flags: X - disabled, I - invalid, D - dynamic
   0  D &lt;span class=&quot;p&quot;&gt;;;;&lt;/span&gt; ipsec mode-config
        &lt;span class=&quot;nv&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;srcnat &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src-nat to-addresses&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.43.10 connection-mark&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apply connection-mark to traffic matching the created address list:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /ip firewall mangle
  add &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mark-connection &lt;span class=&quot;nv&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;prerouting dst-address-list&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CNIP new-connection-mark&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ike2-oracle-vpn &lt;span class=&quot;nv&quot;&gt;passthrough&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mikrotik_ikev2/mikrotik-after-setup-ike2-mangled-traffic.png&quot; alt=&quot;Marked traffic that match the address list&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://wiki.mikrotik.com/wiki/Manual:IP/IPsec#RouterOS_client_configuration &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.willnet.net/index.php/archives/369/ &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Notes on OCI (Oracle Cloud Infrastructure)</title>
   <link href="/infrastructure/2021/05/23/notes-on-oci-usage/"/>
   <updated>2021-05-23T00:00:00+00:00</updated>
   <id>/infrastructure/2021/05/23/notes-on-oci-usage</id>
   <content type="html">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Some of my services are too light that I don’t want to run them endlessly on my beefy home server. One reason is that I want better availability and clearly it’s hard (a better word probably is expensive) to achieve that in my current set up. So I decided to go for the Cloud, after all… I was a cloud TA!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I chose OCI because they offer two always-free machines and it seems they are serious about this offer. So I migrated several of my services to OCI instances. This post is a summary of the quirks that I want to note down for future reference.&lt;/p&gt;

&lt;h2 id=&quot;firewall&quot;&gt;Firewall&lt;/h2&gt;

&lt;p&gt;I don’t know why they make it so hard to achieve the same effect as AWS security groups… But anyway, here’s what I need to do to reach my service via the public Internet.&lt;/p&gt;

&lt;h3 id=&quot;set-up-vpc-rules-through-the-portal&quot;&gt;Set up VPC rules through the portal&lt;/h3&gt;

&lt;p&gt;In the instance detail page, click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Attached VNICs&lt;/code&gt; under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resources&lt;/code&gt; tab. Then find the subnet of VLAN that this instance is attached with. You will be directed to the subnet detail page, where you can find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Security Lists&lt;/code&gt;, and that is our target (the equivalent of AWS security group). Then you can add/remove any rules you want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/oci/oci-security-list-under-vcn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;set-up-iptable-rules-via-command-line&quot;&gt;Set up iptable rules via command line&lt;/h3&gt;

&lt;p&gt;This iptable thing actually confuses me a lot. I don’t know why they enforce iptable rules together with the security list set up.&lt;/p&gt;

&lt;p&gt;SSH into the instance and run the following commands. These commands are taken from &lt;a href=&quot;https://stackoverflow.com/questions/54794217/opening-port-80-on-oracle-cloud-infrastructure-compute-node&quot;&gt;this SO post&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables-save &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/iptables-rules &lt;span class=&quot;c&quot;&gt;# backup&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; INPUT ACCEPT &lt;span class=&quot;c&quot;&gt;# the following commands effectively disable iptables by allowing all traffic&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; OUTPUT ACCEPT
  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; FORWARD ACCEPT
  &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Private Docker Registry</title>
   <link href="/infrastructure/2020/08/28/private-docker-registry/"/>
   <updated>2020-08-28T00:00:00+00:00</updated>
   <id>/infrastructure/2020/08/28/private-docker-registry</id>
   <content type="html">&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;I have been using docker containers for a while and quite amazed by its simplicity and power. Someday in the previous week when I was migrating/re-deploying my pleroma instance from my SurfaceGo ubuntu machine to my home lab, I found I need more private repos on docker hub. Docker hub by default only provides 1 private repo for normal users, which is clearly not what I want. So I decided to build my own docker registry and deploy it as a service in my home lab machine.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;My set up is:&lt;/p&gt;

&lt;p&gt;Run a front-facing machine with a public IPv4 address, and add a DNS A record (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry.mxcao.me&lt;/code&gt;) to point to this address. The front-facing machine will route all valid traffic to the registry container running in my Rancher cluster.&lt;/p&gt;

&lt;p&gt;Since my home lab do not have a public IPv4 address dedicated for such purpose, I use a DigitalOcean instance to serve the purpose, along with my pleroma service routing (feel free to play around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pleroma.mxcao.me&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To be able to route my traffic to the registry container, I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WireGuard&lt;/code&gt; to connect these two services. Definitely check out my previous post about setting up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WireGuard&lt;/code&gt; if you are interested.&lt;/p&gt;

&lt;h2 id=&quot;prerequisite&quot;&gt;Prerequisite&lt;/h2&gt;

&lt;p&gt;Check you have the following items ready:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your own domain so that it can be reached from the public Internet&lt;/li&gt;
  &lt;li&gt;A front-facing machine with
    &lt;ul&gt;
      &lt;li&gt;a public IPv4 address (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.3.4&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;nginx&lt;/li&gt;
      &lt;li&gt;WireGuard&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Docker (or Rancher alike) installed on the home lab to host our registry service&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;h3 id=&quot;set-up-dns-record&quot;&gt;Set up DNS record&lt;/h3&gt;

&lt;p&gt;I want my registry service accessible from anywhere with a memorizable address and therefore I need to set up a A record to point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pleroma.mxcao.me&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.2.3.4&lt;/code&gt;. You can omit this step if you can accept the inconvenience of accessing your registry via IP addresses.&lt;/p&gt;

&lt;h3 id=&quot;prepare-wireguard-for-the-service&quot;&gt;Prepare WireGuard for the service&lt;/h3&gt;

&lt;p&gt;As mentioned, I decided to use WireGuard to achieve point-to-point communication between my DO machine and the container. This set up involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Generate private/public key-pairs for the registry service container to use&lt;/li&gt;
  &lt;li&gt;Add a peer in the DO WireGuard configuration&lt;/li&gt;
  &lt;li&gt;Set up WireGuard in the registry host (note here we use port forwarding to map registry service’s listening port to the node running it, therefore I can simply set up WireGuard in the node)
    &lt;ul&gt;
      &lt;li&gt;For my particular case, I built and deployed the WireGuard module to RancherOS following &lt;a href=&quot;https://vitobotta.com/2019/07/17/kubernetes-wireguard-vpn-rancheros/&quot;&gt;this great guide&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;I did not follow all steps in this guide, and you should decide if having the WireGuard on the host is enough.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s assume you configured the WireGuard client with IPv4 address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.9.60.5&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;prepare-nginx-for-traffic-routing&quot;&gt;Prepare NGINX for traffic routing&lt;/h3&gt;

&lt;p&gt;I decided to implement basic authentication for my private registry in a reverse proxy that sits in front of the registry. This is simpler than configure the native basic auth registry feature I think, please correct me if I’m wrong.&lt;/p&gt;

&lt;p&gt;I use simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htpasswd&lt;/code&gt; file as an example, but as mentioned in &lt;a href=&quot;https://docs.docker.com/registry/recipes/nginx/&quot;&gt;their documentation&lt;/a&gt;, any other nginx authentication backend should be fairly easy to implement.&lt;/p&gt;

&lt;p&gt;Let’s obtain a certificate for the subdomain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry.mxcao.me&lt;/code&gt; via Let’s Encrypt:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure your nginx service is not running&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Setup your SSL cert, using your method of choice or certbot. If using certbot, first install it:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;certbot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Then set it up:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/lib/letsencrypt/
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;certbot certonly &lt;span class=&quot;nt&quot;&gt;--email&lt;/span&gt; &amp;lt;your@emailaddress&amp;gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; registry.mxcao.me &lt;span class=&quot;nt&quot;&gt;--standalone&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If successful, you should have your certificate and chain files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/letsencrypt/live/registry.mxcao.me&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In your nginx configuration folder (it can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conf.d&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sites-available&lt;/code&gt;), add below routing rules.&lt;/p&gt;

&lt;p&gt;Remember to change the docker-registry IP address and the certificate file path to suit your needs.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream docker-registry &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  server 10.9.60.5:5000&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## Set a variable to help us decide if we need to add the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## 'Docker-Distribution-Api-Version' header.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## The registry always sets this header.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## In the case of nginx performing auth, the header is unset&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## since nginx is auth-ing before proxying.&lt;/span&gt;
map &lt;span class=&quot;nv&quot;&gt;$upstream_http_docker_distribution_api_version&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$docker_distribution_api_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'registry/2.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  listen 80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:80&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  server_name registry.mxcao.me&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;301 https://&lt;span class=&quot;nv&quot;&gt;$server_name$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  server_name registry.mxcao.me&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  listen 443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:443 ssl&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# SSL&lt;/span&gt;
  ssl_certificate /etc/letsencrypt/live/registry.mxcao.me/fullchain.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_certificate_key /etc/letsencrypt/live/registry.mxcao.me/privkey.pem&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html&lt;/span&gt;
  ssl_protocols TLSv1.1 TLSv1.2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_ciphers &lt;span class=&quot;s1&quot;&gt;'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_prefer_server_ciphers on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  ssl_session_cache shared:SSL:10m&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# disable any limits to avoid HTTP 413 for large image uploads&lt;/span&gt;
  client_max_body_size 0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)&lt;/span&gt;
  chunked_transfer_encoding on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  location /v2/ &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Do not allow connections from docker 1.5 and earlier&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# docker pre-1.6.0 did not properly set the user agent on ping, catch &quot;Go *&quot; user agents&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$http_user_agent&lt;/span&gt; ~ &lt;span class=&quot;s2&quot;&gt;&quot;^(docker&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(3|4|5(?!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0-9]-dev))|Go ).*$&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;404&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# To add basic authentication to v2 use auth_basic setting.&lt;/span&gt;
    auth_basic &lt;span class=&quot;s2&quot;&gt;&quot;Registry realm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    auth_basic_user_file /etc/nginx/registry_auth/nginx.htpasswd&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;## If $docker_distribution_api_version is empty, the header is not added.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;## See the map directive above where this variable is defined.&lt;/span&gt;
    add_header &lt;span class=&quot;s1&quot;&gt;'Docker-Distribution-Api-Version'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$docker_distribution_api_version&lt;/span&gt; always&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    proxy_pass http://docker-registry&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# required for docker client's sake&lt;/span&gt;
    proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$http_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# pass on real client's IP&lt;/span&gt;
    proxy_set_header X-Real-IP &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_set_header X-Forwarded-Proto &lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    proxy_read_timeout 900&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see in the above configuration, we need to put the password file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx.htpasswd&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/nginx/registry_auth&lt;/code&gt;, create this folder if not already exist.&lt;/p&gt;

&lt;p&gt;For some reason, I can’t make it work following the documentation to generate the password file. Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run --rm --entrypoint htpasswd registry:2 -Bbn testuser testpassword &amp;gt; nginx.htpasswd&lt;/code&gt; simply not gonna work for nginx to authenticate properly.&lt;/p&gt;

&lt;p&gt;A work-around is posted &lt;a href=&quot;https://github.com/nginx-proxy/nginx-proxy/issues/643#issuecomment-612912033&quot;&gt;here&lt;/a&gt;, and to summarize you can run the following commands to populate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx.htpasswd&lt;/code&gt; password file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo -n 'testuser:' &amp;gt;&amp;gt; nginx.htpasswd&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This command will prompt you to enter the pwd&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;openssl passwd -apr1 &amp;gt;&amp;gt; nginx.htpasswd&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So far so good! Start your nginx service and now we are ready to spawn the actual registry service.&lt;/p&gt;

&lt;h3 id=&quot;set-up-registry-service&quot;&gt;Set up registry service&lt;/h3&gt;

&lt;p&gt;This is my particular set up case and you can easily port to the docker commands to serve the registry.&lt;/p&gt;

&lt;p&gt;In my rancher cluster, I added another workload with the following tweaks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Port mapping from container’s 5000/tcp to host’s 5000/tcp&lt;/li&gt;
  &lt;li&gt;Env variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REGISTRY_STORAGE_DELETE_ENABLED&lt;/code&gt; set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; to enable image deletion&lt;/li&gt;
  &lt;li&gt;Mount a volume from the host to the container’s path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/registry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Done! Now you can test your private registry set up by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker login -u=testuser -p=testpwd registry.mxcao.me&lt;/code&gt; in your own machine. The expected output should be:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WARNING! Using &lt;span class=&quot;nt&quot;&gt;--password&lt;/span&gt; via the CLI is insecure. Use &lt;span class=&quot;nt&quot;&gt;--password-stdin&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Login Succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! And you can now push unlimited number of repos/images to your own, private registry. Enjoy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MLOps</title>
   <link href="/notes/2020/08/28/mlops/"/>
   <updated>2020-08-28T00:00:00+00:00</updated>
   <id>/notes/2020/08/28/mlops</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;MLOps is an ML engineering culture and practice that aims at unifying ML system development (Dev) and ML system operations (Ops).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;MLOps is the natural progression of DevOps in the context of AI… and emphasizes consistent and smooth development of models and their scalability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simple words, MLOps refers to applying DevOps principles to ML systems.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Practicing MLOps means advocating &lt;strong&gt;automation&lt;/strong&gt; and &lt;strong&gt;monitoring&lt;/strong&gt; at all steps (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;integration&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;releasing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deployment&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;infra mngt&lt;/code&gt;, etc.) of ML system construction.&lt;/p&gt;

&lt;p&gt;The goal of MLOps is to build an integrated ML system that can continuously operate in production. As summarized by Google, only a small fraction of a real-world ML system is composed of the actual ML code, and the required surrounding elements are vast and complex, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-1-elements-of-ml.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mlops-concepts&quot;&gt;MLOps concepts&lt;/h2&gt;

&lt;h3 id=&quot;cicdct&quot;&gt;CI/CD/CT&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CI: &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;Continuous Integration&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;CI in ML no longer only about testing and validating code and components, but also testing and validating &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;data schemas&lt;/strong&gt;, and &lt;strong&gt;models&lt;/strong&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CD: &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_delivery&quot;&gt;Continuous Delivery&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;CD in ML no longer only about a single software package or a service, but &lt;strong&gt;a system/pipeline&lt;/strong&gt; that should automatically deploy another service e.g. model prediction service&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CT: Continuous Training
    &lt;ul&gt;
      &lt;li&gt;CT is a new property that is concerned with automatically retraining and serving the models (with new/updated data or data stream)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Consider the typical steps for training and evaluating an ML model to serve as a prediction service.&lt;/p&gt;

&lt;p&gt;After defined the use cases and established the success criteria, the process of delivering an ML model to production involves:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Data extraction: get relevant data from various sources for the ML task.&lt;/li&gt;
  &lt;li&gt;Data analysis: perform EDA to understand the extracted data (e.g. schema, characteristics) and identify the data preparation and feature engineering that are needed.&lt;/li&gt;
  &lt;li&gt;Data preparation/preprocessing: preprocess/clean the extracted data. Typically involves split the data into training/validating/test sets, data transformations, feature engineering. The output are the &lt;em&gt;data splits&lt;/em&gt; in the prepared format.&lt;/li&gt;
  &lt;li&gt;Model training: ML researchers implement algorithms to train various models, perform hyper-parameter tuning, etc. The output is a trained ML model.&lt;/li&gt;
  &lt;li&gt;Model evaluation: evaluate the trained model quality on a holdout test set. The output is a set of metrics that assess the model quality.&lt;/li&gt;
  &lt;li&gt;Model validation: confirm that the model is adequate for deployment. In our case this means confirm that its predictive performance is better than a certain baseline.&lt;/li&gt;
  &lt;li&gt;Model serving: deploy the validated model to a target environment (e.g. as micro services in a k8s cluster, as an embedded model in an edge device, or as part of a batch prediction system) to serve predictions.&lt;/li&gt;
  &lt;li&gt;Model monitoring: monitor the deployed model’s prediction performance and trigger new iteration in the system&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above steps can be completed &lt;strong&gt;manually&lt;/strong&gt; by a single team or splitter across different teams (e.g. algorithm team, operation team, etc.), or it can be done by an &lt;strong&gt;automatic pipeline&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We want to bring automation to the process so that we can benefit from shortened development cycles, increased deployment velocity, and dependable releases, etc.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;level of automation&lt;/strong&gt; of these steps defines the &lt;em&gt;maturity&lt;/em&gt; of the ML process and reflects the &lt;em&gt;velocity&lt;/em&gt; of model iterations (e.g. triggered by new data or new implementations).&lt;/p&gt;

&lt;h2 id=&quot;mlops-automation-levels&quot;&gt;MLOps automation levels&lt;/h2&gt;

&lt;h3 id=&quot;level-0-manual-labor&quot;&gt;Level 0: manual labor&lt;/h3&gt;

&lt;p&gt;The below picture shows the typical workflow of this level.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-2-manual-ml.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Characteristics:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Manual, script-driven, and interactive process&lt;/li&gt;
  &lt;li&gt;Disconnected b/w ML and operations&lt;/li&gt;
  &lt;li&gt;Infrequent release iterations&lt;/li&gt;
  &lt;li&gt;No CI/CD&lt;/li&gt;
  &lt;li&gt;Deployment is a single service (e.g. prediction) rather than the entire ML system&lt;/li&gt;
  &lt;li&gt;No active performance monitoring&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This approach may be sufficient when models are rarely changed/re-trained. But real-world environment is full of dynamics and models that fail to quickly adapt to changes may decrease in value rapidly.&lt;/p&gt;

&lt;h3 id=&quot;level-1-ml-pipeline-automation&quot;&gt;Level 1: ML pipeline automation&lt;/h3&gt;

&lt;p&gt;The goal of this level is to enable &lt;strong&gt;continuous training&lt;/strong&gt; of the model by automating the ML pipeline, and thus achieve &lt;strong&gt;continuous delivery&lt;/strong&gt; of model prediction service for users.&lt;/p&gt;

&lt;p&gt;This level of automation typically involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Automated data validation&lt;/li&gt;
  &lt;li&gt;Automated model validation&lt;/li&gt;
  &lt;li&gt;Pipeline triggers for another iteration&lt;/li&gt;
  &lt;li&gt;Metadata management (explained later)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following figure is a schematic representation of an automated ML pipeline for CT.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-3-ml-automation-ct.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Characteristics:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rapid experiment&lt;/li&gt;
  &lt;li&gt;CT of the model in production with fresh data based on live triggers&lt;/li&gt;
  &lt;li&gt;Experimental-Operational symmetry (as seen in the above diagram)&lt;/li&gt;
  &lt;li&gt;Modularized code for components and pipelines&lt;/li&gt;
  &lt;li&gt;CD of models (and thus predictive services)&lt;/li&gt;
  &lt;li&gt;Deployment is a ML pipeline rather than only a prediction service&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;transition-from-level-0-to-level-1&quot;&gt;Transition from level 0 to level 1&lt;/h4&gt;

&lt;p&gt;To transition to level 1, we need to add new components to the architecture:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Automated data and model validation&lt;/li&gt;
  &lt;li&gt;Optional feature store: a centralized repo where we standardize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;definition&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storage&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access&lt;/code&gt; of features for training and serving. This is the data source for experimentation, CT, and online serving.&lt;/li&gt;
  &lt;li&gt;Metadata management: we record information about each execution of the pipeline in order to help with &lt;strong&gt;data and artifacts lineage&lt;/strong&gt;, &lt;strong&gt;reproducibility&lt;/strong&gt;, &lt;strong&gt;comparisons&lt;/strong&gt;, &lt;strong&gt;debugging&lt;/strong&gt;, &lt;strong&gt;anomaly detection&lt;/strong&gt;, etc. Metadata can include:
    &lt;ul&gt;
      &lt;li&gt;versioning: of pipeline, or of individual components in the pipeline&lt;/li&gt;
      &lt;li&gt;timing: start/end date, duration time, etc.&lt;/li&gt;
      &lt;li&gt;pipeline executor(s)&lt;/li&gt;
      &lt;li&gt;parameter args&lt;/li&gt;
      &lt;li&gt;pointer to artifacts produced by each pipeline step (e.g. location of prepared data, computed statistics, etc.)&lt;/li&gt;
      &lt;li&gt;pointer to previous trained model (this enables model roll-back)&lt;/li&gt;
      &lt;li&gt;model evaluation metrics (can be thought of as part of the produced pipeline artifacts), which enable model comparison and benchmarking&lt;/li&gt;
      &lt;li&gt;etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pipeline triggers: e.g. on-data-availability, on-demand, on-schedule, on-model-perf-degradation, on-data-drift, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach is sufficient if new pipeline implementations are rare deployed and only a few pipelines are managed.&lt;/p&gt;

&lt;p&gt;The pipeline and its components are usually &lt;strong&gt;manually tested and deployed&lt;/strong&gt;. This is not a good solution if you want to deploy new models based on &lt;strong&gt;new ML ideas&lt;/strong&gt; since manual labor still involved to deploy the pipeline itself, or you are managing many ML pipelines in production.&lt;/p&gt;

&lt;p&gt;You need a CI/CD setup to automate the &lt;strong&gt;build/test/deployment of ML pipelines&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;level-2-cicd-pipeline-automation&quot;&gt;Level 2: CI/CD pipeline automation&lt;/h3&gt;

&lt;p&gt;A robust automated CI/CD system allows data scientists rapidly explore new ML ideas around &lt;strong&gt;feature engineering&lt;/strong&gt;, &lt;strong&gt;model architecture&lt;/strong&gt;, &lt;strong&gt;hyper-parameters&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;p&gt;Data scientists can implement new ideas and the &lt;strong&gt;new pipeline&lt;/strong&gt; will be automatically built, tested, and deployed to the target environment.&lt;/p&gt;

&lt;p&gt;We can see the updated diagram with CI/CD added for the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-4-ml-automation-ci-cd.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This level typically involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Source control&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test and build services&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deployment services&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Model registry&lt;/li&gt;
  &lt;li&gt;Feature store&lt;/li&gt;
  &lt;li&gt;Metadata management&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pipeline orchestrator&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Characteristics:&lt;/p&gt;

&lt;p&gt;Stages for CI/CD automation pipeline:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning-5-stages.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Manual labors cannot be eliminated for the data analysis and model analysis steps.&lt;/p&gt;

&lt;h4 id=&quot;ci&quot;&gt;CI&lt;/h4&gt;

&lt;p&gt;The pipeline and its components are built, tested, and packaged when new code is committed or pushed to the VCS.&lt;/p&gt;

&lt;p&gt;E.g. unit testing for the feature engineering logic, for different implemented methods; testing that the model training converges; testing that each component in the pipeline produces the expected artifacts, etc.&lt;/p&gt;

&lt;h4 id=&quot;cd&quot;&gt;CD&lt;/h4&gt;

&lt;p&gt;The new pipeline implementation is continuously deployed to the target environment, and in turn delivers new/updated prediction services.&lt;/p&gt;

&lt;p&gt;Rapid and reliable pipeline delivery usually involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;verification of the model compatibility with the target infrastructure before deployment actually happens&lt;/li&gt;
  &lt;li&gt;test the prediction service with expected inputs and make sure you get expected response within the expected time&lt;/li&gt;
  &lt;li&gt;test the service performance e.g. QPS, latency, etc.&lt;/li&gt;
  &lt;li&gt;automated deployment to a test environment&lt;/li&gt;
  &lt;li&gt;semi-automated deployment to a pre-production environment&lt;/li&gt;
  &lt;li&gt;manual deployment to a production environment after several successful runs of the pipeline on the pre-production environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following diagram shows the relationship b/w the CI/CD pipeline and the CT pipeline in a ML system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/architecture-for-mlops-using-tfx-kubeflow-pipelines-and-cloud-build-1-ci-cd-ct-pipelines.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Given new model implementation (e.g. new ML ideas/architecture), a successful CI/CD pipeline deploys a new CT pipeline.&lt;/p&gt;

&lt;p&gt;Given new data, a successful CT pipeline should serve a new model prediction service.&lt;/p&gt;

&lt;h4 id=&quot;example-architecture-for-mlops-using-tfx-kubeflow-pipelines-and-cloud-build&quot;&gt;Example: Architecture for MLOps using TFX, Kubeflow Pipelines, and Cloud Build&lt;/h4&gt;

&lt;p&gt;TFX stands for “TensorFlow Extended” and is an integrated ML platform for developing and deploying production ML systems.&lt;/p&gt;

&lt;p&gt;A TFX pipeline is a sequence of components that implement an ML system (modeling, training, validation, serving inference, deployment management, etc.).&lt;/p&gt;

&lt;p&gt;Key libraries of TFX including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TFT (TensorFlow Transform): data preparation, feature engineering tasks&lt;/li&gt;
  &lt;li&gt;TFDV (TensorFlow Data Validation): data anomaly detection&lt;/li&gt;
  &lt;li&gt;TensorFlow Estimators and Keras: model building and training&lt;/li&gt;
  &lt;li&gt;TFMA (TensorFlow Model Analysis): model evaluation and analysis&lt;/li&gt;
  &lt;li&gt;TFServing (TensorFlow Serving): serve model in the target environment (e.g. as REST and gRPC APIs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following diagram shows the architecture of an integrated ML system built from the various TFX libraries (i.e. &lt;em&gt;the design of a TFX-based integrated ML system&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/architecture-for-mlops-using-tfx-kubeflow-pipelines-and-cloud-build-2-tfx-libraries.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the designed architecture, the next question is &lt;em&gt;how to run each component of the system at scale&lt;/em&gt;. Commercial cloud platforms like GCP can help us run the system at scale in a reliable fashion with managed cloud services (e.g. cloud storage, AI hub, dataflow).&lt;/p&gt;

&lt;p&gt;With the individual components mapped to a managed service in the cloud platform, the next question is &lt;em&gt;how to connect these two pieces together and automate the entire pipeline&lt;/em&gt;. An &lt;strong&gt;orchestrator&lt;/strong&gt; performs such tasks and glues our high-level architecture and the underlying individual components. It’s useful for both dev and production phases as it facilitates automation and reduces manual labors.&lt;/p&gt;

&lt;p&gt;The orchestrator runs the pipeline in sequence and automatically move forward based on the defined conditions (e.g. execute the model serving step after model evaluation finished and the metrics meet predefined thresholds).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubeflow&lt;/strong&gt; is the &lt;em&gt;ML Toolkit for Kubernetes&lt;/em&gt;. &lt;strong&gt;Kubeflow Pipeline&lt;/strong&gt; is a Kubeflow service that lets you compose, orchestrate, and automate ML systems, where each component of the system can run on various infrastructures (e.g. GCP, local, etc.). Sounds familiar? Yes! It is an orchestrator that we want.&lt;/p&gt;

&lt;p&gt;A Kubeflow pipeline involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A set of containerized tasks/components packed as a docker image. These components can execute any data-related and compute-related services, e.g. &lt;strong&gt;Dataproc&lt;/strong&gt; for SparkML jobs, &lt;strong&gt;AutoML&lt;/strong&gt;, etc.&lt;/li&gt;
  &lt;li&gt;A sequence of tasks defined by a Python DSL, i.e. the topology of the workflow&lt;/li&gt;
  &lt;li&gt;A set of pipeline input parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/mlops/architecture-for-mlops-using-tfx-kubeflow-pipelines-and-cloud-build-6-ci-cd-kubeflow.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above diagram shows a high-level overview of integrating CI/CD with Kubeflow pipelines in GCP. At the heart of this architecture is Cloud Build, a managed service that executes your builds on GCP. Essentially, the cloud build process performs the required CI/CD for our integrated ML system.&lt;/p&gt;

&lt;p&gt;The build can be triggered manually or through automated build triggers.&lt;/p&gt;

&lt;p&gt;For a comprehensive Cloud Build example that covers most of these steps, see &lt;a href=&quot;https://github.com/ksalama/kubeflow-examples/tree/master/kfp-cloudbuild&quot;&gt;A Simple CI/CD Example with Kubeflow Pipelines and Cloud Build&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/solutions/machine-learning/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning&quot;&gt;MLOps: Continuous delivery and automation pipelines in machine learning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.forbes.com/sites/tomtaulli/2020/08/01/mlops-what-you-need-to-know/#3bd1c4241214&quot;&gt;MLOps: What You Need To Know&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/solutions/machine-learning/architecture-for-mlops-using-tfx-kubeflow-pipelines-and-cloud-build&quot;&gt;Architecture for MLOps using TFX, Kubeflow Pipelines, and Cloud Build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Use Travis CI for Jekyll site generation</title>
   <link href="/notes/2020/08/19/jekyll-travis/"/>
   <updated>2020-08-19T00:00:00+00:00</updated>
   <id>/notes/2020/08/19/jekyll-travis</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I have been using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; for my homepage site generation for months and I’m happy with it. Usually my workflow for posting a new page involves:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;Create the source file (.md files)&lt;/li&gt;
  &lt;li&gt;Commit the changes&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve -w &lt;/code&gt; to view the post in my local computer&lt;/li&gt;
  &lt;li&gt;If satisfied, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JEKYLL_ENV=production bundle exec jekyll build &lt;/code&gt; to generate the public content&lt;/li&gt;
  &lt;li&gt;Copy the public content to another folder used for publication&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;automation-with-bash-script&quot;&gt;Automation with bash script&lt;/h2&gt;

&lt;p&gt;You can see this is a lot! And posting a trivial page like a short intro or recommendation takes non-trivial time. Later I wrote a bash script that help me handle most of the steps so that I can focus on the content rather than the infra-side things.&lt;/p&gt;

&lt;p&gt;This solution works pretty well and I stick to it for a while. But… It’s just ugly and I finally decided to bring modern CI tools into the play.&lt;/p&gt;

&lt;h2 id=&quot;automation-with-cicd-tools&quot;&gt;Automation with CI/CD tools&lt;/h2&gt;

&lt;p&gt;I have been using Jenkins during my internship and it seems a good starting point. However, I want to try something different (another kind of exploration). I tried Circle CI this morning and it’s pretty cool. What about Travis? It has been installed in my Github account for a long time and I did not use it before. I finally chose Travis because its interface looks much cleaner and cute.&lt;/p&gt;

&lt;p&gt;The integration is pretty simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; config file for Travis-CI to use&lt;/li&gt;
  &lt;li&gt;Configure the repo in the Travis-CI dashboard&lt;/li&gt;
  &lt;li&gt;Set up GitHub tokens for the CI bot to be able to deploy my public content in a separate branch (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;) so that I can simply push the updates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; and let travis to help me update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jekyll has its own &lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/travis-ci/#1-enabling-travis-and-github&quot;&gt;tutorial&lt;/a&gt; about setting up Travis CI with GitHub, which is pretty good. You may find my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file below as a good starting point if you want to do the same thing too:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.7&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NOKOGIRI_USE_SYSTEM_LIBRARIES=true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# speeds up installation of html-proofer&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# branch whitelist&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# test the master branch&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundler&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# caching bundler gem packages will speed up build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle install&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JEKYLL_ENV=production bundle exec jekyll build&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec htmlproofer docs --check-html --empty_alt_ignore --http-status-ignore &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;999&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# For now, ignore 999 error from linkedin links&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pages&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;local_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docs&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target-branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gh-pages&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;skip_cleanup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;github_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$GITHUB_TOKEN&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Set in the settings page of the repository, as a secure variable&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;keep_history&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Only deploy when current branch is master&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htmlproofer&lt;/code&gt; to check if there’s any broken links. I ignored errors like empty alt attribute and 999 error code from LinkedIn links. You can adjust it for your needs.&lt;/p&gt;

&lt;p&gt;For the GitHub token, you can reference Travis’s documentation on how to &lt;a href=&quot;https://docs.travis-ci.com/user/deployment/pages/#setting-the-github-token&quot;&gt;set up the GitHub token for Travis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you and Enjoy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ansible 101</title>
   <link href="/devops/2020/08/18/ansible-101/"/>
   <updated>2020-08-18T00:00:00+00:00</updated>
   <id>/devops/2020/08/18/ansible-101</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post was supposed to discuss Ansible as the next primer series. However, I found Jeff’s posts and YouTube videos much better than what I would achive via a plain post. So definitely checkout &lt;a href=&quot;https://www.jeffgeerling.com/blog/2020/ansible-101-jeff-geerling-youtube-streaming-series&quot;&gt;Ansible 101 by Jeff Geerling&lt;/a&gt;. I also recommend purchase the &lt;a href=&quot;https://leanpub.com/ansible-for-devops&quot;&gt;eBook&lt;/a&gt; for further reading and as a reference manual for common tasks. Thank you.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bazel Primer</title>
   <link href="/primer/2020/08/09/bazel-primer/"/>
   <updated>2020-08-09T00:00:00+00:00</updated>
   <id>/primer/2020/08/09/bazel-primer</id>
   <content type="html">&lt;h2 id=&quot;introduction-&quot;&gt;Introduction &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;p&gt;Bazel is an open-source build/test framework similar to Maven, Make, and Gradle.&lt;/p&gt;

&lt;p&gt;It features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Human-readable, high-level build language&lt;/li&gt;
  &lt;li&gt;Fast and reliable via caching&lt;/li&gt;
  &lt;li&gt;Scalable&lt;/li&gt;
  &lt;li&gt;Extensible for other language or framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post is a reading notes about the official documentation on Bazel version 3.4.0. You can skip these intros and jump directly to the sample repo to get started.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;bazel-setup&quot;&gt;Bazel Setup&lt;/h2&gt;

&lt;p&gt;Follow the instructions &lt;a href=&quot;https://docs.bazel.build/versions/3.4.0/install.html&quot;&gt;here&lt;/a&gt; to install the latest release for your system.&lt;/p&gt;

&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;/h2&gt;

&lt;p&gt;In general, Bazel builds software from source code organized in a directory called a &lt;strong&gt;workspace&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Source files in the workspace are organized in a nested hierarchy of &lt;strong&gt;packages&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;package&lt;/strong&gt; is a directory containing a set of related source files + one &lt;strong&gt;BUILD&lt;/strong&gt; file for that package.&lt;/p&gt;

&lt;p&gt;A simple example of a C++ project structure for one package is shown below:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── README.md
├── WORKSPACE
└── main
    ├── BUILD
    └── hello-world.cc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;workspace&quot;&gt;Workspace&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;workspace&lt;/em&gt; is a directory containing your source files and symbolic links to other directories that contain the build output.&lt;/p&gt;

&lt;p&gt;Have a look at the following project structure after bazel built the target:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── README.md
├── WORKSPACE
├── bazel-bin -&amp;gt; /private/var/tmp/_bazel_mxin/a122b7b4d9e8cf33d3804073143b4e06/execroot/__main__/bazel-out/darwin-fastbuild/bin
├── bazel-out -&amp;gt; /private/var/tmp/_bazel_mxin/a122b7b4d9e8cf33d3804073143b4e06/execroot/__main__/bazel-out
├── bazel-stage1 -&amp;gt; /private/var/tmp/_bazel_mxin/a122b7b4d9e8cf33d3804073143b4e06/execroot/__main__
├── bazel-testlogs -&amp;gt; /private/var/tmp/_bazel_mxin/a122b7b4d9e8cf33d3804073143b4e06/execroot/__main__/bazel-out/darwin-fastbuild/testlogs
└── main
    ├── BUILD
    └── hello-world.cc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the new symbolic links created from that build.&lt;/p&gt;

&lt;p&gt;Bazel identify a directory as a &lt;em&gt;workspace root&lt;/em&gt; by searching for a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE.bazel&lt;/code&gt;. It may be empty or may contain references to external dependencies required to build the outputs. If both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE.bazel&lt;/code&gt; exist, Bazel will ignore the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If there’s another subdirectory under the workspace root and it contains a file called &lt;strong&gt;WORKSPACE&lt;/strong&gt;, Bazel simply ignores them. In other words, Bazel does not support nested workspaces.&lt;/p&gt;

&lt;h3 id=&quot;packages&quot;&gt;Packages&lt;/h3&gt;

&lt;p&gt;As mentioned earlier, source files usually organized in nested hierarchy called &lt;strong&gt;packages&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Conceptually, a package is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the primary unit of code organization in a &lt;strong&gt;repository&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;a collection of logically related files&lt;/li&gt;
  &lt;li&gt;a specification of the dependencies among these files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In reality (ps: joking), it is a subdirectory containing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD.bazel&lt;/code&gt; file beneath the workspace root. A package includes all files + all subdirectories beneath the package root, except those themselves contain a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD.bazel&lt;/code&gt;), which become &lt;strong&gt;subpackages&lt;/strong&gt; in this case.&lt;/p&gt;

&lt;p&gt;For example, the below directory tree contains two packages: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt; and its subpackage &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app/test&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/my/app/BUILD
src/my/app/app.cc
src/my/app/data/input.txt
src/my/app/tests/BUILD
src/my/app/tests/test.cc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;repositories&quot;&gt;Repositories&lt;/h3&gt;

&lt;p&gt;In the above introduction of packages, we mentioned &lt;strong&gt;repository&lt;/strong&gt;, so what is it? We know GitHub repos, and it’s a way of organizing source code. Bazel repository is a similar concept.&lt;/p&gt;

&lt;p&gt;Bazel defines &lt;strong&gt;the root of the main repository&lt;/strong&gt; as the directory containing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; file, also called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can have dependent external repositories like googletest and these external repos are defined in the main repo’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; file using workspace rules.&lt;/p&gt;

&lt;p&gt;Note that external repos are repos themselves, which means they have their own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; file as well! However, these &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WORKSPACE&lt;/code&gt; files are ignored by Bazel and hence those transitively dependent repos are not added automatically.&lt;/p&gt;

&lt;h3 id=&quot;targets&quot;&gt;Targets&lt;/h3&gt;

&lt;p&gt;Within a package, we define elements as &lt;strong&gt;targets&lt;/strong&gt;. The name of a target is referred as its &lt;strong&gt;label&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Target categories include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;files&lt;/li&gt;
  &lt;li&gt;rules&lt;/li&gt;
  &lt;li&gt;package groups (less nemerous)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;files&quot;&gt;Files&lt;/h4&gt;

&lt;p&gt;We can further divide files as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Source files
    &lt;ul&gt;
      &lt;li&gt;usually written by the efforts of people and checked in to the repo&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Generated files (or Derived files)
    &lt;ul&gt;
      &lt;li&gt;not checked in to the repo but are generated by the build tool from source files according to specific &lt;strong&gt;rules&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;rules&quot;&gt;Rules&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;rule&lt;/strong&gt; specifies the relationship between inputs and outputs and the necessary steps to derive the outputs from the inputs.&lt;/p&gt;

&lt;h5 id=&quot;attributes&quot;&gt;Attributes&lt;/h5&gt;

&lt;p&gt;Each rule has a set of &lt;strong&gt;attributes&lt;/strong&gt; and the applicable attributes for a given rule and the significance/semantics of each attribute are a function of the rule’s &lt;strong&gt;class&lt;/strong&gt;. Each attribute has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, common attribute types are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;integers&lt;/li&gt;
  &lt;li&gt;label&lt;/li&gt;
  &lt;li&gt;list of labels&lt;/li&gt;
  &lt;li&gt;string&lt;/li&gt;
  &lt;li&gt;list of strings&lt;/li&gt;
  &lt;li&gt;output label&lt;/li&gt;
  &lt;li&gt;list of output labels&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not all attributes need to be specified in every rule (i.e. some attributes are &lt;em&gt;optional&lt;/em&gt;). Attributes thus form a dictionary from keys (names) to optional, typed values.&lt;/p&gt;

&lt;p&gt;Below we introduce several common attributes.&lt;/p&gt;

&lt;h6 id=&quot;name-attribute&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; attribute&lt;/h6&gt;

&lt;p&gt;Every rule has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; attribute of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; and must be &lt;strong&gt;syntactically valid&lt;/strong&gt; target name as explained below (&lt;strong&gt;labels&lt;/strong&gt; section).&lt;/p&gt;

&lt;p&gt;In some cases, a rule’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; is somewhat arbitrary such as for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;genrules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In other cases, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; is significant. For example, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_binary&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_test&lt;/code&gt; rules, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; attribute determines the produced executable’s name by the build.&lt;/p&gt;

&lt;h6 id=&quot;srcs-attribute&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt; attribute&lt;/h6&gt;

&lt;p&gt;This attribute has type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list of labels&lt;/code&gt;, which means its value, if present, is a list of labels with each being the name of a target that is an input to this rule.&lt;/p&gt;

&lt;h6 id=&quot;outs-attribute&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outs&lt;/code&gt; attribute&lt;/h6&gt;

&lt;p&gt;This attribute has type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list of output labels&lt;/code&gt;. It is similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt; attribute but differs in two significant ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;due to the invariant that &lt;strong&gt;the outputs of a rule belong to the same package as the rule itself&lt;/strong&gt; (mentioned earlier), output labels cannot include a package component and must be in one of the “relative” forms (discussed below in the &lt;strong&gt;labels&lt;/strong&gt; section)&lt;/li&gt;
  &lt;li&gt;the relationship implied by an (ordinary) label attribute is &lt;strong&gt;inverse&lt;/strong&gt; to that implied by an output label: a rule &lt;em&gt;depends on&lt;/em&gt; its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt;, whereas a rule &lt;em&gt;is depended on by&lt;/em&gt; its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outs&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;The two types of label attributes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;outs&lt;/code&gt;) thus assign direction to the edges b/w targets, giving rise to a &lt;strong&gt;dependency graph&lt;/strong&gt; (DAG over targets, a.k.a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target graph&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build dependency graph&lt;/code&gt;), which is the domain over which the &lt;a href=&quot;https://docs.bazel.build/versions/3.4.0/query.html&quot;&gt;Bazel Query tool&lt;/a&gt; operates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;inputs&quot;&gt;Inputs&lt;/h5&gt;

&lt;p&gt;The &lt;strong&gt;inputs&lt;/strong&gt; may be source files, generated files, or even other rules. Allowing generated files as the inputs means outputs of one rule may be the inputs to another rule, thus allowing &lt;strong&gt;rule chaining&lt;/strong&gt;. Allowing other rules to be the inputs of one rule is more complex and language/rule-dependent.&lt;/p&gt;

&lt;p&gt;For example, a C++ library rule &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; may have another C++ library rule &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; as input. The effect of this dependency is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;’s &lt;em&gt;header files&lt;/em&gt; are available to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; during compilation, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;’s &lt;em&gt;symbols&lt;/em&gt; are available to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; during linking, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;’s &lt;em&gt;runtime data&lt;/em&gt; is available to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; during execution.&lt;/p&gt;

&lt;p&gt;Note that a rule’s inputs may come from another package.&lt;/p&gt;

&lt;h5 id=&quot;outputs&quot;&gt;Outputs&lt;/h5&gt;

&lt;p&gt;The &lt;strong&gt;outputs&lt;/strong&gt; are usually generated files and these files are always belong to the &lt;strong&gt;same package&lt;/strong&gt; as the rule itself.&lt;/p&gt;

&lt;h5 id=&quot;class-or-categories&quot;&gt;Class (or Categories)&lt;/h5&gt;

&lt;p&gt;A rule can be of one of many different kinds or classes based on the output type. Such as rules that produce compiled executables and libs, test executables and other supported outputs.&lt;/p&gt;

&lt;h4 id=&quot;package-groups&quot;&gt;Package groups&lt;/h4&gt;

&lt;p&gt;A package group is a set of packages whose purpose is to limit accessibility of certain rules.&lt;/p&gt;

&lt;p&gt;It is defined by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package_group&lt;/code&gt; function and does not generate nor consume files.&lt;/p&gt;

&lt;h3 id=&quot;labels&quot;&gt;Labels&lt;/h3&gt;

&lt;p&gt;As mentioned in the &lt;strong&gt;targets&lt;/strong&gt; intro above, a target’s name is its &lt;strong&gt;label&lt;/strong&gt; and the label uniquely identifies the target.&lt;/p&gt;

&lt;p&gt;A typical label in &lt;strong&gt;canonical form&lt;/strong&gt; looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;@myrepo//my/app/main:app_binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@myrepo&lt;/code&gt; is the repo’s identifier.&lt;/p&gt;

&lt;p&gt;Usually a label refers to a target in the same repo, and hence we can omit the repo identifier and written it as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;//my/app/main:app_binary
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A label starts with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//&lt;/code&gt; and consists of two parts separated by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;package name
    &lt;ul&gt;
      &lt;li&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app/main&lt;/code&gt; in the above example&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;target name
    &lt;ul&gt;
      &lt;li&gt;e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app_binary&lt;/code&gt; in the above example&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A label’s second part (i.e. the target name) can be omitted if the target name is the same as the last component of the package name. Such &lt;strong&gt;short-form labels&lt;/strong&gt; are just an abbreviation and these two forms are equivalent.&lt;/p&gt;

&lt;p&gt;For example, if we have label &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:app&lt;/code&gt;, we can also write it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Quick quiz&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;What are the types of the following representations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;a package named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;a target under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt; package, with its label in short-form and target name is assumed to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:app&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;a target under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt; package, with target name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@myrepo//my/app/main:app_binary&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;a target under repo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myrepo&lt;/code&gt;, package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app/main&lt;/code&gt;, target name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app_binary&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;We can shorten the label identifier even further! Within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file for package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt;, we can omit the package-name part of labels for this package’s targets, similar to relative paths…&lt;/p&gt;

&lt;p&gt;For example, if we have targets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:app_binary&lt;/code&gt;, we can refer to them in the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app/BUILD&lt;/code&gt; as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:app&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:app&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:app_binary&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:app_binary&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app_binary&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t be confused with all these forms of representations! Remember to be consistent with your styles of using labels.&lt;/p&gt;

&lt;p&gt;Usually the colon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; is omitted for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt; targets, but retained for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rule&lt;/code&gt; targets. This allows us to reference files by their unadorned name relative to the package directory in the package’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;generate.cc
testdata/input.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to reference targets outside current package in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file, you need to refer to them using their complete label.&lt;/p&gt;

&lt;p&gt;For example, with another package named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/test&lt;/code&gt; and you want to refer a file in the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/app&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my/test&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file, you need to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my/app:generate.cc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you refer to a target with incorrect label, you may get errors like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crosses a package boundary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Labels starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@//&lt;/code&gt; are &lt;strong&gt;references to the main repo&lt;/strong&gt; and still work even from external repos.&lt;/p&gt;

&lt;p&gt;Therefore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@//a/b/c&lt;/code&gt; is different from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//a/b/c&lt;/code&gt; when referenced from an external repo. The former refers back to the main repo while the latter looks for target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//a/b/c&lt;/code&gt; in the current external repo itself.&lt;/p&gt;

&lt;p&gt;Such nuance difference can be especially important when you write rules in the main repo that refer to targets in the main repo, but these rules &lt;strong&gt;will be used from external repos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I know the label syntax is strict, but Bazel intentionally enforces that to many reasons. The precise details can be found &lt;a href=&quot;https://docs.bazel.build/versions/3.4.0/build-ref.html#lexi&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-build-files&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; files&lt;/h3&gt;

&lt;p&gt;In the above sections, we discussed packages, targets, labels, build dependency graph abstractly. They are building blocks of Bazel and can be found in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file defines a package and is interpreted as a sequential list of statements by using the imperative language called &lt;a href=&quot;https://github.com/bazelbuild/starlark/&quot;&gt;Starlark&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By saying “sequential list”, we emphasize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;order&lt;/code&gt; does matter, especially for &lt;strong&gt;variables&lt;/strong&gt;. Variables must be defined before they are used.&lt;/p&gt;

&lt;p&gt;In the meantime, the relative order of &lt;strong&gt;rule declarations&lt;/strong&gt; is immaterial and all that matter is &lt;strong&gt;which rules were declared and with what value&lt;/strong&gt; by the time package evaluation completes.&lt;/p&gt;

&lt;p&gt;So, in simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; files that consist only of rule declarations, these declarations can be re-ordered freely without changing the behavior.&lt;/p&gt;

&lt;h4 id=&quot;limitations&quot;&gt;Limitations&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;no function definition, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; statements or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statements to encourage a clean separation b/w code and data
    &lt;ul&gt;
      &lt;li&gt;functions should be declared in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bzl&lt;/code&gt; files instead&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*args&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;**kwargs&lt;/code&gt; arguments
    &lt;ul&gt;
      &lt;li&gt;have to list all the arguments explicitly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;unable to perform arbitrary I/O
    &lt;ul&gt;
      &lt;li&gt;hence the interpretation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; files is hermetic i.e. dependent only on a known set of inputs, which is essential for ensuring that builds are reproducible&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;should be written using only ASCII characters&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;best-practices&quot;&gt;Best practices&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;use comments liberally to document the role of each build target, whether or not it is intended for public use and to document the role of the package itself
    &lt;ul&gt;
      &lt;li&gt;since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; files need to be updated whenever the dependencies of the underlying code change, and are typically maintained by multiple people on a team&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bazel-extensions&quot;&gt;Bazel extensions&lt;/h4&gt;

&lt;p&gt;Bazel extensions are files ending in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bzl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file limitations, such files can be used to load new rules, functions or constants. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt; statement in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file to import a symbol from an extension.&lt;/p&gt;

&lt;p&gt;E.g. The following code loads the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo/bar/file.bzl&lt;/code&gt; and add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some_library&lt;/code&gt; symbol to the environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;load(&quot;//foo/bar:file.bzl&quot;, &quot;some_library&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt; also supports additional arguments to import multiple symbols.&lt;/p&gt;

&lt;p&gt;Limitations of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt; statement:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;arguments must be string literals (i.e. no variables)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt; statements must appear at the top-level (i.e. cannot be in function body)&lt;/li&gt;
  &lt;li&gt;the first argument is a label (discussed above) identifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bzl&lt;/code&gt; file (i.e. a file target). If it is a &lt;strong&gt;relative label&lt;/strong&gt;,
    &lt;ul&gt;
      &lt;li&gt;it is resolved w.r.t the package (not directory) containing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bzl&lt;/code&gt; file.&lt;/li&gt;
      &lt;li&gt;it should use a leading &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another typical usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt; is to assign different names (i.e. aliases) to the imported symbols:&lt;/p&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;load(&quot;//foo/bar:file.bzl&quot;, library_alias = &quot;some_library&quot;)

# multiple symbols and a mix of aliases and regular symbol names
load(&quot;:my_rules.bzl&quot;, &quot;some_rule&quot;, nice_alias = &quot;some_other_rule&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bzl&lt;/code&gt; file, symbols starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; are not exported and thus cannot be loaded from another file.&lt;/p&gt;

&lt;h3 id=&quot;build-rules&quot;&gt;Build rules&lt;/h3&gt;

&lt;p&gt;Majority of Bazel build rules come in families and grouped by language. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc_binary&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc_library&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cc_test&lt;/code&gt; are the build rules for C++ binaries, libraries, and tests.&lt;/p&gt;

&lt;p&gt;As you can imagine, the naming schema for other languages is similar: with a different prefix that identifying that language. E.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java_*&lt;/code&gt; for Java. The suffix identifies the feature of that rule:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_binary&lt;/code&gt; rules build executables. The executable will be put in the build tool’s binary output tree w.r.t the rule’s label, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//my:program&lt;/code&gt; will appear at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(BINDIR)/my/program&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_test&lt;/code&gt; rules are a specialization of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_binary&lt;/code&gt; rule and is used for automated testing.
    &lt;ul&gt;
      &lt;li&gt;tests return 0 on success&lt;/li&gt;
      &lt;li&gt;it can only open files that beneath its runfiles tree at runtime&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_library&lt;/code&gt; rules specify &lt;strong&gt;separately-compiled modules&lt;/strong&gt; in the given programming language. Libraries can depend on other libs, and binaries and tests can depend on libs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h3&gt;

&lt;p&gt;We discussed dependency graph in the above sections, and it models the &lt;em&gt;depends on&lt;/em&gt; relationship among targets.&lt;/p&gt;

&lt;p&gt;A target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; &lt;em&gt;depends on&lt;/em&gt; a target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; is needed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; at build or execution time.&lt;/p&gt;

&lt;p&gt;With the dependency graph defined, we further define a target’s &lt;em&gt;direct dependencies&lt;/em&gt; as those direct neighbors in the dependency graph, i.e. targets reachable by a path of length 1 in the DAG. Similarly, a target’s &lt;em&gt;transitive dependencies&lt;/em&gt; are those targets on which it depends via &lt;strong&gt;a path&lt;/strong&gt; through the graph.&lt;/p&gt;

&lt;p&gt;In the context of builds, there are two types of dependency graphs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the graph of actual dependencies
    &lt;ul&gt;
      &lt;li&gt;a target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; is actually dependent on target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt;if and only if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt; must be present, built and up-to-date in order for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; to be &lt;strong&gt;built&lt;/strong&gt; correctly.
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;built&lt;/strong&gt; could mean generated, processed, compiled, linked, archived, compressed, executed, or any other kinds of tasks that routinely occur during a build.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;the graph of declared dependencies
    &lt;ul&gt;
      &lt;li&gt;a target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; has a declared dependency on target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt; if and only if there’s a &lt;strong&gt;dependency edge&lt;/strong&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt; in the package of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to have a correct build, the actual dependency graph (denoted by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Α&lt;/code&gt;) must be a subgraph of the declared dependency graph (denoted by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt;) (i.e. every pair of directly-connected nodes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; must also be directly connected in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt;). We therefore say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; is an &lt;strong&gt;overapproximation&lt;/strong&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What all these mean is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BUILD&lt;/code&gt; file writers should try to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; as close to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; as possible, and thus every rule must explicitly declare all of its actual direct dependencies to the build system, and no more.&lt;/p&gt;

&lt;h4 id=&quot;types-of-dependencies&quot;&gt;Types of dependencies&lt;/h4&gt;

&lt;p&gt;Most build rules have 3 attributes for specifying different kinds of generic dependencies: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deps&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;. Other attributes also exist for rule-specific kinds of dependencies e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compiler&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resources&lt;/code&gt;, etc.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;srcs&lt;/code&gt; dependencies
    &lt;ul&gt;
      &lt;li&gt;represent files directly consumed by the rule or rules that output source files&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deps&lt;/code&gt; dependencies
    &lt;ul&gt;
      &lt;li&gt;rule pointing to separately-compiled modules providing header files, symbols, libraries, data, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; dependencies
    &lt;ul&gt;
      &lt;li&gt;the build system runs tests in an isolated directory where only files listed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; are available&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;E.g.&lt;/p&gt;

        &lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;# I need a config file from a directory named env:
java_binary(
  name = &quot;setenv&quot;,
  ...
  data = glob([&quot;testdata/**&quot;]),
)

# I need test data from another directory
sh_test(
  name = &quot;regtest&quot;,
  srcs = [&quot;regtest.sh&quot;],
  data = [
    &quot;//data:file1.txt&quot;,
    &quot;//data:file2.txt&quot;,
    ...
  ],
)
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;example-project&quot;&gt;Example project&lt;/h2&gt;

&lt;p&gt;I tried to re-build our previous post &lt;a href=&quot;/primer/2020/08/07/value-parameterized-gtest/&quot;&gt;Value-Parameterized GTest&lt;/a&gt; with Bazel, and you can find the source code &lt;a href=&quot;https://github.com/mcao2/value-parameterized-gtest/tree/bazel&quot;&gt;here&lt;/a&gt;. It’s interesting to compare these two branches (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch uses cmake while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bazel&lt;/code&gt; branch uses bazel) and appreciate the elegance when we adopted Bazel.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.bazel.build &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>WireGuard Primer</title>
   <link href="/primer/2020/08/08/wireguard-primer/"/>
   <updated>2020-08-08T00:00:00+00:00</updated>
   <id>/primer/2020/08/08/wireguard-primer</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;WireGuard &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is a simple, fast, and modern &lt;strong&gt;VPN&lt;/strong&gt; that utilizes cryptography.&lt;/p&gt;

&lt;p&gt;It encapsulates IP packets over UDP. The general workflow can be summarized as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install WireGuard&lt;/li&gt;
  &lt;li&gt;Add a WireGuard interface (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wlan0&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth0&lt;/code&gt; but named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wg0&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wg1&lt;/code&gt;…)&lt;/li&gt;
  &lt;li&gt;Configure the interface with a private key and optionally add peer’s public key(s)&lt;/li&gt;
  &lt;li&gt;Send packets to the interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s similar to the ssh model. Both parties have each other’s public keys and they communicate by exchanging packets encrypted by the public keys through the WireGuard interface.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;about-the-wireguard-network-interface&quot;&gt;About the WireGuard network interface&lt;/h3&gt;

&lt;p&gt;The WireGuard network interface is where the magic happens and it acts as a tunnel interface.&lt;/p&gt;

&lt;p&gt;You can add one or more such interfaces depending on your needs. It can be configured normally using utilities like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ifconfig(8)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip-address(8)&lt;/code&gt;, but more typically you configure such interfaces using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wg(8)&lt;/code&gt; tool for WireGuard-specific settings.&lt;/p&gt;

&lt;p&gt;By saying that it acts as a tunnel interface, we mean:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It associates tunnel IP address with public keys and remote endpoints&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sending&lt;/strong&gt; a packet to a peer through a WireGuard interface involves
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Find the destination peer&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;E.g. this packet is meant for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.30.8&lt;/code&gt;. Which peer is that? Let me look… Okay, it’s for peer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABCDEFGH&lt;/code&gt;. (Or if it’s not for any configured peer, drop the packet.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Encrypt the IP packet using peer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABCDEFGH&lt;/code&gt;’s public key&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Find the destination’s remote endpoint&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;E.g. what is the remote endpoint of peer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABCDEFGH&lt;/code&gt;? Let me look… Okay, the endpoint is UDP port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53133&lt;/code&gt; on host &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;216.58.211.110&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Receiving&lt;/strong&gt; a packet from a peer through a WireGuard interface involves
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Decrypt the received packet&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;I just got a packet from UDP port 7361 on host 98.139.183.24. Let’s decrypt it!&lt;/li&gt;
          &lt;li&gt;If the decryption failed, drop the packet; Otherwise let’s remember that peer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LMNOPQRS&lt;/code&gt;’s most recent Internet endpoint is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;98.139.183.24:7361&lt;/code&gt; using UDP&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Now we have the plaintext packet from peer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LMNOPQRS&lt;/code&gt; with IP &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.43.89&lt;/code&gt;, is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LMNOPQRS&lt;/code&gt; allowed to be sending packets to us as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.43.89&lt;/code&gt;?&lt;/li&gt;
          &lt;li&gt;If so, accept the packet on the interface. If not, drop it.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above short, simplified summary is for our understanding purpose and there’s much happening behind the scenes to provide proper privacy, authenticity, and secrecy.&lt;/p&gt;

&lt;h3 id=&quot;about-cryptokey-routing&quot;&gt;About Cryptokey Routing&lt;/h3&gt;

&lt;p&gt;Cryptokey Routing is at the heart of WireGuard.&lt;/p&gt;

&lt;p&gt;It associates &lt;strong&gt;public keys&lt;/strong&gt; with a list of tunnel IPs that are allowed inside the tunnel. Those public keys correspond to a list of peers, each peer has a public key. We use public keys to authenticate each other’s identity. They can be safely passed around for use in plaintext config files by any out-of-band method.&lt;/p&gt;

&lt;p&gt;It also associates a &lt;strong&gt;private key&lt;/strong&gt; with a WireGuard network interface.&lt;/p&gt;

&lt;p&gt;For example, a server may have below config file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;[Interface]
PrivateKey = yAnz5TF+lXXJte14tji3zlMNq+hd2rYUIgJBgB3fBmk=
ListenPort = 51820

[Peer]
PublicKey = xTIBA5rboUvnH4htodjb6e697QjLERt1NAB4mZqp8Dg=
AllowedIPs = 10.192.122.3/32, 10.192.124.1/24

[Peer]
PublicKey = TrMvSoP4jYQlY6RIzBgbssQqY3vxI2Pi+y71lOWWXX0=
AllowedIPs = 10.192.122.4/32, 192.168.0.0/16

[Peer]
PublicKey = gN65BkIKy1eCE9pP1wdc8ROUtkHLF2PfAqYdyYBz6EA=
AllowedIPs = 10.10.10.230/32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each peer in this case will be a client that can send packets to the server’s network interface with a source IP matching the allowed IPs.&lt;/p&gt;

&lt;p&gt;For example, if a packet is &lt;strong&gt;received by the server&lt;/strong&gt; from peer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gN65BkIK...&lt;/code&gt;, after being decrypted and authenticated, if its source IP is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.10.230&lt;/code&gt;, then it’s allowed onto the interface; otherwise it’s dropped. If the server wants to &lt;strong&gt;send a packet to a client&lt;/strong&gt;, it looks at that packet’s destination IP and compares it to each peer’s list of allowed IPs to see &lt;em&gt;which peer to send&lt;/em&gt; it to. For example, if the server’s network interface is asked to send a packet with a destination IP of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.10.10.230&lt;/code&gt;, it will encrypt it using the public key of peer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gN65BkIK...&lt;/code&gt;, and then send it out to the peer’s &lt;strong&gt;most recent internet endpoint&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the meantime, a client may have the below config file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;[Interface]
PrivateKey = gI6EdUSYvn8ugXOt8QQD6Yc+JyiZxIhp3GInSWRfWGE=
ListenPort = 21841

[Peer]
PublicKey = HIgo9xNzJMWLKASShiTqIybxZ0U3wGLiUeJ1PKf8ykw=
Endpoint = 192.95.5.69:51820
AllowedIPs = 0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client here has only 1 peer with public key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HIgo9...&lt;/code&gt;. That peer is able to send packets to this interface with any source IP.&lt;/p&gt;

&lt;p&gt;The endpoint in the above client config is an &lt;strong&gt;initial endpoint&lt;/strong&gt; of its single peer so that it knows where to send encrypted data before it has received encrypted data. Compared to this, the server side config does not have any initial endpoints of its peers because the server discovers the peer endpoints by examining from where correctly authenticated data originates.&lt;/p&gt;

&lt;p&gt;If a server changes its own endpoint, and sends data to the clients, the clients will discover the new server endpoint and update its config. This is what we referred in the previous discussion “&lt;em&gt;use the most recent IP endpoint&lt;/em&gt;”. Such feature is also called &lt;strong&gt;IP roaming&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, if a &lt;strong&gt;packet is received from&lt;/strong&gt; peer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HIgo9...&lt;/code&gt;, after being decrypted and authenticated, it is allowed onto the interface; otherwise it is dropped. In the meantime, if the client’s network interface is asked to send a packet to its single peer, it will encrypt the packet for the peer with &lt;em&gt;any&lt;/em&gt; destination IP since the allowed IP is a wildcard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0.0.0.0/0&lt;/code&gt;, and then send it out to the single peer’s most recent internet endpoint.&lt;/p&gt;

&lt;p&gt;In other words, the &lt;strong&gt;list of allowed IPs&lt;/strong&gt; behave differently depending on the purpose is sending or receiving:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When sending packets out, the list behaves like a &lt;strong&gt;routing table&lt;/strong&gt; that determines which host to send the packets to&lt;/li&gt;
  &lt;li&gt;When receiving packets, the list behaves like a &lt;strong&gt;access control list&lt;/strong&gt; (ACL) that determines whether to keep the packets or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is important and keep these two rules in mind!&lt;/p&gt;

&lt;p&gt;Combining the public key and the bi-purpose list of allowed IPs is what we call a &lt;strong&gt;CryptoKey Routing Table&lt;/strong&gt;: the simple association of public keys and allowed IPs.&lt;/p&gt;

&lt;p&gt;Note that any of the IP field can be either IPv4, IPv6, or any combination of them.&lt;/p&gt;

&lt;p&gt;The tight coupling of peer identity and the allowed IPs ease system admins from complicated firewall extensions but rather using a simplified match on “is it from this IP? on this interface?”.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;h3 id=&quot;installation-&quot;&gt;Installation &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Here I only cover the commands used to install WireGuard in Ubuntu.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;wireguard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify your installation by checking its version:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wg &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireguard&lt;/code&gt; kernel module is loaded:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsmod | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;wireguard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If not loaded, try to reboot your instance and check again.&lt;/p&gt;

&lt;p&gt;You can manually load it with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;modprobe wireguard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;server-setup-&quot;&gt;Server Setup &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Generate a public and private certificate on the server&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;umask &lt;/span&gt;077
wg genkey | &lt;span class=&quot;nb&quot;&gt;tee &lt;/span&gt;server_private_key | wg pubkey &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; server_public_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Create the server config file&lt;/strong&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/wireguard/wg0.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;[Interface]
Address = 10.9.0.1/24, fd42:42:42::1/64
SaveConfig = true
PrivateKey = # PLACEHOLDER for your server side private key
ListenPort = 51820
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
[Peer]
PublicKey = # PLACEHOLDER for your client side public key
AllowedIPs = 10.9.0.2/32, fd42:42:42::2/128
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you need to change the public interface based on your situation. In my case it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth0&lt;/code&gt;. If it is not, change it to the actual name.&lt;/p&gt;

&lt;p&gt;As we mentioned earlier, the list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllowedIPs&lt;/code&gt; has different interpretation when sending/receiving packets (a routing table when sending and a ACL when receiving). You will want to add your LAN’s &lt;strong&gt;subnet&lt;/strong&gt; under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllowedIPs&lt;/code&gt; so that you can access them through the tunnel. Note that it is a subnet! Otherwise you may encounter errors like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTNETLINK answers: File exists&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the above sever config file, I also assigned an IPv6 IP for the server and the peer since my instance has a public IPv6 address, and hence we can use it as a dual-stack VPN.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enable IPv4/IPv6 forwarding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/sysctl.conf&lt;/code&gt; and uncomment the following lines:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net.ipv4.ip_forward&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
net.ipv6.conf.all.forwarding&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart the server or use the following commands to let the forwarding to take effect.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Start WireGuard&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; root:root /etc/wireguard/wg0.conf
&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 644 /etc/wireguard/wg0.conf
wg-quick up wg0
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; wg-quick@wg0.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;client-setup&quot;&gt;Client Setup&lt;/h3&gt;

&lt;p&gt;I’m using the WireGuard Mac App, and the configuration is simple and intuitive. Follow the instructions above to generate the certificates for the client, and populate the configs following the official docs.&lt;/p&gt;

&lt;h3 id=&quot;forward-all-your-traffic-through-the-tunnel-&quot;&gt;Forward all your traffic through the tunnel &lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;Remember what we emphasized earlier? The dual-purpose list of AllowedIPs? If you want your traffic looks like it’s coming from your server, you can forward all the traffic through WireGuard interface.&lt;/p&gt;

&lt;p&gt;Simply change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllowedIPs&lt;/code&gt; line on the client to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;AllowedIPs = 0.0.0.0/0, ::/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wg0&lt;/code&gt; (or whatever your WireGuard interface is) responsible for routing all IP addresses/traffic over your server. You can check this by visiting &lt;a href=&quot;http://ping.pe/&quot;&gt;ping.pe&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;forward-all-ipv6-traffic-through-the-tunnel&quot;&gt;Forward all IPv6-traffic through the tunnel&lt;/h3&gt;

&lt;p&gt;I want to route all my IPv6 traffic through the tunnel but keep the IPv6 traffic untouched. At first I tried setting:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;AllowedIPs = 10.9.0.1/32, ::/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it seems WireGuard also changed the routing table for IPv4 (checked via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netstat -nr&lt;/code&gt;). I found &lt;a href=&quot;https://www.reddit.com/r/WireGuard/comments/ewt7g0/ios_macos_route_all_traffic_through_peer_only_ipv6/&quot;&gt;this reddit post&lt;/a&gt; and the workaround is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;AllowedIPs = 10.9.0.1/32, ::/1, 8000::/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s a clever hack to make it work but I expect a cleaner solution should exist (like the previous config).&lt;/p&gt;

&lt;p&gt;Now I can reach IPv6-only websites like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bt.byr.cn&lt;/code&gt; while not tunneling my IPv4 traffic to the slow VPN network!&lt;/p&gt;

&lt;h3 id=&quot;protect-your-dns-&quot;&gt;Protect your DNS &lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;When you use WireGuard in your machine as a client, your local network won’t be accessible, which means if the DNS servers pushed by your DHCP server are in the local network, you cannot access it! You can add a DNS entry in your client interface config like below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;[Interface]
PrivateKey = (hidden)
Address = 10.9.0.2/24, fd42:42:42::2/64
DNS = 176.103.130.130, 176.103.130.131

[Peer]
PublicKey = # PLACEHOLDER for your peer's public key
AllowedIPs = 10.9.0.1/32, fd42:42:42::1/128
Endpoint = # PLACEHOLDER for your peer's remote endpoint, be it IPv4 or IPv6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we use Adguard DNS but you can definitely host your own DNS server in your server machine. I also recommend &lt;a href=&quot;https://nextdns.io/&quot;&gt;NextDNS&lt;/a&gt; for your DNS experience. Thank you.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.wireguard.com/ &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.wireguard.com/install/ &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;http://portal.altispeed.com/kb/faq.php?id=201 &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.stavros.io/posts/how-to-configure-wireguard/ &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://stanislas.blog/2019/01/how-to-setup-vpn-server-wireguard-nat-ipv6/ &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Value-Parameterized GTest</title>
   <link href="/primer/2020/08/07/value-parameterized-gtest/"/>
   <updated>2020-08-07T00:00:00+00:00</updated>
   <id>/primer/2020/08/07/value-parameterized-gtest</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Last time I talked about gtest in the &lt;a href=&quot;/primer/2020/06/10/googletest-primer/&quot;&gt;gtest primer&lt;/a&gt;, and in this post we discuss the usage of &lt;a href=&quot;https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#value-parameterized-tests&quot;&gt;“value-paramterized” tests&lt;/a&gt;. In general, when you write a simple test case and verified it is working, what is the next step? Maybe you want to add more test cases! But how? Adding them by “hard-coding” the logics in the source files? It’s not a good idea since cases may evolve and we may later add new corner cases, maybe months later. At that time, you may already forgot how to write a test case using gtest.&lt;/p&gt;

&lt;p&gt;Value-parameterized tests are a good way to organize your test cases and group them in a logical manner e.g. test cases for a particular API. I use value-parameterized tests and a YAML configuration file to dynamically add/reduce my test cases, so that adding or removing a test case is as simple as updating the YAML file.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;problem-setting&quot;&gt;Problem setting&lt;/h2&gt;

&lt;p&gt;I finished writing test cases for the new APIs using gtest and I felt great! During the meeting, my mentor raised a question: “How can I add a new test case when you finished your internship? Do I need to learn gtest from scratch to do that?”. Definitely “yes” is not a good option, so I decided to update existing test implementations and use an easier approach to add/remove test cases. That is using value-parameterized tests together with a test config file written in YAML.&lt;/p&gt;

&lt;p&gt;An example test config file should be like:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Read-oriented API tests&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;GetBarTest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;case_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TestEmptyParams&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;case_assertion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EXPECT_EQ&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;case_description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;returned&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;given&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;case_params&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;barbar&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;case_expected_result&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;prepare-the-apis&quot;&gt;Prepare the APIs&lt;/h2&gt;

&lt;p&gt;In this example we will add a simple getter method under the namespace of “Foo”. The only function we have is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBar&lt;/code&gt; which returns a vector of strings.&lt;/p&gt;

&lt;p&gt;The header file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.h&lt;/code&gt; contains:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// namespace foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And its implementation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo.cpp&lt;/code&gt; is:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;foo.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// namespace foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;setup-the-gtest&quot;&gt;Setup the gtest&lt;/h2&gt;

&lt;p&gt;I want to be as general as possible. So I setup a separate fixture for namespace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo&lt;/code&gt;. If we later added more APIs under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo&lt;/code&gt;, then the adaptation will be easier.&lt;/p&gt;

&lt;p&gt;Note that we use &lt;a href=&quot;https://github.com/jbeder/yaml-cpp&quot;&gt;yaml-cpp&lt;/a&gt; to parse the config files and I will assume you already built and installed the library.&lt;/p&gt;

&lt;p&gt;I created a header file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_foo_core.h&lt;/code&gt; to setup the test cases for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo&lt;/code&gt; and defined a value-parameterized fixture class called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FooTest&lt;/code&gt;. All the API tests can afterwards be derived from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FooTest&lt;/code&gt; class to reuse the settings. The value type will be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YAML::Node&lt;/code&gt; that include the configurations for a specific test case.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetUp&lt;/code&gt; method of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FooTest&lt;/code&gt; will retrieve the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YAML::Node&lt;/code&gt; by using gtest’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetParam&lt;/code&gt; method, from which we read the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case_params&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case_assertion&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We defined a function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadTestCasesFromYaml&lt;/code&gt; to help us parse a specific test case from the test config file. You provide the fucntion test name (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetBarTest&lt;/code&gt; in the above example config file) and it will read all the test cases under that name and use them to run the tests.&lt;/p&gt;

&lt;p&gt;Enough introduction and explanations! Go clone &lt;a href=&quot;https://github.com/mcao2/value-parameterized-gtest&quot;&gt;the tutorial repo&lt;/a&gt; and play around the tests!&lt;/p&gt;

&lt;h2 id=&quot;commands-to-run-the-buildtestcoverage&quot;&gt;Commands to run the build/test/coverage&lt;/h2&gt;

&lt;p&gt;In the tutorial repo, I also included the option to produce a code coverage report using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcov&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lcov&lt;/code&gt;. Check it out by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make coverage&lt;/code&gt; under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; directory and read the reports in the coverage folder.&lt;/p&gt;

&lt;h3 id=&quot;clone-the-repo&quot;&gt;Clone the repo&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:mcao2/value-parameterized-gtest.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;build-the-source-files-and-tests&quot;&gt;Build the source files and tests&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
cmake &lt;span class=&quot;nt&quot;&gt;-DBUILD_TEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON .. &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nt&quot;&gt;-j4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-the-gtest&quot;&gt;Run the gtest&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ctest &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;sample-output&quot;&gt;Sample output&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Constructing a list of tests
Done constructing a list of tests
Updating &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;list &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;fixtures
Added 0 tests to meet fixture requirements
Checking &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;dependency graph...
Checking &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;dependency graph end
&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;1
    Start 1: test_foo

1: Test &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: value-parameterized-gtest/build/test/test_foo
1: Environment variables:
1:  &lt;span class=&quot;nv&quot;&gt;TEST_FOO_CONFIG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;value-parameterized-gtest/test/test_foo.yaml
1:  &lt;span class=&quot;nv&quot;&gt;GTEST_OUTPUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xml:value-parameterized-gtest/build/reports/gtest_test_foo.xml
1: Test &lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;computed to be: 10000000
1: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;GetBarTest] Num cases: 1
1: Read &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; TestEmptyParams
1: &lt;span class=&quot;o&quot;&gt;[==========]&lt;/span&gt; Running 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;from 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;suite.
1: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;----------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Global &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;environment set-up.
1: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;----------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;from GetBarTestInstantiation/GetBarTest
1: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; RUN      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; GetBarTestInstantiation/GetBarTest.GetBar/TestEmptyParams
1: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;       OK &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; GetBarTestInstantiation/GetBarTest.GetBar/TestEmptyParams &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 ms&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
1: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;----------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;from GetBarTestInstantiation/GetBarTest &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 ms total&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
1:
1: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;----------&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Global &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;environment tear-down
1: &lt;span class=&quot;o&quot;&gt;[==========]&lt;/span&gt; 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;from 1 &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;suite ran. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 ms total&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
1: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;  PASSED  &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 1 test.
1/1 Test &lt;span class=&quot;c&quot;&gt;#1: test_foo .........................   Passed    0.48 sec&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-code-coverage-report&quot;&gt;Create code coverage report&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make coverage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To view the report, go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coverage&lt;/code&gt; and run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you can view your report from 127.0.0.1:8000.&lt;/p&gt;

&lt;h4 id=&quot;sample-output-1&quot;&gt;Sample output&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/gtest_adv/lcov_report.png&quot; alt=&quot;code coverage&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you and I hope this is useful :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git Primer</title>
   <link href="/primer/2020/07/19/git-primer/"/>
   <updated>2020-07-19T00:00:00+00:00</updated>
   <id>/primer/2020/07/19/git-primer</id>
   <content type="html">&lt;h1 id=&quot;git-primer&quot;&gt;Git Primer&lt;/h1&gt;

&lt;h2 id=&quot;git-commit-messages&quot;&gt;Git Commit Messages&lt;/h2&gt;

&lt;p&gt;Git commit messages can help you understand why something happened months or years ago for your collaborators or yourselves. It affects a project’s maintainability, and hence plays a critical role in a project’s long-term success.&lt;/p&gt;

&lt;p&gt;This section we summarize some common techniques to write a healthy commit message. Of course there are variations on the styles and conventions adopted by different projects/orgs, you should pick one and stick to it as much as possible to reduce chaos and inconsistency.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;A commit message is nothing but some plain texts explaining the changes you made. We can describe a &lt;strong&gt;git commit msg convention&lt;/strong&gt; from several perspectives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Style: e.g. capitalization, punctuation&lt;/li&gt;
  &lt;li&gt;Content: info that the commit msg body should or should not contain&lt;/li&gt;
  &lt;li&gt;Metadata: e.g. reference PR numbers, issue tracking IDs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, well-established conventions exist and you don’t need to re-invent the wheel.&lt;/p&gt;

&lt;h3 id=&quot;several-rules-of-a-great-git-commit-msg-&quot;&gt;Several rules of a great git commit msg &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Separate &lt;strong&gt;subject&lt;/strong&gt; from &lt;strong&gt;body&lt;/strong&gt; with a blank line&lt;/li&gt;
  &lt;li&gt;Limit the &lt;strong&gt;subject&lt;/strong&gt; line to 50 characters&lt;/li&gt;
  &lt;li&gt;Capitalize the subject line&lt;/li&gt;
  &lt;li&gt;Do not end the subject line with a period&lt;/li&gt;
  &lt;li&gt;Use the &lt;strong&gt;imperative mood&lt;/strong&gt; in the subject line&lt;/li&gt;
  &lt;li&gt;Wrap the body at 72 characters&lt;/li&gt;
  &lt;li&gt;Use the body to explain what and why vs. how&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Summarize changes in around 50 characters or less

More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like &lt;span class=&quot;sb&quot;&gt;`log`&lt;/span&gt;, &lt;span class=&quot;sb&quot;&gt;`shortlog`&lt;/span&gt;
and &lt;span class=&quot;sb&quot;&gt;`rebase`&lt;/span&gt; can get confused if you run the two together.

Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequences of this
change? Here's the place to explain them.

Further paragraphs come after blank lines.
&lt;span class=&quot;p&quot;&gt;
 -&lt;/span&gt; Bullet points are okay, too
&lt;span class=&quot;p&quot;&gt;
 -&lt;/span&gt; Typically a hyphen or asterisk is used for the bullet, preceded
   by a single space, with blank lines in between, but conventions
   vary here

If you use an issue tracker, put references to them at the bottom,
like this:

Resolves: #123
See also: #456, #789
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Not every commit msg needs both a subject and a body and sometimes a single line is fine for simple changes&lt;/p&gt;

    &lt;p&gt;E.g.&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git commit -m &quot;Fix typo in introduction to user guide&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commit msgs with a subject and a body are not easy to write with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m&lt;/code&gt; option. You should configure an editor for use with git. You can also define a commit msg template in the git config like below to remind you of the proper format and style when creating a commit msg:&lt;/p&gt;

    &lt;p&gt;E.g. Consider a template file at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.gitmessage.txt&lt;/code&gt; that looks like this&lt;/p&gt;

    &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Subject line (try to keep under 50 characters)

 Multi-line description of commit,
 feel free to be detailed.

 [Ticket: X]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;To tell Git to use it as the default message that appears in your editor when you run git commit, set the commit.template configuration value:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; commit.template ~/.gitmessage.txt
 &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The blank line b/w the subject and body is essential and there’re a number of contexts in git like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --oneline&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git shortlog&lt;/code&gt; that the distinction b/w subject and body matter&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The 50 characters limit for the subject line forces the author to think about the most concise way to express his ideas. It also ensures that they are readable from the GitHub WebUI&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Your subject line should always be able to complete the following sentence:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;If applied, this commit will &lt;em&gt;your subject line here&lt;/em&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you write the git msg body if needed, be mindful about its right margin and wrap text at 72 characters. Consider to set up a good text editor that automatically wrap texts for you&lt;/p&gt;

    &lt;p&gt;If you are using VSCode, the below settings can be a starting point:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Set VSCode as your default editor for git&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# '--wait': Wait for the files to be closed before returning.&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.editor &lt;span class=&quot;s2&quot;&gt;&quot;code --wait&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;In your VSCode user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.json&lt;/code&gt;, add the following wrap rule:&lt;/p&gt;

        &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;[git-commit]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.rulers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.wordWrapColumn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.wordWrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wordWrapColumn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.wrappingIndent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;same&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;More customizations can be found &lt;a href=&quot;https://code.visualstudio.com/docs/getstarted/settings#_language-specific-editor-settings&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;git-commands-&quot;&gt;Git Commands &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Commit changes&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m 'Simple msg goes here'&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt; &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;
        &lt;ul&gt;
          &lt;li&gt;Sometimes we commit too early and possibly forget to add some files, or you mess up your commit msg format, you want to undo that commit, make additional changes you forgot, stage and commit again. Now this time use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--amend&lt;/code&gt; option!&lt;/li&gt;
          &lt;li&gt;This will take you staging area and uses it for the commit. The same commit msg will pop up and you can update this msg and it will overwrites your previous commit&lt;/li&gt;
          &lt;li&gt;You end up with a single commit, the one amended will &lt;strong&gt;replace&lt;/strong&gt; the results of the first&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Create a new branch&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch bugFix&lt;/code&gt; (Note that this does not set the HEAD at the new branch)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b bugFix&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Combine changes&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Create a special commit that has two unique parents:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge bugFix&lt;/code&gt;
&lt;img src=&quot;/public/files/git_primer/15951758006949.jpg&quot; alt=&quot;git merge bugFix&quot; /&gt;&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;If you want to keep the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bugFix&lt;/code&gt; branch up to date and continue work on it, we can merge the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bugFix&lt;/code&gt; branch. Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bugFix&lt;/code&gt; was an ancestor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; after the above merge, it simply move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bugFix&lt;/code&gt; to the same commit as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout bugFix; git merge master&lt;/code&gt;
&lt;img src=&quot;/public/files/git_primer/15951774331718.jpg&quot; alt=&quot;keep bugFix up to date with master&quot; /&gt;&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;Explanations:
                &lt;ul&gt;
                  &lt;li&gt;Take a set of commits, copy them and paste them down somewhere else. It can be used to make a nice linear sequence of commits and the commit history will be much cleaner.&lt;/li&gt;
                  &lt;li&gt;Take all the changes that were committed on one branch and &lt;strong&gt;reply&lt;/strong&gt; them on a different branch.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase target_branch_to_reply_changes_to&lt;/code&gt;
                &lt;ul&gt;
                  &lt;li&gt;E.g. If you are on branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bugFix&lt;/code&gt; and want to move work from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bugFix&lt;/code&gt; directly onto the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;. That way the commit history will looks like these two features were developed sequentially, when in reality they were developed in parallel.&lt;/li&gt;
                  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout bugFix; git rebase master&lt;/code&gt;
&lt;img src=&quot;/public/files/git_primer/15951781011384.jpg&quot; alt=&quot;rebase bugFix changes to master&quot; /&gt;
                    &lt;ul&gt;
                      &lt;li&gt;Now you can go back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; and do a fast-forward merge to keep the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; up to date: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout master; git merge/rebase bugFix&lt;/code&gt;&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Moving around commits&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;: the symbolic name for the currently checked out commit. It always points to the most recent commit which is reflected in the working tree.&lt;/li&gt;
      &lt;li&gt;Detaching &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;: attach &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; to a commit instead of a branch, e.g. when you checkout a particular commit rather than a branch. Typically you find the commit by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; to find the right hash.
&lt;img src=&quot;/public/files/git_primer/15951786444183.jpg&quot; alt=&quot;detach HEAD&quot; /&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Relative Refs&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;Start from somewhere memorable e.g. branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bugFix&lt;/code&gt; or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;, and move from there
                &lt;ul&gt;
                  &lt;li&gt;moving upwards, 1 commit at a time: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^&lt;/code&gt; (Caret operator)
                    &lt;ul&gt;
                      &lt;li&gt;e.g.
                        &lt;ul&gt;
                          &lt;li&gt;detach head to its parent: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout HEAD^1&lt;/code&gt;, or&lt;/li&gt;
                          &lt;li&gt;checkout to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;’s grandparent: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout master^^&lt;/code&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;moving upwards for &amp;lt;num&amp;gt; commits: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&amp;lt;num&amp;gt;&lt;/code&gt; (Tilde operator)
                    &lt;ul&gt;
                      &lt;li&gt;e.g.
                        &lt;ul&gt;
                          &lt;li&gt;detach head and move upward 4 commits: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout HEAD~4&lt;/code&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Branch forcing:
                &lt;ul&gt;
                  &lt;li&gt;Reassign a branch to a particular commit&lt;/li&gt;
                  &lt;li&gt;E.g. move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch to 3 parents behind HEAD: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -f master HEAD~3&lt;/code&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reversing changes&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Rewriting history&lt;/strong&gt;: revert changes by moving a branch reference backwards in time to an older commit&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Warning&lt;/strong&gt;: This cmd is great for &lt;strong&gt;local branches on your own machine&lt;/strong&gt;, not good for remote branches that others are using!&lt;/li&gt;
          &lt;li&gt;E.g. move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch to the parent of HEAD: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset HEAD^&lt;/code&gt;, or you can achieve this via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;branch forcing&lt;/code&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -f master HEAD^&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Modes
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--soft&lt;/code&gt;
                &lt;ul&gt;
                  &lt;li&gt;does not touch the index file or the working tree at all but resets the head to the given &amp;lt;commit&amp;gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--mixed&lt;/code&gt;
                &lt;ul&gt;
                  &lt;li&gt;default mode, resets the index file but not the working tree, i.e. preserve changes but not marked for commit&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--hard&lt;/code&gt;
                &lt;ul&gt;
                  &lt;li&gt;resets the index and working tree and any changes to tracked files are discarded&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--merge&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--keep&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git revert&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Revert changes and share those reversed changes with others by creating a new commit, whose effect is to revert a particular commit&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Move works around&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;i.e. “Move this commit here, that commit there”&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cherry-pick &amp;lt;commit1&amp;gt; &amp;lt;commit2&amp;gt; &amp;lt;...&amp;gt;&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;A way of saying that you want to copy the provided commits below your current location i.e. below the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;Surely you may be able to achieve the same goal by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cherry-pick&lt;/code&gt; is kinda of magic and easier to achieve this goal…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Interactive rebasing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i target_branch_to_replay_changes_to&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Cover the situation where you don’t know what commits you want: review a series of commits you’re about to rebase&lt;/li&gt;
          &lt;li&gt;Git will open up a UI to show you which commits are about to be copied below the target of the rebase (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target_branch_to_replay_changes_to&lt;/code&gt;).
            &lt;ul&gt;
              &lt;li&gt;You can reorder commits by changing their order in the UI&lt;/li&gt;
              &lt;li&gt;You can choose to completely omit some commits&lt;/li&gt;
              &lt;li&gt;And many more…&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://chris.beams.io/posts/git-commit/ &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://learngitbranching.js.org/?locale=en_US &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Boost.Log Primer</title>
   <link href="/primer/2020/07/12/boost-log-primer/"/>
   <updated>2020-07-12T00:00:00+00:00</updated>
   <id>/primer/2020/07/12/boost-log-primer</id>
   <content type="html">&lt;h1 id=&quot;boost-log-&quot;&gt;Boost Log &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt;

&lt;h2 id=&quot;prepare-the-namespace-aliases&quot;&gt;Prepare the namespace aliases&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expressions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;definitions-&quot;&gt;Definitions &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Log record&lt;/strong&gt;: a single bundle of info that is collected from the app and is a candidate for the log output&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attribute&lt;/strong&gt;: a piece of meta-info that can be used to specialize a log record e.g. ThreadID, Timestamp, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attribute value&lt;/strong&gt;: the actual data acquired from attributes and is attached to a specific log record. Values can have different types&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attribute value visitation&lt;/strong&gt;: a way of processing the attribute value, which involves applying a “visitor” (a function obj) to the attribute value&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Attribute value extraction&lt;/strong&gt;: a way of processing the attribute value when the caller attempts to obtain a reference to the stored value. The caller should know the stored type of the attr value in order to be able to extract it&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Log sink&lt;/strong&gt;: a target to which all log records are fed after being collected from the user’s app&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Log source&lt;/strong&gt;: an entry point for the user’s app to put log records to&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Log filter&lt;/strong&gt;: a predicate that takes a log record and tells whether this record should be kept or discarded&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Log formatter&lt;/strong&gt;: a function obj that generates the final textual output from a log record&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logging core&lt;/strong&gt;: the global entity that maintains connections b/w sources and sinks and applies filters to records. usually used at the logging init&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TLS&lt;/strong&gt;: thread-local storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;architecture-&quot;&gt;Architecture &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h3 id=&quot;three-layer-architecture&quot;&gt;Three-layer architecture&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Data collection layer&lt;/li&gt;
  &lt;li&gt;(Connection layer) Central-hub that interconnects the collection and the processing layers&lt;/li&gt;
  &lt;li&gt;Data processing layer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;visualization&quot;&gt;Visualization&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/files/boost-log-arch.png&quot; alt=&quot;boost-log-arch&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Arrows show the info flow direction
    &lt;ul&gt;
      &lt;li&gt;the left-most is our application (log sources)&lt;/li&gt;
      &lt;li&gt;the right-most is the final storage if any
        &lt;ul&gt;
          &lt;li&gt;storage is optional because the processed log may include some actions without actual data persisting&lt;/li&gt;
          &lt;li&gt;e.g. the app can emit a special log record that will be processed s.t. the user sees the error msg as a tool-tip notification over the app icon and hears an alarming sound&lt;/li&gt;
          &lt;li&gt;this allows boost log be used not only for classic logging, but also to indicate some important events to the app user and accumulate statistical data&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;log-sources&quot;&gt;Log sources&lt;/h3&gt;

&lt;p&gt;A log source is an entity that initiates logging by constructing a log record. In general, boost log lib does not require the use of loggers to write logs. But loggers are the most common kind of log sources.&lt;/p&gt;

&lt;p&gt;In the left-most of the arch, our application &lt;strong&gt;emits log records&lt;/strong&gt; with the help of &lt;strong&gt;loggers&lt;/strong&gt;, which are special obj that provide streams to format msgs that will eventually be put to log&lt;/p&gt;

&lt;p&gt;Boost log lib provides many different logger types and you can craft your own by extending the existing ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loggers&lt;/strong&gt; are designed as a mixture of distinct features s.t. they can be used in combination.&lt;/p&gt;

&lt;p&gt;You can embed the logger into your application classes or create and use a global instance of the logger.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Embedding a logger provides a way to differentiate logs from different instances of the class&lt;/li&gt;
  &lt;li&gt;A single global logger instance is more convenient like in functional-style programming&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;attributes-and-attribute-values&quot;&gt;Attributes and attribute values&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;log source&lt;/strong&gt; must pass all &lt;strong&gt;data&lt;/strong&gt; associated with the log record to the &lt;strong&gt;logging core&lt;/strong&gt;. This data is represented with a set of named attributes and each one is a function whose result is what we call “attribute values”. The attribute values are processed on further stages.&lt;/p&gt;

&lt;p&gt;An example attribute is a function that returns the current timestamp, and its result (i.e. its value) is the particular time point.&lt;/p&gt;

&lt;p&gt;We can classify attributes into 3 categories, &lt;strong&gt;ordered by increasing priority&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Global attributes&lt;/li&gt;
  &lt;li&gt;Thread-specific attributes&lt;/li&gt;
  &lt;li&gt;Source-specific attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;global and thread-specific&lt;/strong&gt; attributes are maintained by the logging core, as shown in the architecture figure, and therefore these attributes need not be passed by the log source in order to initiate logging.&lt;/p&gt;

&lt;p&gt;The global attributes are attached to any log record ever made.&lt;/p&gt;

&lt;p&gt;Thread-specific attributes are attached only to the records made from the thread in which they were registered in the set.&lt;/p&gt;

&lt;p&gt;Source-specific attributes are maintained by the source that initiates logging, and attached only to the records being made through that particular source.&lt;/p&gt;

&lt;p&gt;When a log source &lt;strong&gt;initiates logging&lt;/strong&gt;, it acquire &lt;strong&gt;attribute values&lt;/strong&gt; from all three attribute sets. These values form a single set of named attribute values, and is then processed further.&lt;/p&gt;

&lt;p&gt;It’s possible that a &lt;strong&gt;same-named attribute&lt;/strong&gt; that appear in several attribute sets. Such conflicts are solved on &lt;strong&gt;priority&lt;/strong&gt; basis. The global attributes have the least priority and the source-specific attributes have the highest.&lt;/p&gt;

&lt;h3 id=&quot;logging-core-and-filtering&quot;&gt;Logging core and filtering&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Filtering&lt;/strong&gt;: After the &lt;strong&gt;logging source&lt;/strong&gt; composed the named attribute values set, the &lt;strong&gt;logging core&lt;/strong&gt; decides if this log record is going to be processed in sinks.&lt;/p&gt;

&lt;p&gt;Two layers of filtering:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Global filtering&lt;/strong&gt; is applied first within the logging core and allows quickly wiping away unneeded log records&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sink-specific filtering&lt;/strong&gt; is applied second within each sink separately and allows directing log records to particular sinks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is not significant where the log record comes from (i.e. regardless the logging source that emit them), the filtering relies solely on the set of named attribute values attached to the record.&lt;/p&gt;

&lt;p&gt;For a given log record, the filtering is &lt;strong&gt;performed only once&lt;/strong&gt; and only those attribute values that are attached to the record before the filtering starts can participate in filtering. We say this because some named attribute values, like the “log record message”, are typically &lt;strong&gt;attached to the log record after the filtering is done&lt;/strong&gt;, which means these values cannot be used in filters!&lt;/p&gt;

&lt;h3 id=&quot;sinks-and-formatting&quot;&gt;Sinks and formatting&lt;/h3&gt;

&lt;p&gt;A log record that passes filtering for &lt;strong&gt;at least one sink&lt;/strong&gt; is considered as &lt;strong&gt;consumable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If the sink supports formatted output, this is the point when log msg formatting takes place. Note that formatting is done on a per-sink basis s.t. each sink can have its own specific output format.&lt;/p&gt;

&lt;p&gt;The formatted msg along with the composed set of named attribute values are passed to the accepting sinks.&lt;/p&gt;

&lt;p&gt;As shown in the arch figure, a sink consists of two parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sink frontend&lt;/li&gt;
  &lt;li&gt;Sink backend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The division is made &lt;strong&gt;to extract the common functionality of sinks&lt;/strong&gt; like filtering, formatting, thread sync &lt;strong&gt;into separate entities&lt;/strong&gt; (frontends).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sink frontends&lt;/strong&gt; are provided by the lib and usually users won’t have to reimplement them.
&lt;strong&gt;Sink backends&lt;/strong&gt; are one of the most likely places for extending the library. The backends do the actual data processing.&lt;/p&gt;

&lt;p&gt;There can be multiple sinks in a single app.&lt;/p&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a sink that stores processed log records into a file&lt;/li&gt;
  &lt;li&gt;another sink that sends the processed log records over the network to the remote log processing node&lt;/li&gt;
  &lt;li&gt;another sink that puts record msgs into tool-tip notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The lib also provides most commonly used sink backends.&lt;/p&gt;

&lt;h2 id=&quot;tutorial-&quot;&gt;Tutorial &lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;h3 id=&quot;trivial-logging&quot;&gt;Trivial logging&lt;/h3&gt;

&lt;p&gt;Necessary headers:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;boost/log/trivial.hpp&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOST_LOG_TRIVIAL&lt;/code&gt; macro accepts a severity level and results in a stream-like objects that support insertion operator. The log msg will be printed on the console.&lt;/p&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;boost/log/trivial.hpp&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOST_LOG_TRIVIAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A trace severity message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOST_LOG_TRIVIAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A debug severity message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each log record in the output msg contains a timestamp, a thread ID and the severity level&lt;/li&gt;
  &lt;li&gt;It is safe to write logs from multiple threads concurrently and log msgs will not be corrupted&lt;/li&gt;
  &lt;li&gt;Filtering can be applied&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;add-filters-to-the-trivial-logging&quot;&gt;Add filters to the trivial logging&lt;/h4&gt;

&lt;p&gt;You will normally want to apply filters to output only significant records and ignore the rest.&lt;/p&gt;

&lt;p&gt;Let’s do this by setting a &lt;strong&gt;global filter&lt;/strong&gt; in the &lt;strong&gt;logging core&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_filter&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trivial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;severity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trivial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOST_LOG_TRIVIAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A trace severity message will be ignored&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOST_LOG_TRIVIAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A debug severity message will be ignored&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOST_LOG_TRIVIAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;An informational severity message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we are setting up a global filter, we have to acquire the logging core instance using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging::core::get()&lt;/code&gt;. It returns a pointer to the core singleton instance.&lt;/p&gt;

&lt;p&gt;The filter in this example is built as a &lt;a href=&quot;https://www.boost.org/doc/libs/release/libs/phoenix/doc/html/index.html&quot;&gt;Boost.Phoenix&lt;/a&gt; lambda expression. The left argument is a placeholder that describes the attribute to be checked. The placeholder along with &lt;strong&gt;the ordering operator&lt;/strong&gt; creates &lt;strong&gt;a function object&lt;/strong&gt; that will be called by the logging core to filter log records and only records that pass the predicate will end up on the console.&lt;/p&gt;

&lt;h4 id=&quot;setting-up-sinks&quot;&gt;Setting up sinks&lt;/h4&gt;

&lt;p&gt;The lib contains a default sink that is used as a fallback when the user did not set up any sinks. This is why our previous trivial logging example worked. This default sink always print log records to the console in a fixed format and is mostly provided to allow trivial logging to be used right away.&lt;/p&gt;

&lt;p&gt;Sometimes trivial logging does not provide enough flexibility like when one wants to apply complex log processing logic. You need to &lt;strong&gt;construct&lt;/strong&gt; logging sinks and &lt;strong&gt;register&lt;/strong&gt; them with the logging core in order to customize this. This only needs to be done once somewhere in the startup code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note that once you add any sinks to the logging core, the default sink will no longer be used!&lt;/strong&gt; You will still be able to use trivial logging macros though.&lt;/p&gt;

&lt;h5 id=&quot;logging-to-files&quot;&gt;Logging to files&lt;/h5&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_file_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_filter&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trivial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;severity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trivial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_file_log&lt;/code&gt; function initializes a logging sink that stores log records into a text file. You can also customize it with additional parameters in a named form:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_file_log&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sample_%N.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// file name pattern&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotation_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// rotate files every 10 MiB&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_based_rotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotation_at_time_point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or at midnight&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[%TimeStamp%]: %Message%&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// log record format&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-loggers-and-writing-logs&quot;&gt;Creating loggers and writing logs&lt;/h3&gt;

&lt;p&gt;The logger object is a logging source that can be used to emit logs records.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;trivial logging&lt;/strong&gt; example we seen above uses the logger provided by the lib and is used behind the scenes through the macro.&lt;/p&gt;

&lt;p&gt;Unlike sinks, logging sources (loggers) need not be registered since they interact with the logging core directly.&lt;/p&gt;

&lt;p&gt;Boost log lib provides two types of loggers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thread-safe loggers&lt;/li&gt;
  &lt;li&gt;Non-thread-safe loggers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is safe for different threads to write logs through &lt;strong&gt;different instances&lt;/strong&gt; of the non-thread-safe logger, which means a separate logger for each thread to write logs.&lt;/p&gt;

&lt;p&gt;The thread-safe logger can be accessed from different threads concurrently and the thread-safety is protected by using locks, which means worse performance incase of intense logging compared to the non-thread-safe counterparts.&lt;/p&gt;

&lt;p&gt;Regardless of the thread safety, all lib-provided loggers are default and copy-constructible and support swapping, so there should be no problem in making a logger a member of your class.&lt;/p&gt;

&lt;p&gt;The lib provides many loggers with different features, such as severity and channel support. These features can be combined with each other in order to construct more complex loggers.&lt;/p&gt;

&lt;h4 id=&quot;global-logger-object&quot;&gt;Global logger object&lt;/h4&gt;

&lt;p&gt;In case you cannot put a logger into your class (suppose you don’t have one), the library provides a way of &lt;strong&gt;declaring global loggers&lt;/strong&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Remember that we defined namespace src = boost::log::sources;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BOOST_LOG_INLINE_GLOBAL_LOGGER_DEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger_mt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_logger&lt;/code&gt; is a user-defined tag name that will be used later to retrieve the global logger object.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logger_mt&lt;/code&gt; is the logger type. Any logger type provided by the lib or defined by the user can participate in such declaration. But note that you will normally want to use thread-safe loggers in a multi-threaded app as global logger obj since the logger will have a single instance.&lt;/p&gt;

&lt;p&gt;In other parts of your app, you can acquire the global logger like this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger_mt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lg&lt;/code&gt; will refer to the one and only instance of the global logger throughout the application. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; function is thread-safe and hence you don’t need additional synchronization around it.&lt;/p&gt;

&lt;h4 id=&quot;writing-logs&quot;&gt;Writing logs&lt;/h4&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_ostream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open_record&lt;/code&gt; function determines if the record to be constructed is going to be consumed by at least one sink, i.e. filtering is applied at this stage.&lt;/p&gt;

&lt;p&gt;If the record is to be consumed, the function returns a valid record obj and we can then fill the record msg into it. The record processing can be completed with the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push_record&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It seems complicated to use the logger even for the most simple log message… But we can easily wrap them into a macro! The log record above can be written like this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BOOST_LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOST_LOG&lt;/code&gt; macro, along with other similar ones, is defined by the library.&lt;/p&gt;

&lt;h3 id=&quot;adding-more-info-to-log-with-attributes&quot;&gt;Adding more info to log with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Attributes&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;As said above, each log record can have many named attribute values attached. Attributes contain essential information about the log emit condition, like the line number in the code, executable name, current time, etc.&lt;/p&gt;

&lt;p&gt;An attribute may behave as a &lt;strong&gt;value generator&lt;/strong&gt;, i.e. it may return a different value for each log record it is involved in. As soon as the attribute generates the value, the value becomes independent from the creator and can be used by filters, formatters and sinks.&lt;/p&gt;

&lt;p&gt;In order to properly use attributes in your code, you need to know its &lt;strong&gt;name&lt;/strong&gt; and &lt;strong&gt;type&lt;/strong&gt; (or at least a set of types it may have).&lt;/p&gt;

&lt;p&gt;As discussed in the previous sections, attributes can be classified into 3 scopes: global, thread-specific, and source-specific. When a log record is made, attribute values from these 3 sets are joined into a single set and passed to sinks. This implies that &lt;strong&gt;the origin of the attribute makes no difference for sinks&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Any attribute can be registered in any scope. An attribute is given a unique name upon registration in order to make it possible to search for it. As mentioned earlier, conflicts resolution is based on priority.&lt;/p&gt;

&lt;h4 id=&quot;attribute-registration&quot;&gt;Attribute registration&lt;/h4&gt;

&lt;p&gt;There are common attributes that are likely to be used in nearly any application.&lt;/p&gt;

&lt;p&gt;Here we take the log record counter attribute and the timestamp attribute for example. Such commonly used attributes can be registered with a single function call:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_common_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Common attributes like “LineID”, “Timestamp”, “ProcessID”, and “ThreadID” are registered globally.&lt;/p&gt;

&lt;p&gt;Some special attributes are registered automatically for you on logger construction.&lt;/p&gt;

&lt;p&gt;E.g. the severity_logger registers a source-specific attribute “Severity” which can be used to add a level of emphasis for different log records.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOST_LOG_SEV&lt;/code&gt; macro acts pretty much like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOST_LOG&lt;/code&gt; except that it takes an additional argument for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open_record&lt;/code&gt; method of the logger.&lt;/p&gt;

&lt;p&gt;Usually we want to register a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;named_scope&lt;/code&gt; attribute so that we can store scope names in log for every log record.&lt;/p&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// some where in logger init&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_global_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scope&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;named_scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// some where in usage&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;named_scope_logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOST_LOG_NAMED_SCOPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;named_scope_logging&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;severity_logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;severity_level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;BOOST_LOG_SEV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello from the function named_scope_logging!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another useful attribute for performance analysis is what we call the “Timeline” attribute.&lt;/p&gt;

&lt;p&gt;After registered the “Timeline” attribute e.g. through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BOOST_LOG_SCOPED_THREAD_ATTR(&quot;Timeline&quot;, attrs::timer());&lt;/code&gt;, every log record after this will contain the “Timeline” attribute with a high precision time duration passed since the attribute was registered.&lt;/p&gt;

&lt;p&gt;Based on these readings, one will be able to detect which parts of the code require more or less time to execute. This attribute will be unregistered upon leaving the scope that defined it.&lt;/p&gt;

&lt;h3 id=&quot;log-record-formatting&quot;&gt;Log record formatting&lt;/h3&gt;

&lt;p&gt;After adding/registering attributes, you need to specify a formatter that will use these attribute values in order to have them reach the output.&lt;/p&gt;

&lt;p&gt;As we have seen in the tutorial about writing logs to files, we defined a formatter that used the “TimeStamp” and “Message” attributes.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_file_log&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sample_%N.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotation_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_based_rotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sinks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotation_at_time_point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[%TimeStamp%]: %Message%&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_filter&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trivial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;severity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trivial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format&lt;/code&gt; parameter allows us to specify the format of the log record. If you want to set up sinks manually, you can achieve this by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_formatter&lt;/code&gt; member function of the sink frontends.&lt;/p&gt;

&lt;h4 id=&quot;lambda-style-formatters&quot;&gt;Lambda-style formatters&lt;/h4&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LineID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &amp;lt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trivial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;severity&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;gt; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smessage&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream&lt;/code&gt; is a placeholder for the stream to format the record in. The insertion arguments like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attr&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt; are manipulators that define what should be stored in the stream. Note that it is possible to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;severity&lt;/code&gt; with the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expr::attr&amp;lt; logging::trivial::severity_level &amp;gt;(&quot;Severity&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is recommended to define placeholders like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;severity&lt;/code&gt; for user’s attributes since it provides simpler syntax in the template expressions and makes coding less error-prone.&lt;/p&gt;

&lt;h4 id=&quot;boostformat-style-formatters&quot;&gt;Boost.Format-style formatters&lt;/h4&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_formatter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%1%: &amp;lt;%2%&amp;gt; %3%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LineID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trivial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;severity&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smessage&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format&lt;/code&gt; placeholder accepts the format string like printf with positional specs of all arguments being formatted.&lt;/p&gt;

&lt;p&gt;Note that &lt;strong&gt;only positional format is currently supported&lt;/strong&gt;, which means you cannot have all features in the Boost.Format.&lt;/p&gt;

&lt;p&gt;When you call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format(s)&lt;/code&gt; where s is the format-string, it constructs an obj that parses the format string and looks for all directives in it and prepares internal structures for the next step.&lt;/p&gt;

&lt;p&gt;Then you feed variables into the formatter.&lt;/p&gt;

&lt;p&gt;Once all args have been fed you can dump the format obj to a stream.&lt;/p&gt;

&lt;p&gt;All in all, the format class translates a format-string into operations on an internal stream, and finally returns the result of the formatting as a string or directly into an output stream.&lt;/p&gt;

&lt;h4 id=&quot;specialized-formatters&quot;&gt;Specialized formatters&lt;/h4&gt;

&lt;p&gt;These specialized formatters are designed for a number of special types like date, time, named scope. They provide extended control over the formatted values.&lt;/p&gt;

&lt;p&gt;E.g. You can describe date and time format with a format string compatible with Boost.DateTime&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format_date_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posix_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TimeStamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%Y-%m-%d %H:%M:%S&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &amp;lt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trivial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;severity&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;gt; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smessage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;string-templates-as-formatters&quot;&gt;String templates as formatters&lt;/h4&gt;

&lt;p&gt;In some contexts, textual templates are accepted as formatters and the lib init support code is invoked to parse the template and reconstruct the appropriate formatter.&lt;/p&gt;

&lt;p&gt;It’s suitable for simple formatting needs but keep in mind when using this approach there are a number of caveats and you should be careful if you want to use it in a complex formatting need.&lt;/p&gt;

&lt;p&gt;E.g.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[%TimeStamp%]: %Message%&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format&lt;/code&gt; now accepts a format string template that contain a number of placeholders enclosed with percent signs. Each placeholder contain an attribute value name to insert instead of the placeholder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note that such format templates are not accepted by sink backends in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_formatter&lt;/code&gt; method&lt;/strong&gt;! You need to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_formatter&lt;/code&gt; to parse textual template into a formatter function!&lt;/p&gt;

&lt;h4 id=&quot;custom-formatting-functions&quot;&gt;Custom formatting functions&lt;/h4&gt;

&lt;p&gt;You can add a custom formatter to a sink backend that supports formatting. The formatter is actually a function obj that supports the following signature:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// CharT is the target character type&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record_view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basic_formatting_ostream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The formatter will be invoked whenever a log record view &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rec&lt;/code&gt; passes filtering and is to be stored in the log.&lt;/p&gt;

&lt;p&gt;I tried to customize the ThreadID attribute with the lambda style formatter but got no luck, FYI &lt;a href=&quot;https://sourceforge.net/p/boost-log/discussion/710021/thread/e90226f5/&quot;&gt;here’s a pretty old discussion about formatting ThreadID&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.boost.org/doc/libs/1_63_0/libs/log/doc/html/index.html &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.boost.org/doc/libs/1_63_0/libs/log/doc/html/log/defs.html &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.boost.org/doc/libs/1_63_0/libs/log/doc/html/log/design.html &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://www.boost.org/doc/libs/1_63_0/libs/log/doc/html/log/tutorial.html &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>GoogleTest Primer</title>
   <link href="/primer/2020/06/10/googletest-primer/"/>
   <updated>2020-06-10T00:00:00+00:00</updated>
   <id>/primer/2020/06/10/googletest-primer</id>
   <content type="html">&lt;h1 id=&quot;googletest--primer-gtest&quot;&gt;GoogleTest &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Primer (gtest)&lt;/h1&gt;

&lt;h2 id=&quot;what-is-googletest&quot;&gt;What is GoogleTest&lt;/h2&gt;

&lt;p&gt;Googletest is a testing framework to help write better C++ code&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;supports any kind of tests, not just unit tests&lt;/li&gt;
  &lt;li&gt;based on the popular xUnit (e.g. JUnit, PyUnit) architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-defines-a-good-test&quot;&gt;What defines a “good” test&lt;/h2&gt;

&lt;p&gt;A good test should:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Be independent and repeatable&lt;/li&gt;
  &lt;li&gt;Be well-organized and reflect the structure of the tested code
    &lt;ul&gt;
      &lt;li&gt;=&amp;gt; gtest groups related tests into &lt;strong&gt;test suits&lt;/strong&gt; that can share data and subroutines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Be portable and reusable =&amp;gt; platform neutral, compiler neutral&lt;/li&gt;
  &lt;li&gt;Verbose diagnostic information when test fail
    &lt;ul&gt;
      &lt;li&gt;=&amp;gt; gtest does not stop at the first test failure but stops the current test and continues with the rest tests if any.
        &lt;ul&gt;
          &lt;li&gt;=&amp;gt; enable users to detect and fix multiple bugs in a single run-edit-compile cycle&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Liberate test writers from housekeeping chores and focus on the test content
    &lt;ul&gt;
      &lt;li&gt;=&amp;gt; gtest automatically keeps track of all tests defined and does not require users to enumerate them in order to run them&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Be fast
    &lt;ul&gt;
      &lt;li&gt;=&amp;gt; gtest enable users to &lt;strong&gt;reuse shared resources across tests&lt;/strong&gt; and pay for the setup/tear-down only once, without making tests depend on each other&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-nomenclature&quot;&gt;The nomenclature&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Test&lt;/strong&gt;: gtest’s term for “Test Case” in ISTQB &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Exercise a particular program path with specific input values and verify the results&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test Suit&lt;/strong&gt;: a group of related tests&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test Program&lt;/strong&gt;: contains one or more test suits&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;basic-concepts&quot;&gt;Basic Concepts&lt;/h2&gt;

&lt;p&gt;The usage of GoogleTest starts with &lt;strong&gt;writing assertions&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An assertion is a statement that checks whether a condition is true or false.&lt;/li&gt;
  &lt;li&gt;Assertion result can be &lt;em&gt;success&lt;/em&gt;, &lt;em&gt;nonfatal failure&lt;/em&gt;, &lt;em&gt;fatal failure&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;A fatal failure aborts the current function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tests&lt;/strong&gt; use assertions to verify the tested code’s behavior. If a test crashes or has a failed assertion, then this test fails.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Test Suit&lt;/strong&gt; contains one or many tests. It’s usually a group of tests that reflect the structure of the tested code. Tests within a test suite can share &lt;strong&gt;common resources&lt;/strong&gt; (objects, subroutines) by putting them into a &lt;em&gt;test fixture&lt;/em&gt; class&lt;/p&gt;

&lt;h3 id=&quot;assertions&quot;&gt;Assertions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;GTest assertions are &lt;strong&gt;macros&lt;/strong&gt; that resemble function calls.&lt;/li&gt;
  &lt;li&gt;When assertion fails, gtest prints the assertion’s source file, line number, along with a failure message (user can supply a custom failure message which will be appended to gtest’s msg)&lt;/li&gt;
  &lt;li&gt;Two types of assertions that differ in their effects on the code being tested
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_*&lt;/code&gt; generate fatal failures when they fail and abort the current function. The abortion may skip clean-up code that comes after it and hence may cause a space leak! (particularly if you will also use a heap checker)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPECT_*&lt;/code&gt; generate non-fatal failures, which don’t abort the current function and allow more than one failure to be reported in a test&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Syntax
    &lt;pre&gt;&lt;code class=&quot;language-Cpp&quot;&gt;  ASSERT_EQ(x.size(), y.size()) &amp;lt;&amp;lt; &quot;Vectors x and y are of unequal length&quot;; // Anything that can be streamed to an ostream can be streamed to an assertion macro
    
  for (int i = 0; i &amp;lt; x.size(); ++i) {
    EXPECT_EQ(x[i], y[i]) &amp;lt;&amp;lt; &quot;Vectors x and y differ at index &quot; &amp;lt;&amp;lt; i;
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Basic Assertions&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Fatal Assertions&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Nonfatal Assertions&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Explaination&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_TRUE(cond)&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPECT_TRUE(cond)&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cond&lt;/code&gt; is true&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_FALSE(cond)&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPECT_FALSE(cond)&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cond&lt;/code&gt; is false&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;Binary Comparisons
    &lt;ul&gt;
      &lt;li&gt;N.B. value arguments (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val2&lt;/code&gt;) must &lt;strong&gt;be comparable&lt;/strong&gt; by the assertion’s comparison operator (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, etc.) or you’ll get a compilation error.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_EQ(val1, val2)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_NE(val1, val2)&lt;/code&gt;, etc.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPECT_EQ(val1, val2)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPECT_NE(val1, val2)&lt;/code&gt;, etc.&lt;/li&gt;
      &lt;li&gt;You may need to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_TRUE&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPECT_TRUE&lt;/code&gt; to assert the equality of two objects of an user-defined type based on the Google C++ Style Guide
        &lt;ul&gt;
          &lt;li&gt;but when possible, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_EQ&lt;/code&gt; is preferred to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_EQ(val1 == val2)&lt;/code&gt; since it tells you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val2&lt;/code&gt;’s values on failure&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/googletest/blob/master/googletest/docs/primer.md#string-comparison&quot;&gt;String Comparisons&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_STREQ()&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_EQ&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;to assert that a C string is NULL, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_STREQ(c_str, NULL)&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_EQ(c_str, nullptr)&lt;/code&gt; if c++11 is supported&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pointer Comparisons
    &lt;ul&gt;
      &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_EQ(ptr, nullptr)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_NE(ptr, nullptr)&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*_EQ(ptr, NULL)&lt;/code&gt;. (because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullptr&lt;/code&gt; is typed)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Floating point Comparisons
    &lt;ul&gt;
      &lt;li&gt;use the floating point variations of some of these macros in order to avoid rounding problems (see &lt;a href=&quot;https://github.com/google/googletest/blob/master/googletest/docs/advanced.md&quot;&gt;here&lt;/a&gt; for more information)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;simple-tests&quot;&gt;Simple Tests&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST()&lt;/code&gt; macro to define and name a test function
    &lt;ul&gt;
      &lt;li&gt;test functions are ordinary C++ functions that don’t return a value&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use various gtest assertions we discussed above in the test function, along with any other valid C++ statements you want to use&lt;/li&gt;
  &lt;li&gt;Test result is determined by the assertions.
    &lt;ul&gt;
      &lt;li&gt;if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Arguments
    &lt;ul&gt;
      &lt;li&gt;first argument is the test suite name&lt;/li&gt;
      &lt;li&gt;second argument is the test’s name within the test suite&lt;/li&gt;
      &lt;li&gt;both should be valid C++ identifiers and should not contain any underscores&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Test’s &lt;strong&gt;full name&lt;/strong&gt; consists of its containing test suite and its individual test name&lt;/li&gt;
  &lt;li&gt;Tests from different test suites can have the same individual name&lt;/li&gt;
  &lt;li&gt;Test results are grouped by test suites, and logically related tests should be in the same test suite.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Naming convention for test suits and tests should follow the same convention for naming functions and classes&lt;/p&gt;

    &lt;p&gt;e.g.&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-Cpp&quot;&gt; TEST(TestSuiteName, TestName) {
   ... test body ...
 }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;test-fixtures&quot;&gt;Test Fixtures&lt;/h3&gt;

&lt;p&gt;Enable users to use the same data configuration for multiple tests.&lt;/p&gt;

&lt;h4 id=&quot;steps-to-create-a-fixture&quot;&gt;Steps to create a fixture&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Derive a class from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::testing::Test&lt;/code&gt; and start its body with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; since we want to access the fixture members from sub-classes&lt;/li&gt;
  &lt;li&gt;Inside the class, declare any objects you plan to use&lt;/li&gt;
  &lt;li&gt;If necessary, write a default constructor or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetUp()&lt;/code&gt; function to prepare the objects for each test. &lt;strong&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;override&lt;/code&gt; in C++11 to make sure you spelled SetUp correctly!&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If necessary, write a destructor or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TearDown()&lt;/code&gt; function to release any resources you allocated in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetUp()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If needed, define subroutines for your tests to share&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;how-to-use-a-fixture&quot;&gt;How to use a fixture&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_F()&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST()&lt;/code&gt; as it allows you to access objects and subroutines in the test fixture&lt;/li&gt;
  &lt;li&gt;the first argument defines the test suite name, and it must be the name of the test fixture class&lt;/li&gt;
  &lt;li&gt;you must first define the test fixture class before you can actually use it in your tests! or you will get the compiler error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtual outside class declaration&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;gtest will create a fresh test fixture at runtime for each test defined with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_F()&lt;/code&gt;, then
    &lt;ul&gt;
      &lt;li&gt;immediately initialize it via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetUp()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;run the test, clean up by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TearDown()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;delete the test fixture&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Note that different tests in the same suite have different test fixture objects, and gtest always delete a test fixture before it creates the next one
    &lt;ul&gt;
      &lt;li&gt;gtest does not reuse the same test fixture for multiple tests&lt;/li&gt;
      &lt;li&gt;any changes one test makes to the fixture do not affect other tests&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Naming convention for fixture classes are: append the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test&lt;/code&gt; to the class name. e.g. give it the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FooTest&lt;/code&gt; if you want to test class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;e.g.&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-Cpp&quot;&gt; class QueueTest : public ::testing::Test {
  protected:
   void SetUp() override {
      q1_.Enqueue(1);
      q2_.Enqueue(2);
      q2_.Enqueue(3);
   }
    
   // void TearDown() override {}
    
   Queue&amp;lt;int&amp;gt; q0_;
   Queue&amp;lt;int&amp;gt; q1_;
   Queue&amp;lt;int&amp;gt; q2_;
 };
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-Cpp&quot;&gt; TEST_F(QueueTest, IsEmptyInitially) {
   EXPECT_EQ(q0_.size(), 0);
 }
    
 TEST_F(QueueTest, DequeueWorks) {
   int* n = q0_.Dequeue();
   EXPECT_EQ(n, nullptr);
    
   n = q1_.Dequeue();
   ASSERT_NE(n, nullptr);
   EXPECT_EQ(*n, 1);
   EXPECT_EQ(q1_.size(), 0);
   delete n;
    
   n = q2_.Dequeue();
   ASSERT_NE(n, nullptr);
   EXPECT_EQ(*n, 2);
   EXPECT_EQ(q2_.size(), 1);
   delete n;
 }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;invoking-the-tests&quot;&gt;Invoking the tests&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_F()&lt;/code&gt; implicitly register their tests with gtest&lt;/li&gt;
  &lt;li&gt;You can run them with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN_ALL_TESTS()&lt;/code&gt;, which returns 0 if all the tests are successful or 1 otherwise.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN_ALL_TESTS()&lt;/code&gt; runs all tests in your link unit and they can be from different test suites, or even different source files&lt;/li&gt;
  &lt;li&gt;You should call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN_ALL_TESTS()&lt;/code&gt; only once! Calling it more than once conflicts with some advanced gtest features and thus is not supported&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;behind-the-scenes-the-run_all_tests-macro&quot;&gt;Behind the scenes, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN_ALL_TESTS()&lt;/code&gt; macro:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Saves the state of all gtest flags&lt;/li&gt;
  &lt;li&gt;Creates a test fixture object for the first test&lt;/li&gt;
  &lt;li&gt;Initializes it via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetUp()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Runs the test on the fixture object&lt;/li&gt;
  &lt;li&gt;Cleans up the fixture via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TearDown()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Deletes the fixture&lt;/li&gt;
  &lt;li&gt;Restores the state of all gtest flags&lt;/li&gt;
  &lt;li&gt;Repeats the above steps for the next test, until all tests have run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If a fatal failure happens, the subsequent steps will be skipped!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;writing-the-main-function&quot;&gt;Writing the main() function&lt;/h3&gt;

&lt;p&gt;Most users should not need to write their own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function and instead they should link with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gtest_main()&lt;/code&gt;, which defines a suitable entry point.&lt;/p&gt;

&lt;p&gt;When you want to do something before the tests that cannot be expressed within the framework of fixtures and test suits, then you can consider writing your own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;If you write your own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function, it should return the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN_ALL_TESTS()&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;See the starter code &lt;a href=&quot;https://github.com/google/googletest/blob/master/googletest/docs/primer.md#writing-the-main-function&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;advanced-gtest-topics&quot;&gt;Advanced gtest topics&lt;/h2&gt;

&lt;h3 id=&quot;explicit-success-and-failure-macros&quot;&gt;Explicit Success and Failure macros&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUCCEED()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAIL()&lt;/code&gt; do not actually test a value or expression and they generate a success or failure directly. They supports streaming of custom &lt;strong&gt;messages&lt;/strong&gt; into them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUCCEED()&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;it &lt;strong&gt;does not&lt;/strong&gt; make the overall test succeed and a test is considered successful only if none of its assertions fail during its execution&lt;/li&gt;
      &lt;li&gt;it is purely documentary and currently does not generate any user-visible output&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAIL()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD_FAILURE()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD_FAILURE_AT()&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAIL()&lt;/code&gt; generates a fatal failure&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD_FAILURE()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ADD_FAILURE_AT()&lt;/code&gt; generate nonfatal failure&lt;/li&gt;
      &lt;li&gt;they are useful when the control flow (rather than the boolean expression) determines the test’s sucecss or failure&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAIL()&lt;/code&gt; can only be used in functions that return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;e.g.&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-Cpp&quot;&gt;  switch(expression) {
    case 1:
       ... some checks ...
    case 2:
       ... some other checks ...
    default:
       FAIL() &amp;lt;&amp;lt; &quot;We shouldn't get here.&quot;;
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exception-assertions&quot;&gt;Exception Assertions&lt;/h3&gt;

&lt;p&gt;These assertions are for verifying that a piece of code throws or does not throw an exception of the given type.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Fatal&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Nonfatal&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Explaination&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_THROW(statement, exception_type)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPECT_THORW(statement, exception_type)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statement&lt;/code&gt; throws an exception of the given type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_ANY_THROW(statement)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPECT_ANY_THROW(statement)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statement&lt;/code&gt; throws an exception of any type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASSERT_NO_THROW(statement)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPECT_NO_THROW(statement)&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;statement&lt;/code&gt; does not throw any exception&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;value-parameterized-tests&quot;&gt;Value-Parameterized Tests&lt;/h3&gt;

&lt;p&gt;Enable users to test code with different parameters without writing multiple copies of the same test.&lt;/p&gt;

&lt;h4 id=&quot;howto&quot;&gt;HowTo&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;define a fixture class that derived from both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing::Test&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing::WithParamInterface&amp;lt;T&amp;gt;&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; is the type of your parameter values. &lt;strong&gt;For convenience&lt;/strong&gt;, you can just derive the fixture class from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testing::TestWithParam&amp;lt;T&amp;gt;&lt;/code&gt;, which itself is derived from both the required classes. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; can be any copyable type and if it is a raw pointer, you are responsible for managing the lifespan of the pointed values.&lt;/li&gt;
  &lt;li&gt;If your test fixture defines &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetUpTestSuite()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TearDownTestSuite()&lt;/code&gt; they must be declared &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; in order to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_P&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEST_P&lt;/code&gt; macro to define as many test patterns using this fixture as you want&lt;/li&gt;
  &lt;li&gt;Inside the test, you can access the parameter by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetParam()&lt;/code&gt; method of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TestWithParam&amp;lt;T&amp;gt;&lt;/code&gt; class&lt;/li&gt;
  &lt;li&gt;You can then instantiate the test suite with any set of parameters using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSTANTIATE_TEST_SUITE_P()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You &lt;strong&gt;must&lt;/strong&gt; place the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSTANTIATE_TEST_SUITE_P()&lt;/code&gt; statement at global or namespace scope, rather than function scope.&lt;/p&gt;

    &lt;p&gt;e.g.&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-Cpp&quot;&gt; INSTANTIATE_TEST_SUITE_P(InstantiationName,
                          FooTest,
                          testing::Values(&quot;meeny&quot;, &quot;miny&quot;, &quot;moe&quot;));
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://github.com/google/googletest/blob/master/googletest/docs/primer.md &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;https://glossary.istqb.org/en/search/test%20case &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Talk UI: A Multi-Modal, Conversational Interface for UI Prototyping</title>
   <link href="/projects/2020/05/23/talkui/"/>
   <updated>2020-05-23T00:00:00+00:00</updated>
   <id>/projects/2020/05/23/talkui</id>
   <content type="html">&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://niwatori.io/&quot;&gt;Hongyi Zhang&lt;/a&gt;, &lt;a href=&quot;https://mxcao.me/&quot;&gt;Mengxin Cao&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/chewrongkang/&quot;&gt;Ron Chew&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/T39Fwn_G0DI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;UI designers have long been &lt;em&gt;sketching&lt;/em&gt; to realize the interfaces they have in mind for prototyping. However, there is still much that can be done to make designers’ life easier. Current UI design tools are time-consuming and repetitive: drawing sets of graphics and widgets, then specifying their interactions and behaviors often requires a large effort in code and configuration for small results. The iteration process cannot catch up with the speed the designer’s minds are operating at.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this project, we propose “Talk UI”, a rapid multi-modal prototyping tool that takes advantage of natural language to facilitate the design process and accelerate prototype iteration. With Talk UI, designers will be able to create graphical interfaces as well as specify interactive outcomes through talking and demonstration. No more sketching is needed, and the UI design process will be as natural as having a conversation.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;p&gt;Our Talk UI leverages natural language and voice input from users and supports the following features that we would like to highlight:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Continuous listening of user voice input without necessity of the user specifying start and stop of a conversation&lt;/li&gt;
  &lt;li&gt;Instantiation of graphical objects and widgets through natural language&lt;/li&gt;
  &lt;li&gt;Attaching interactive behaviors to existing graphical objects through demonstration&lt;/li&gt;
  &lt;li&gt;Support of direct manipulation to update graphical object properties through property sheet&lt;/li&gt;
  &lt;li&gt;Display of voice command history and conversation feedbacks&lt;/li&gt;
  &lt;li&gt;Static export of the final interface&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Apache Hadoop YARN: Yet Another Resource Negotiator</title>
   <link href="/papers/2020/05/02/yarn/"/>
   <updated>2020-05-02T00:00:00+00:00</updated>
   <id>/papers/2020/05/02/yarn</id>
   <content type="html">&lt;h2 id=&quot;paper-link&quot;&gt;Paper Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cse.ust.hk/~weiwa/teaching/Fall15-COMP6611B/reading_list/YARN.pdf&quot;&gt;yarn&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;Vinod Kumar Vavilapalli, Arun C Murthy, Chris Douglas, Sharad Agarwal, Mahadev Konar, Robert Evans, Thomas Graves, Jason Lowe, Hitesh Shah, Siddharth Seth, Bikas Saha, Carlo Curino, Owen O’Malley, Sanjay Radia, Benjamin Reed, Eric Baldeschwieler&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;mindmap&quot;&gt;MindMap&lt;/h2&gt;

&lt;p&gt;Click &lt;a href=&quot;/public/files/yarn.png&quot;&gt;here&lt;/a&gt; to see the mind map generated via &lt;a href=&quot;http://mubu.com/&quot;&gt;Mubu&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/public/files/yarn.html&quot;&gt;Link to a notes&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>VMware Distributed Resource Management: Design, Implementation, and Lessons Learned</title>
   <link href="/papers/2020/05/02/vmware-drs/"/>
   <updated>2020-05-02T00:00:00+00:00</updated>
   <id>/papers/2020/05/02/vmware-drs</id>
   <content type="html">&lt;h2 id=&quot;paper-link&quot;&gt;Paper Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.waldspurger.org/carl/papers/drs-vmtj-mar12.pdf&quot;&gt;drs-vmtj-mar12&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;Ajay Gulati, Anne Holler, Minwen Ji, Ganesha Shanmuganathan, Carl Waldspurger, Xiaoyun Zhu&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;mindmap&quot;&gt;MindMap&lt;/h2&gt;

&lt;p&gt;Click &lt;a href=&quot;/public/files/vmware-drs.png&quot;&gt;here&lt;/a&gt; to see the mind map generated via &lt;a href=&quot;http://mubu.com/&quot;&gt;Mubu&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/public/files/vmware-drs.html&quot;&gt;Link to a notes&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Needle in a haystack: efficient storage of billions of photos</title>
   <link href="/papers/2020/05/02/needle-in-a-haystack-efficient-storage-of-billions-of-photos/"/>
   <updated>2020-05-02T00:00:00+00:00</updated>
   <id>/papers/2020/05/02/needle-in-a-haystack-efficient-storage-of-billions-of-photos</id>
   <content type="html">&lt;h2 id=&quot;paper-link&quot;&gt;Paper Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://engineering.fb.com/core-data/needle-in-a-haystack-efficient-storage-of-billions-of-photos/&quot;&gt;haystack&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;Doug Beaver, Sanjeev Kumar, Harry C. Li, Jason Sobel, Peter Vajgel&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;mindmap&quot;&gt;MindMap&lt;/h2&gt;

&lt;p&gt;Click &lt;a href=&quot;/public/files/haystack.png&quot;&gt;here&lt;/a&gt; to see the mind map generated via &lt;a href=&quot;http://mubu.com/&quot;&gt;Mubu&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/public/files/haystack.html&quot;&gt;Link to a notes&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center</title>
   <link href="/papers/2020/05/02/mesos/"/>
   <updated>2020-05-02T00:00:00+00:00</updated>
   <id>/papers/2020/05/02/mesos</id>
   <content type="html">&lt;h2 id=&quot;paper-link&quot;&gt;Paper Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://people.eecs.berkeley.edu/~alig/papers/mesos.pdf&quot;&gt;mesos&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;Benjamin Hindman, Andy Konwinski, Matei Zaharia, Ali Ghodsi, Anthony D. Joseph, Randy Katz, Scott Shenker, Ion Stoica&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;mindmap&quot;&gt;MindMap&lt;/h2&gt;

&lt;p&gt;Click &lt;a href=&quot;/public/files/mesos.png&quot;&gt;here&lt;/a&gt; to see the mind map generated via &lt;a href=&quot;http://mubu.com/&quot;&gt;Mubu&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/public/files/mesos.html&quot;&gt;Link to a notes&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Borg, Omega, and Kubernetes</title>
   <link href="/papers/2020/05/02/borg-omega-kubernetes/"/>
   <updated>2020-05-02T00:00:00+00:00</updated>
   <id>/papers/2020/05/02/borg-omega-kubernetes</id>
   <content type="html">&lt;h2 id=&quot;paper-link&quot;&gt;Paper Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://queue.acm.org/detail.cfm?id=2898444&quot;&gt;2898442.2898444&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;Brendan Burns, Brian Grant, David Oppenheimer, Eric Brewer, and John Wilkes&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;mindmap&quot;&gt;MindMap&lt;/h2&gt;

&lt;p&gt;Click &lt;a href=&quot;/public/files/borg.png&quot;&gt;here&lt;/a&gt; to see the mind map generated via &lt;a href=&quot;http://mubu.com/&quot;&gt;Mubu&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/public/files/borg.html&quot;&gt;Link to a notes&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>B4: Experience with a Globally-Deployed Software Defined WAN</title>
   <link href="/papers/2020/05/02/b4-sdn/"/>
   <updated>2020-05-02T00:00:00+00:00</updated>
   <id>/papers/2020/05/02/b4-sdn</id>
   <content type="html">&lt;h2 id=&quot;paper-link&quot;&gt;Paper Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://cseweb.ucsd.edu/~vahdat/papers/b4-sigcomm13.pdf&quot;&gt;b4-sigcomm13&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;Sushant Jain, Alok Kumar, Subhasree Mandal, Joon Ong, Leon Poutievski, Arjun Singh, Subbaiah Venkata, Jim Wanderer, Junlan Zhou, Min Zhu, Jonathan Zolla, Urs Hölzle, Stephen Stuart and Amin Vahdat&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;mindmap&quot;&gt;MindMap&lt;/h2&gt;

&lt;p&gt;Click &lt;a href=&quot;/public/files/b4.png&quot;&gt;here&lt;/a&gt; to see the mind map generated via &lt;a href=&quot;http://mubu.com/&quot;&gt;Mubu&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/public/files/B4.html&quot;&gt;Link to a notes&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dynamiclly Scaling Applications in the Cloud</title>
   <link href="/papers/2020/01/14/dynamiclly-scaling-apps-in-the-cloud/"/>
   <updated>2020-01-14T00:00:00+00:00</updated>
   <id>/papers/2020/01/14/dynamiclly-scaling-apps-in-the-cloud</id>
   <content type="html">&lt;h2 id=&quot;paper-link&quot;&gt;Paper Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dl.acm.org/doi/10.1145/1925861.1925869&quot;&gt;10.1145/1925861&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;Luis M. Vaquero, Luis Rodero-Merino, Rajkumar Buyya&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Scalability of a cloud service refers to the capability to dynamically grow or shrink (scale up or scale down) the underlying infrastructure based on some metrics (e.g. the number of requests per second). It strongly affects the Quality of Service (QoS) of an application. Cloud computing features scalability and that “makes it different to so-called ‘advanced outsourcing’ solution”.
The real scenario is not that ideal however and what we perceived automated scaling for cloud applications is not that perfect yet and some important pending issues still exist. This paper investigated the most notable initiatives concerning “whole application scalability” in the cloud. The authors provide state of the art efforts to this issue and the underlying trends they follow.&lt;/p&gt;

&lt;p&gt;We mentioned “whole application scalability”, it includes different elements when different abstraction levels applied.&lt;/p&gt;

&lt;p&gt;For IaaS (Infrastructure as a Service), where cloud service providers offer hardware infrastructures such as virtual machines (VMs) and networks, “whole application scalability” includes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Sever scalability&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Load balancers and load balancing algorithms&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Network scalability (application should be able to request bandwidth-provisioned network pipes and other network resources to interconnect them, the so-called NaaS)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To be more clear, we can divide IaaS into horizontal scaling and vertical scaling.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Horizontal scaling: add new server replicas and load balancers to distribute load among all available replicas. This is where we have more factors to consider, e.g. load balancing algorithms, load balancing load balancers, network slicing, dynamic bandwidth allocation, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Vertical scaling: on-the-fly changing of the assigned resources to an already running instance. Common OSs usually do not support on-the-fly changes on the existing hardware, and sometimes a new VM is provisioned to seamlessly replace the old VM.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For PaaS (Platform as a Service), where the cloud service providers (CSPs) offer a container-like environment and developers deploy their applications as software components, “whole application scalability” here we examine container replication and database replication (there are other factors as well).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Container Scalability
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;At container level, there are two ways to run user’s components.&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;Run them on non-shared containers, which limits the level of scalability.&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Share containers across users (i.e. enabling multitenant containers), which usually gives better scalability but requires strong isolation among users.&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;

        &lt;p&gt;Both approaches implement scalability by &lt;strong&gt;replicate&lt;/strong&gt; the containers so that user components can run (similar to horizontal scaling). This should be done &lt;strong&gt;automatically&lt;/strong&gt; by the platform, which implies developers should be aware of that when designing software components (e.g. stateless v.s. stateful components).&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Database Scalability
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;At the database level, there are many discussions on DBMS scalability in literature. Here we focus on 3 mechanisms:&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;
            &lt;p&gt;Distributed caching&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;NoSQL databases&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;Database clustering&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Database replication is the most important issue to consider when scaling a PaaS platform (major problem comes from the fact that transactions require protecting the data involved while the transaction lasts, often making that data unavailable to other transactions).&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Distributed GraphLab: A Framework for Machine Learning in the Cloud</title>
   <link href="/papers/2019/12/13/distributed-graphlab/"/>
   <updated>2019-12-13T00:00:00+00:00</updated>
   <id>/papers/2019/12/13/distributed-graphlab</id>
   <content type="html">&lt;h2 id=&quot;paper-link&quot;&gt;Paper Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1204.6078v1&quot;&gt;1204.6078v1&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.cmu.edu/~ylow/&quot;&gt;Yucheng Low&lt;/a&gt;, Joseph Gonzalez, Aapo Kyrola, Danny Bickson, Carlos Guestrin, Joseph M. Hellerstein&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;mindmap&quot;&gt;MindMap&lt;/h2&gt;

&lt;p&gt;Click &lt;a href=&quot;/public/files/distgraphlab.png&quot;&gt;here&lt;/a&gt; to see the mind map generated via &lt;a href=&quot;http://mubu.com/&quot;&gt;Mubu&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/public/files/distgraphlab.html&quot;&gt;Link to a notes&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Multimodal Machine Learning: A survey and Taxonomy</title>
   <link href="/papers/2019/11/17/multimodal-ml-survey/"/>
   <updated>2019-11-17T00:00:00+00:00</updated>
   <id>/papers/2019/11/17/multimodal-ml-survey</id>
   <content type="html">&lt;h2 id=&quot;paper-link&quot;&gt;Paper Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1705.09406&quot;&gt;1705.09406&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;Tadas Baltrušaitis, Chaitanya Ahuja, Louis-Philippe Morency&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Multimodal machine learning is about integrating different information sources (called modalities) and build a more performant and robust model. The authors did a comprehensive survey on recent progress in multimodal ML and unified these advances under the same taxonomy.&lt;/li&gt;
  &lt;li&gt;The authors did a historical review on the applications of multimodal ML such as audio-visual speech recognition and image captioning, they categorized the applications and use that to motivate their discussion on the common technical challenges faced by these applications. This paper summarized 5 major challenges including representation, translation, alignment, fusion, and co-learning.&lt;/li&gt;
  &lt;li&gt;This paper provides an in-depth and comprehensive survey on the above-summarized challenges faced by the Multimodal ML field. For each challenge, the authors reviewed previous attempts in approaching them and formally defined a common taxonomy for each challenge. Representation is defined over Joint or Coordinated representation, Translation is unified into example-based and generative approaches, Alignment can be divided into explicit and implicit, Fusion could be model-agnostic or model-based, Co-learning could be parallel, non-parallel or hybrid based on the resources available to that modality.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Scaling Distributed ML with the Parameter Server</title>
   <link href="/papers/2019/09/29/scaling-distributed-ml-through-parameter-server/"/>
   <updated>2019-09-29T00:00:00+00:00</updated>
   <id>/papers/2019/09/29/scaling-distributed-ml-through-parameter-server</id>
   <content type="html">&lt;h2 id=&quot;paper-link&quot;&gt;Paper Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~muli/file/parameter_server_osdi14.pdf&quot;&gt;parameter_server_osdi14.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;authors&quot;&gt;Authors&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~muli/&quot;&gt;Mu Li&lt;/a&gt;, David G. Andersen, Jun Woo Park, Alexander J. Smola, Amr Ahmed, Vanja Josifovski, James Long, Eugene J. Shekita, Bor-Yiing Su&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Proposed a new general purpose framework called Parameter Server for distributed machine learning&lt;/li&gt;
  &lt;li&gt;Partitioned cluster nodes into server group and worker group and use scheduler to coordinate their communication&lt;/li&gt;
  &lt;li&gt;Used  various consistency model and asynchronous communication to provide flexibility, scalability and fault tolerance&lt;/li&gt;
  &lt;li&gt;The proposed framework is general purpose, which  means it can be applied to arbitrary ML algorithms&lt;/li&gt;
  &lt;li&gt;Considered the characteristics of ML parameters (i.e. vectors, and linear algebra operations between matrices) in their framework and thus enable efficient communication and reduced bandwidth&lt;/li&gt;
  &lt;li&gt;Since the cluster nodes are usually commodity hardware, they used an optimized data replication architecture to replicate data across server nodes to provide fault tolerance and durability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;notes-about-scalable-machine-learning&quot;&gt;Notes about scalable Machine Learning&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;What opportunities Parameter Servers provides?
    &lt;ul&gt;
      &lt;li&gt;Users do not need to use complicated distributed programming tools to build distributed ML application
        &lt;ul&gt;
          &lt;li&gt;How?
            &lt;ul&gt;
              &lt;li&gt;Notice that the iterative-convergent nature of ML algorithms
                &lt;ul&gt;
                  &lt;li&gt;Explore relaxed consistency models for controlled async parallel execution of ML programs to improve overall system efficiency&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to deal with Big data in ML computation?
    &lt;ul&gt;
      &lt;li&gt;This paper’s approach: &lt;strong&gt;Push/Poll&lt;/strong&gt; gradients between server nodes and worker nodes
    - arguably less convenient since users should explicitly decide which parts to be communicated
    - more aggressive efficiency gain
        &lt;ul&gt;
          &lt;li&gt;Other ways: &lt;strong&gt;Distributed Shared Memory&lt;/strong&gt; (DSM) that allow programmers to treat the entire cluster as a single memory pool and each node can read/write to any model parameter via programming interface
            &lt;ul&gt;
              &lt;li&gt;Benefits: facilitates implementation without worrying low-level communication&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scalable ML&lt;/strong&gt; categories
    &lt;ul&gt;
      &lt;li&gt;General-purpose, programmable libs or frameworks
    - user-programmable
    - extensible to handle arbitrary ML applications
    - e.g. GraphLab, Parameter Server
        &lt;ul&gt;
          &lt;li&gt;Special purpose solvers for specific ML applications
            &lt;ul&gt;
              &lt;li&gt;non-programmable&lt;/li&gt;
              &lt;li&gt;restricted to predefined ML applications
                &lt;ul&gt;
                  &lt;li&gt;e.g.
                    &lt;ul&gt;
                      &lt;li&gt;CCD++ for Matrix Factorization;&lt;/li&gt;
                      &lt;li&gt;Vowpal Wabbit for regression/classification via Stochastic optimization;
                        &lt;ul&gt;
                          &lt;li&gt;Yahoo LDA and Google plda for topic modeling&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Compare to Hadoop/Spark
    &lt;ul&gt;
      &lt;li&gt;Hadoop or Spark do not have superior ML algorithm performance compared to proposed frameworks like Parameter Server, GraphLab&lt;/li&gt;
      &lt;li&gt;Hadoop or Spark do not support flexible consistency model and enforce strict consistency; But they do ensure program portability, reliability and fault tolerance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://petuum.com/wp-content/uploads/2019/01/Analysis_High-Performance_Distributed_ML_Scale.pdf&quot;&gt;Analysis of High-Performance Distributed ML at Scale through Parameter Server Consistency Models&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 

</feed>
